<?xml version="1.0" encoding="utf-8"?>
<doc>
   <assembly ninamespaces="NationalInstruments.RFmx.InstrMX|NationalInstruments.RFmx.NRMX">
      <name></name>
   </assembly>
   <members>
      <member name="T:NationalInstruments.RFmx.InstrMX.RFmxNRMXExtension" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXExtension" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides extension methods to create NR signal configuration. These methods are added to RFmxInstrMX class.
         </summary>
         <threadsafety safety="safe" />
         <remarks>For more information about NI-RFmx Instruments, refer to the NI-RFmx Instruments Help.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxNRMXExtension.GetNRSignalConfiguration(NationalInstruments.RFmx.InstrMX.RFmxInstrMX)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNRSignalConfiguration" nihasget="0" nihasset="0" niparameters="instrSession" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMX" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMX">

         <summary>
            Creates a new default NR signal configuration if it doesn't exist; otherwise, it returns the
            existing default NR signal configuration.
         </summary>
         <param name="instrSession">Specifies an instr session.</param>
         <returns>Returns an object of type RFmxNRMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxNRMXExtension.GetNRSignalConfiguration(NationalInstruments.RFmx.InstrMX.RFmxInstrMX,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNRSignalConfiguration" nihasget="0" nihasset="0" niparameters="instrSession,signalName" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMX,System.String" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMX">

         <summary>
            Creates a NR signal configuration for specified signal name. Existing NR signal configuration is
            returned if specified signal name exists.
         </summary>
         <param name="instrSession">Specifies an RFmxInstr session.</param>
         <param name="signalName">Specifies a signal name.</param>
         <returns>Returns an object of type RFmxNRMX.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.InstrMX.RFmxNRMXExtension.NRClearNoiseCalibrationDatabase(NationalInstruments.RFmx.InstrMX.RFmxInstrMX,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NRClearNoiseCalibrationDatabase" nihasget="0" nihasset="0" niparameters="instrSession,selectorString" niparametertypes="NationalInstruments.RFmx.InstrMX.RFmxInstrMX,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Clears the noise calibration database used for noise compensation.<br />
         </summary>
         <param name="instrSession">Specifies an RFmxInstr session.</param>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMX" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMX" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Defines a root class which is used to identify and control NR signal configuration.</summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildOffsetString" nihasget="0" nihasset="0" niparameters="selectorString,offsetNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the offset string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="offsetNumber">
            Specifies the offset number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildBandwidthPartString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildBandwidthPartString" nihasget="0" nihasset="0" niparameters="selectorString,bandwidthPartNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the bandwidth part string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="bandwidthPartNumber">
            Specifies the bandwidth part number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildUserString" nihasget="0" nihasset="0" niparameters="selectorString,userNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the user number string. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and bandwidth part number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildBandwidthPartString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="userNumber">
            Specifies the user number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPuschString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildPuschString" nihasget="0" nihasset="0" niparameters="selectorString,puschNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the PUSCH string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, bandwidth part number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="puschNumber">
            Specifies the PUSCH number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPuschClusterString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildPuschClusterString" nihasget="0" nihasset="0" niparameters="selectorString,puschClusterNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates a PUSCH Cluster string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, bandwidth part number, user number, and pusch number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0/user0/pusch0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0/user0/pusch0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPuschString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="puschClusterNumber">
            Specifies the PUSCH cluster number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPdschString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildPdschString" nihasget="0" nihasset="0" niparameters="selectorString,pdschNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the PDSCH string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, bandwidth part number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="pdschNumber">
            Specifies the PDSCH number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPdschClusterString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildPdschClusterString" nihasget="0" nihasset="0" niparameters="selectorString,pdschClusterNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates a PDSCH Cluster string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, bandwidth part number, user number, and pdsch number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0/user0/pdsch0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0/user0/pdsch0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPdschString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="pdschClusterNumber">
            Specifies the PDSCH cluster number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCoresetString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildCoresetString" nihasget="0" nihasset="0" niparameters="selectorString,coresetNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the coreset string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and bandwidth part number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildBandwidthPartString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="coresetNumber">
            Specifies the CORESET number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCoresetClusterString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildCoresetClusterString" nihasget="0" nihasset="0" niparameters="selectorString,coresetClusterNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the coreset cluster string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, bandwidth part number, and coreset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0/coreset0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0/coreset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCoresetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="coresetClusterNumber">
            Specifies the CORESET cluster number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildPdcchString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildPdcchString" nihasget="0" nihasset="0" niparameters="selectorString,pdcchNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the PDCCH string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, bandwidth part number, and coreset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/bwp0/coreset0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/bwp0/coreset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCoresetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="pdcchNumber">
            Specifies the PDCCH number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SendSoftwareEdgeTrigger" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SendSoftwareEdgeTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Sends a trigger to the device when you use the RFmxNR_CfgTrigger method to choose a software version of a trigger and the device is waiting for the trigger to be sent. You can also use this method to override a hardware trigger.<br />
            This method returns an error in the following situations:<br /><ul>
               <li>
                  You configure an invalid trigger. <br />
               </li>
               <li>
                  You have not previously called the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.Initiate(System.String,System.String)" crefType="FullyQualified" /> method. <br />
               </li>
            </ul>
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.DeleteSignalConfiguration" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DeleteSignalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">

         <summary>
            Deletes an instance of a signal.<br /><br />
         </summary>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.CloneSignalConfiguration(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMX@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CloneSignalConfiguration" nihasget="0" nihasset="0" niparameters="newSignalName,signalConfiguration" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMX" nireturnvaluetype="System.Int32">

         <summary>
            Creates a new instance of a signal by copying all the method values from an existing signal instance.<br />
         </summary>
         <param name="newSignalName">
            Specifies the name of the new signal. This parameter accepts the signal name with or without the "signal::" prefix.
            <br />
            Example:<br /><span class="monospace">"signal::NewSigName"</span><br /><span class="monospace">"NewSigName"</span><br />
         </param>
         <param name="signalConfiguration">Upon return, contains a new NR signal instance.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetError(System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetError" nihasget="0" nihasset="0" niparameters="errorCode,errorDescription" niparametertypes="out System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the latest error code and description.
         </summary>
         <param name="errorCode">Upon return, contains the latest error code.</param>
         <param name="errorDescription">Upon return, contains the latest error description.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetWarning(System.Int32@,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetWarning" nihasget="0" nihasset="0" niparameters="warningCode,warningDescription" niparametertypes="out System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>Gets the latest warning code and description.</summary>
         <param name="warningCode">Upon return, contains the latest warning code.</param>
         <param name="warningDescription">Upon return, contains the latest warning description.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetErrorString(System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetErrorString" nihasget="0" nihasset="0" niparameters="errorCode,errorDescription" niparametertypes="System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Converts the status code returned by an RFmxNR function into a string.
         </summary>
         <param name="errorCode">Specifies an error or warning code.</param>
         <param name="errorDescription">Upon return, contains the error description.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAllNamedResultNames(System.String,System.String[]@,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllNamedResultNames" nihasget="0" nihasset="0" niparameters="selectorString,resultNames,defaultResultExists" niparametertypes="System.String,out System.String[],out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets the named result names of the signal that you specify in the <format type="italics">selectorString</format> parameter.
         </summary>
         <param name="selectorString">
            Pass an empty string. The signal name that is passed when creating the signal configuration is used.
         </param>
         <param name="resultNames">
            Returns an array of result names.
         </param>
         <param name="defaultResultExists">Upon return, indicates whether the default result exists.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">

         <summary>
            Deletes the signal configuration if it is not the default signal configuration and clears any trace of the current signal configuration, if any.
         </summary>
         <remarks>You can call this method safely more than once, even if the signal is already deleted.</remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetSelectedPorts(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSelectedPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the instrument port to be configured to acquire a signal. Use RFmxInstr_GetAvailablePorts function to get the valid port names.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the instrument port to be configured to acquire a signal. Use RFmxInstr_GetAvailablePorts function to get the valid port names.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SelectedPorts" crefType="PartiallyQualified" /> attribute.Default valuesPXIe-5830/5831if1Other devices"" (empty string)
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSelectedPorts(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSelectedPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the instrument port to be configured to acquire a signal. Use RFmxInstr_GetAvailablePorts function to get the valid port names.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the instrument port to be configured to acquire a signal. Use RFmxInstr_GetAvailablePorts function to get the valid port names.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SelectedPorts" crefType="PartiallyQualified" /> attribute.Default valuesPXIe-5830/5831if1Other devices"" (empty string)
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetCenterFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCenterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. For intraband carrier aggregation, this method specifies the reference frequency of a subblock. Depending on the Subblock Frequency Definition method, the center frequency can either be absolute or relative to first subblock's center frequency. All component carrier frequencies within the subblock are defined with respect to this frequency.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. For intraband carrier aggregation, this method specifies the reference frequency of a subblock. Depending on the Subblock Frequency Definition method, the center frequency can either be absolute or relative to first subblock's center frequency. All component carrier frequencies within the subblock are defined with respect to this frequency.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CenterFrequency" crefType="PartiallyQualified" /> attribute.The default of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetCenterFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCenterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. For intraband carrier aggregation, this method specifies the reference frequency of a subblock. Depending on the Subblock Frequency Definition method, the center frequency can either be absolute or relative to first subblock's center frequency. All component carrier frequencies within the subblock are defined with respect to this frequency.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. For intraband carrier aggregation, this method specifies the reference frequency of a subblock. Depending on the Subblock Frequency Definition method, the center frequency can either be absolute or relative to first subblock's center frequency. All component carrier frequencies within the subblock are defined with respect to this frequency.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CenterFrequency" crefType="PartiallyQualified" /> attribute.The default of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetReferenceLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and Vpk-pk for baseband devices.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and Vpk-pk for baseband devices.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceLevel" crefType="PartiallyQualified" /> attribute.The default of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and Vpk-pk for baseband devices.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and Vpk-pk for baseband devices.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceLevel" crefType="PartiallyQualified" /> attribute.The default of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetExternalAttenuation(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetExternalAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the attenuation of a switch (or cable) connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the attenuation of a switch (or cable) connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ExternalAttenuation" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetExternalAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetExternalAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the attenuation of a switch (or cable) connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the attenuation of a switch (or cable) connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ExternalAttenuation" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetReferenceLevelHeadroom(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceLevelHeadroom" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the margin RFmx adds to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The margin avoids clipping and overflow warnings if the input signal exceeds the configured reference level.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the margin RFmx adds to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The margin avoids clipping and overflow warnings if the input signal exceeds the configured reference level.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceLevelHeadroom" crefType="PartiallyQualified" /> attribute.Default valuesPXIe-56686 dBPXIe-5830/5831/58411 dBPXIe-58400 dB
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevelHeadroom(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceLevelHeadroom" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the margin RFmx adds to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The margin avoids clipping and overflow warnings if the input signal exceeds the configured reference level.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the margin RFmx adds to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The margin avoids clipping and overflow warnings if the input signal exceeds the configured reference level.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceLevelHeadroom" crefType="PartiallyQualified" /> attribute.Default valuesPXIe-56686 dBPXIe-5830/5831/58411 dBPXIe-58400 dB
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the type of trigger to be used for signal acquisition.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the type of trigger to be used for signal acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.None" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the type of trigger to be used for signal acquisition.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the type of trigger to be used for signal acquisition.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.None" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetDigitalEdgeTriggerSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDigitalEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the source terminal for the digital edge trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the source terminal for the digital edge trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DigitalEdgeTriggerSource" crefType="PartiallyQualified" /> attribute.The default of this  property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetDigitalEdgeTriggerSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDigitalEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the source terminal for the digital edge trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the source terminal for the digital edge trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DigitalEdgeTriggerSource" crefType="PartiallyQualified" /> attribute.The default of this  property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetDigitalEdgeTriggerEdge(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge" nireturnvaluetype="System.Int32">

         <summary>
            Gets the active edge for the trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the active edge for the trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DigitalEdgeTriggerEdge" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge.Rising" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetDigitalEdgeTriggerEdge(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge" nireturnvaluetype="System.Int32">

         <summary>
            Sets the active edge for the trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the active edge for the trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DigitalEdgeTriggerEdge" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge.Rising" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetIQPowerEdgeTriggerSource(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the channel from which the device monitors the trigger.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the channel from which the device monitors the trigger. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerSource" crefType="PartiallyQualified" /> attribute.The default value of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSource(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the channel from which the device monitors the trigger.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the channel from which the device monitors the trigger. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerSource" crefType="PartiallyQualified" /> attribute.The default value of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetIQPowerEdgeTriggerLevel(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />; and in dBm when you set the IQ Power Edge Level Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />; and in dBm when you set the IQ Power Edge Level Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerLevel" crefType="PartiallyQualified" /> attribute.The default value of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />; and in dBm when you set the IQ Power Edge Level Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />; and in dBm when you set the IQ Power Edge Level Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerLevel" crefType="PartiallyQualified" /> attribute.The default value of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the reference for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The IQ Power Edge Level Type method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the reference for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The IQ Power Edge Level Type method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerLevelType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the reference for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The IQ Power Edge Level Type method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the reference for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The IQ Power Edge Level Type method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerLevelType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerSlope" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerSlope" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetTriggerDelay(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerDelay" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the trigger delay time. This value is expressed in seconds. If the delay is negative, the measurement acquires pre-trigger samples. If the delay is positive, the measurement acquires post-trigger samples.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the trigger delay time. This value is expressed in seconds. If the delay is negative, the measurement acquires pre-trigger samples. If the delay is positive, the measurement acquires post-trigger samples. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerDelay" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerDelay(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerDelay" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the trigger delay time. This value is expressed in seconds. If the delay is negative, the measurement acquires pre-trigger samples. If the delay is positive, the measurement acquires post-trigger samples.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the trigger delay time. This value is expressed in seconds. If the delay is negative, the measurement acquires pre-trigger samples. If the delay is positive, the measurement acquires post-trigger samples. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerDelay" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetTriggerMinimumQuietTimeMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement computes the minimum quiet time used for triggering.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement computes the minimum quiet time used for triggering. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerMinimumQuietTimeMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerMinimumQuietTimeMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement computes the minimum quiet time used for triggering.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement computes the minimum quiet time used for triggering. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerMinimumQuietTimeMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetTriggerMinimumQuietTimeDuration(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTriggerMinimumQuietTimeDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the time duration for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. This value is expressed in seconds. If you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet below the trigger level.  If you set the IQ Power Edge Slope method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Falling" crefType="PartiallyQualified" />, the signal is quiet above the trigger level.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the time duration for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. This value is expressed in seconds. If you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet below the trigger level.  If you set the IQ Power Edge Slope method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Falling" crefType="PartiallyQualified" />, the signal is quiet above the trigger level.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerMinimumQuietTimeDuration" crefType="PartiallyQualified" /> attribute.The default of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerMinimumQuietTimeDuration(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTriggerMinimumQuietTimeDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the time duration for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. This value is expressed in seconds. If you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet below the trigger level.  If you set the IQ Power Edge Slope method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Falling" crefType="PartiallyQualified" />, the signal is quiet above the trigger level.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the time duration for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. This value is expressed in seconds. If you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet below the trigger level.  If you set the IQ Power Edge Slope method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Falling" crefType="PartiallyQualified" />, the signal is quiet above the trigger level.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerMinimumQuietTimeDuration" crefType="PartiallyQualified" /> attribute.The default of this property is hardware dependent.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetLinkDirection(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLinkDirection" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection" nireturnvaluetype="System.Int32">

         <summary>
            Gets the link direction of the received signal.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the link direction of the received signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.LinkDirection" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection.Uplink" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetLinkDirection(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetLinkDirection" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection" nireturnvaluetype="System.Int32">

         <summary>
            Sets the link direction of the received signal.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the link direction of the received signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.LinkDirection" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection.Uplink" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetgNodeBCategory(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetgNodeBCategory" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory" nireturnvaluetype="System.Int32">

         <summary>
            Gets the downlink gNodeB (base station) category. Refer to the <em>3GPP 38.104</em> specification for more information about gNodeB category.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the downlink gNodeB (base station) category. Refer to the <em>3GPP 38.104</em> specification for more information about gNodeB category.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.gNodeBCategory" crefType="PartiallyQualified" /> attribute.The default value is  Wide Area Base Station - Category A.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetgNodeBCategory(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetgNodeBCategory" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory" nireturnvaluetype="System.Int32">

         <summary>
            Sets the downlink gNodeB (base station) category. Refer to the <em>3GPP 38.104</em> specification for more information about gNodeB category.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the downlink gNodeB (base station) category. Refer to the <em>3GPP 38.104</em> specification for more information about gNodeB category.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.gNodeBCategory" crefType="PartiallyQualified" /> attribute.The default value is  Wide Area Base Station - Category A.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetTransmitAntennaToAnalyze(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTransmitAntennaToAnalyze" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the physical antenna that is currently connected to the analyzer.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the physical antenna that is currently connected to the analyzer.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TransmitAntennaToAnalyze" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitAntennaToAnalyze(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTransmitAntennaToAnalyze" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the physical antenna that is currently connected to the analyzer.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the physical antenna that is currently connected to the analyzer.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TransmitAntennaToAnalyze" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetPowerClass(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPowerClass" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power class for the UE as specified in section 6.2 of <em>3GPP 38.101-1/2/3</em> specification.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the power class for the UE as specified in section 6.2 of <em>3GPP 38.101-1/2/3</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PowerClass" crefType="PartiallyQualified" /> attribute.The default value is 3.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPowerClass(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPowerClass" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power class for the UE as specified in section 6.2 of <em>3GPP 38.101-1/2/3</em> specification.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the power class for the UE as specified in section 6.2 of <em>3GPP 38.101-1/2/3</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PowerClass" crefType="PartiallyQualified" /> attribute.The default value is 3.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetPiBy2BpskPowerBoostEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPiBy2BpskPowerBoostEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power boost for PI/2 BPSK signal when you set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified" />. This method is valid only for uplink direction.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the power boost for PI/2 BPSK signal when you set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified" />. This method is valid only for uplink direction.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PiBy2BpskPowerBoostEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPiBy2BpskPowerBoostEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPiBy2BpskPowerBoostEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power boost for PI/2 BPSK signal when you set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified" />. This method is valid only for uplink direction.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the power boost for PI/2 BPSK signal when you set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified" />. This method is valid only for uplink direction.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PiBy2BpskPowerBoostEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAutoResourceBlockDetectionEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement or configured by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement or configured by you.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AutoResourceBlockDetectionEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAutoResourceBlockDetectionEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement or configured by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement or configured by you.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AutoResourceBlockDetectionEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetDownlinkChannelConfigurationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDownlinkChannelConfigurationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets the downlink channel configuration mode.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the downlink channel configuration mode. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkChannelConfigurationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode.TestModel" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetDownlinkChannelConfigurationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDownlinkChannelConfigurationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets the downlink channel configuration mode.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the downlink channel configuration mode. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkChannelConfigurationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode.TestModel" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAutoIncrementCellIDEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAutoIncrementCellIDEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the cell ID of component carrier is auto calculated and configured by the measurement or configured by the user.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the cell ID of component carrier is auto calculated and configured by the measurement or configured by the user.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AutoIncrementCellIDEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoIncrementCellIDEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAutoIncrementCellIDEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the cell ID of component carrier is auto calculated and configured by the measurement or configured by the user.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the cell ID of component carrier is auto calculated and configured by the measurement or configured by the user.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AutoIncrementCellIDEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetNumberOfSubblocks(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfSubblocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of subblocks configured in intraband non-contiguous carrier aggregation scenarios.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of subblocks configured in intraband non-contiguous carrier aggregation scenarios.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfSubblocks" crefType="PartiallyQualified" /> attribute.The default value is 1. Set this property to 1 for single carrier and intra-band contiguous carrier aggregation.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetNumberOfSubblocks(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfSubblocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of subblocks configured in intraband non-contiguous carrier aggregation scenarios.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of subblocks configured in intraband non-contiguous carrier aggregation scenarios.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfSubblocks" crefType="PartiallyQualified" /> attribute.The default value is 1. Set this property to 1 for single carrier and intra-band contiguous carrier aggregation.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition" nireturnvaluetype="System.Int32">

         <summary>
            Gets if the subblock center frequency definition is an absolute frequency or relative to the absolute frequency of the first subblock. This method is ignored for the first subblock and is considered to be absolute by the measurement.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains if the subblock center frequency definition is an absolute frequency or relative to the absolute frequency of the first subblock. This method is ignored for the first subblock and is considered to be absolute by the measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockFrequencyDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition.Relative" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSubblockFrequencyDefinition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition" nireturnvaluetype="System.Int32">

         <summary>
            Sets if the subblock center frequency definition is an absolute frequency or relative to the absolute frequency of the first subblock. This method is ignored for the first subblock and is considered to be absolute by the measurement.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies if the subblock center frequency definition is an absolute frequency or relative to the absolute frequency of the first subblock. This method is ignored for the first subblock and is considered to be absolute by the measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockFrequencyDefinition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition.Relative" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetSubblockTransmitLOFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockTransmitLOFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency of the transmitters local oscillator. This value is expressed in Hz. The frequency is defined per subblock and relative to the respective subblock center frequency.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency of the transmitters local oscillator. This value is expressed in Hz. The frequency is defined per subblock and relative to the respective subblock center frequency.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockTransmitLOFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSubblockTransmitLOFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the frequency of the transmitters local oscillator. This value is expressed in Hz. The frequency is defined per subblock and relative to the respective subblock center frequency.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the frequency of the transmitters local oscillator. This value is expressed in Hz. The frequency is defined per subblock and relative to the respective subblock center frequency.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockTransmitLOFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetPhaseCompensationFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPhaseCompensationFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency used for phase compensation of the signal when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.UserDefined" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the frequency used for phase compensation of the signal when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.UserDefined" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PhaseCompensationFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensationFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPhaseCompensationFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the frequency used for phase compensation of the signal when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.UserDefined" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the frequency used for phase compensation of the signal when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.UserDefined" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PhaseCompensationFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetFrequencyRange(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyRange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to use channel bandwidth and subcarrier spacing configuration supported in the frequency range 1 (sub 6 GHz) or the frequency range 2 (above 24 GHz).
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br/> Example: "subblock0".<br/> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified"/> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether to use channel bandwidth and subcarrier spacing configuration supported in the frequency range 1 (sub 6 GHz) or the frequency range 2 (above 24 GHz).			</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified"/> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified"/>.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetFrequencyRange(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyRange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to use channel bandwidth and subcarrier spacing configuration supported in the frequency range 1 (sub 6 GHz) or the frequency range 2 (above 24 GHz).
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br/> Example: "subblock0".<br/> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified"/> method to build the selector string.
         </param>
         <param name="value">Specifies whether to use channel bandwidth and subcarrier spacing configuration supported in the frequency range 1 (sub 6 GHz) or the frequency range 2 (above 24 GHz).			</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified"/> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified"/>.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetBand(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBand" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the evolved universal terrestrial radio access (E-UTRA) or NR operating frequency band of a subblock as specified in section 5.2 of the <em>3GPP 38.101-1/2/3</em> specification. Band determines the spectral flatness mask and spectral emission mask.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the evolved universal terrestrial radio access (E-UTRA) or NR operating frequency band of a subblock as specified in section 5.2 of the <em>3GPP 38.101-1/2/3</em> specification. Band determines the spectral flatness mask and spectral emission mask.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.Band" crefType="PartiallyQualified" /> attribute.The default value is 78. Valid values for frequency range 1 are 1, 2, 3, 5, 7, 8, 12, 20, 25, 28, 34, 38, 39, 40, 41, 50, 51, 66, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, and 86. Valid values for frequency range 2 are 257, 258, 260, and 261.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetBand(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetBand" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the evolved universal terrestrial radio access (E-UTRA) or NR operating frequency band of a subblock as specified in section 5.2 of the <em>3GPP 38.101-1/2/3</em> specification. Band determines the spectral flatness mask and spectral emission mask.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the evolved universal terrestrial radio access (E-UTRA) or NR operating frequency band of a subblock as specified in section 5.2 of the <em>3GPP 38.101-1/2/3</em> specification. Band determines the spectral flatness mask and spectral emission mask.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.Band" crefType="PartiallyQualified" /> attribute.The default value is 78. Valid values for frequency range 1 are 1, 2, 3, 5, 7, 8, 12, 20, 25, 28, 34, 38, 39, 40, 41, 50, 51, 66, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, and 86. Valid values for frequency range 2 are 257, 258, 260, and 261.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetSubblockEndcNominalSpacingAdjustment(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockEndcNominalSpacingAdjustment" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the adjustment of the center frequency for adjacent E-UTRA and NR Channels in case of nominal spacing. The value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the adjustment of the center frequency for adjacent E-UTRA and NR Channels in case of nominal spacing. The value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockEndcNominalSpacingAdjustment" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockEndcNominalSpacingAdjustment(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSubblockEndcNominalSpacingAdjustment" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the adjustment of the center frequency for adjacent E-UTRA and NR Channels in case of nominal spacing. The value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the adjustment of the center frequency for adjacent E-UTRA and NR Channels in case of nominal spacing. The value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockEndcNominalSpacingAdjustment" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetChannelRaster(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetChannelRaster" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the subblock channel raster which is used for computing nominal spacing between aggregated carriers as specified in section 5.4A.1 of <em>3GPP 38.101-1/2</em> specification and section 5.4.1.2 of <em>3GPP TS 38.104</em> specification. The value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the subblock channel raster which is used for computing nominal spacing between aggregated carriers as specified in section 5.4A.1 of <em>3GPP 38.101-1/2</em> specification and section 5.4.1.2 of <em>3GPP TS 38.104</em> specification. The value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChannelRaster" crefType="PartiallyQualified" /> attribute.The default value is 15 kHz.Valid values for frequency range 1 are 15 kHz and 100kHz.Valid values for frequency range 2 is 60 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetChannelRaster(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetChannelRaster" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the subblock channel raster which is used for computing nominal spacing between aggregated carriers as specified in section 5.4A.1 of <em>3GPP 38.101-1/2</em> specification and section 5.4.1.2 of <em>3GPP TS 38.104</em> specification. The value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the subblock channel raster which is used for computing nominal spacing between aggregated carriers as specified in section 5.4A.1 of <em>3GPP 38.101-1/2</em> specification and section 5.4.1.2 of <em>3GPP TS 38.104</em> specification. The value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChannelRaster" crefType="PartiallyQualified" /> attribute.The default value is 15 kHz.Valid values for frequency range 1 are 15 kHz and 100kHz.Valid values for frequency range 2 is 60 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierSpacingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the spacing between adjacent component carriers (CCs) within a subblock.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the spacing between adjacent component carriers (CCs) within a subblock. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierSpacingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.Nominal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetComponentCarrierSpacingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the spacing between adjacent component carriers (CCs) within a subblock.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the spacing between adjacent component carriers (CCs) within a subblock. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierSpacingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.Nominal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetComponentCarrierAtCenterFrequency(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierAtCenterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the index of the component carrier having its center at the user-configured center frequency. The measurement uses this method along with <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType)" crefType="FullyQualified" /> method to calculate the value of the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" />. This method is ignored if you set the CC Spacing Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.User" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the index of the component carrier having its center at the user-configured center frequency. The measurement uses this method along with <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType)" crefType="FullyQualified" /> method to calculate the value of the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" />. This method is ignored if you set the CC Spacing Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.User" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierAtCenterFrequency" crefType="PartiallyQualified" /> attribute.Valid values are -1, 0, 1 ... n - 1, inclusive, where n is the number of component carriers in the subblock. The default value is -1. If the value is -1, the component carrier frequency values are calculated such that the center of the subcarrier(with maximum subcarrier spacing for a frequency range), which is closest to the center of the aggregated channel bandwidth, lies at the center frequency.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierAtCenterFrequency(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetComponentCarrierAtCenterFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the index of the component carrier having its center at the user-configured center frequency. The measurement uses this method along with <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType)" crefType="FullyQualified" /> method to calculate the value of the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" />. This method is ignored if you set the CC Spacing Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.User" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the index of the component carrier having its center at the user-configured center frequency. The measurement uses this method along with <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType)" crefType="FullyQualified" /> method to calculate the value of the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" />. This method is ignored if you set the CC Spacing Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.User" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierAtCenterFrequency" crefType="PartiallyQualified" /> attribute.Valid values are -1, 0, 1 ... n - 1, inclusive, where n is the number of component carriers in the subblock. The default value is -1. If the value is -1, the component carrier frequency values are calculated such that the center of the subcarrier(with maximum subcarrier spacing for a frequency range), which is closest to the center of the aggregated channel bandwidth, lies at the center frequency.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAcquisitionBandwidthOptimizationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx optimizes the acquisition bandwidth. This may cause acquisition center frequency or local oscillator (LO) to be placed at different position than you configured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether RFmx optimizes the acquisition bandwidth. This may cause acquisition center frequency or local oscillator (LO) to be placed at different position than you configured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcquisitionBandwidthOptimizationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAcquisitionBandwidthOptimizationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx optimizes the acquisition bandwidth. This may cause acquisition center frequency or local oscillator (LO) to be placed at different position than you configured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether RFmx optimizes the acquisition bandwidth. This may cause acquisition center frequency or local oscillator (LO) to be placed at different position than you configured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcquisitionBandwidthOptimizationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTransmitterArchitecture" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RF architecture at the transmitter in case of a multi-carrier. Each component carriers within a subblock can have separate LO or one common LO for entire subblock.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the RF architecture at the transmitter in case of a multi-carrier. Each component carriers within a subblock can have separate LO or one common LO for entire subblock.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TransmitterArchitecture" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTransmitterArchitecture" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RF architecture at the transmitter in case of a multi-carrier. Each component carriers within a subblock can have separate LO or one common LO for entire subblock.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the RF architecture at the transmitter in case of a multi-carrier. Each component carriers within a subblock can have separate LO or one common LO for entire subblock.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TransmitterArchitecture" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPhaseCompensation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether phase compensation is disabled, auto-set by the measurement or set by the you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether phase compensation is disabled, auto-set by the measurement or set by the you. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PhaseCompensation" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPhaseCompensation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether phase compensation is disabled, auto-set by the measurement or set by the you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether phase compensation is disabled, auto-set by the measurement or set by the you. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PhaseCompensation" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetReferenceGridAlignmentMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceGridAlignmentMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to align the bandwidthparts and the SSB in a component carrier to a reference resource grid automatically or manually.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to align the bandwidthparts and the SSB in a component carrier to a reference resource grid automatically or manually. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridAlignmentMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceGridAlignmentMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceGridAlignmentMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to align the bandwidthparts and the SSB in a component carrier to a reference resource grid automatically or manually.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to align the bandwidthparts and the SSB in a component carrier to a reference resource grid automatically or manually. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridAlignmentMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetLimitedConfigurationChange(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange" nireturnvaluetype="System.Int32">

         <summary>
            Gets the set of properties that are considered by RFmx in the locked signal configuration state.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the set of properties that are considered by RFmx in the locked signal configuration state.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.LimitedConfigurationChange" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetLimitedConfigurationChange(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetLimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange" nireturnvaluetype="System.Int32">

         <summary>
            Sets the set of properties that are considered by RFmx in the locked signal configuration state.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the set of properties that are considered by RFmx in the locked signal configuration state.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.LimitedConfigurationChange" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetResultFetchTimeout(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetResultFetchTimeout" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the time to wait before results are available in the RFmxNR Property Node. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the time to wait before results are available in the RFmxNR Property Node. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ResultFetchTimeout" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetResultFetchTimeout(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetResultFetchTimeout" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the time to wait before results are available in the RFmxNR Property Node. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the time to wait before results are available in the RFmxNR Property Node. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ResultFetchTimeout" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureRF(System.String,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRF" nihasget="0" nihasset="0" niparameters="selectorString,centerFrequency,referenceLevel,externalAttenuation" niparametertypes="System.String,System.Double,System.Double,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the RF methods of the signal specified by the selector string.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="centerFrequency">
            Specifies the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. The parameter specifies the reference frequency of the subblock for intra-band carrier aggregation. Depending on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> method, the center frequency can either be an absolute frequency or relative to the absolute frequency of the center frequency of the first subblock. All component carrier frequencies within the subblock are defined with respect to this frequency. The default value of this parameter is hardware dependent. <br />
         </param>
         <param name="referenceLevel">
            Specifies the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and <em>
               Vpk-pk
            </em> for baseband devices. The default value of this parameter is hardware dependent.
            <br />
         </param>
         <param name="externalAttenuation">
            Specifies the attenuation of a switch or cable connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the RF Attenuation and Signal Levels topic for your device in the<em> NI RF Vector Signal Analyzers Help</em>.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureFrequency" nihasget="0" nihasset="0" niparameters="selectorString,centerFrequency" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the expected carrier frequency of the RF signal to acquire. The signal analyzer tunes to this frequency. <br />
            Use "subblock(n)" as the selector string to configure this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="centerFrequency">
            Specifies the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. The parameter specifies the reference frequency of the subblock for intra-band carrier aggregation. Depending on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> method, the center frequency can either be an absolute frequency or relative to the absolute frequency of the center frequency of the first subblock. All component carrier frequencies within the subblock are defined with respect to this frequency. The default value of this parameter is hardware dependent. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureReferenceLevel(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceLevel" nihasget="0" nihasset="0" niparameters="selectorString,referenceLevel" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the reference level which represents the maximum expected power of an RF input signal.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="referenceLevel">
            Specifies the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and <em>
               Vpk-pk
            </em> for baseband devices. The default value of this parameter is hardware dependent.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureExternalAttenuation(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureExternalAttenuation" nihasget="0" nihasset="0" niparameters="selectorString,externalAttenuation" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Specifies the attenuation of a switch or cable connected to the RF IN connector of the signal analyzer.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="externalAttenuation">
            Specifies the attenuation of a switch or cable connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the RF Attenuation and Signal Levels topic for your device in the<em> NI RF Vector Signal Analyzers Help</em>.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfiguregNodeBCategory(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfiguregNodeBCategory" nihasget="0" nihasset="0" niparameters="selectorString,gNodeBCategory" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory" nireturnvaluetype="System.Int32">

         <summary>
            Configures the gNodeB Category of the signal being measured. <br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="gNodeBCategory">
            Specifies the downlink gNodeB (Base station) category. Refer to <em>3GPP 38.104</em> specification for more information about gNodeB Category.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.AbortMeasurements(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AbortMeasurements" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Stops acquisition and measurements  associated with signal instance that you specify in the  <em>selectorString</em> parameter, which were previously initiated by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.Initiate(System.String,System.String)" crefType="FullyQualified" /> method or measurement read methods. Calling this method is optional, unless you want to stop a measurement before it is complete. This method executes even if there is an incoming error.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.AnalyzeIQ(System.String,System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},System.Boolean,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzeIQ" nihasget="0" nihasset="0" niparameters="selectorString,resultName,iq,reset,averagingDone" niparametertypes="System.String,System.String,NationalInstruments.ComplexWaveform`1[[NationalInstruments.ComplexSingle, NationalInstruments.Common, Version=19.0.40.49152, Culture=neutral, PublicKeyToken=dc6ad606294fc298]],System.Boolean,out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="resultName">missing content</param>
         <param name="iq">missing content</param>
         <param name="reset">missing content</param>
         <param name="averagingDone">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.AnalyzeSpectrum(System.String,System.String,NationalInstruments.Spectrum{System.Single},System.Boolean,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzeSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,resultName,spectrum,reset,averagingDone" niparametertypes="System.String,System.String,NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],System.Boolean,out System.Boolean" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="resultName">missing content</param>
         <param name="spectrum">missing content</param>
         <param name="reset">missing content</param>
         <param name="averagingDone">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.AnalyzeIQ1Waveform(System.String,System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle},System.Boolean,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzeIQ1Waveform" nihasget="0" nihasset="0" niparameters="selectorString,resultName,iq,reset,reserved" niparametertypes="System.String,System.String,NationalInstruments.ComplexWaveform`1[[NationalInstruments.ComplexSingle, NationalInstruments.Common, Version=19.0.40.49152, Culture=neutral, PublicKeyToken=dc6ad606294fc298]],System.Boolean,System.Int64" nireturnvaluetype="System.Int32">

         <summary>
            Performs the enabled measurements on the I/Q complex waveform that you specify in <em>IQ</em> parameter. Call this method after you configure the signal and measurement methods. You can fetch measurement results using the Fetch methods or result methods in the method node.
            Use this method only if the Recommended Acquisition Type method value is either <em>IQ</em> or <em>IQorSpectral</em>.<br />
            When using the Analysis-Only mode in RFmxNR, the RFmx driver ignores the RFmx hardware settings such as reference level and attenuation. The only RF hardware settings that are not ignored are the center frequency and trigger type, since it is needed for spectral measurement traces as well as some measurements such as ModAcc, ACP, and SEM.<br />
            Query the Recommended Acquisition Type method from the RFmxInstr Property Node after calling the RFmxNR Commit  method.

         </summary>
         <param name="selectorString">
            Specifies the result name.  The result name can either be specified through this input or the <em>resultName</em> parameter.  If you do not specify the result name in this parameter, either the result name specified by the <em>resultName</em>  parameter  or the default result instance is used.
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method  to build the <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a>.<br />
         </param>
         <param name="resultName">
            Specifies the name to be associated with measurement results. Provide a unique name, such as "r1" to enable fetching of multiple measurement results and traces. This input accepts the result name with or without the "result::" prefix.
            Example:<br /><span class="monospace">"result::r1"</span><br /><span class="monospace">"r1"</span><br />
         </param>
         <param name="iq">
            Specifies the data for a complex waveform including the start, delta, and actual values.<br />
         </param>
         <param name="reset">
            Resets measurement averaging. If you enable averaging, set this parameter to TRUE for first record and FALSE for subsequent records.
            <br />
         </param>
         <param name="reserved">Reserved.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.AnalyzeSpectrum1Waveform(System.String,System.String,NationalInstruments.Spectrum{System.Single},System.Boolean,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzeSpectrum1Waveform" nihasget="0" nihasset="0" niparameters="selectorString,resultName,spectrum,reset,reserved" niparametertypes="System.String,System.String,NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],System.Boolean,System.Int64" nireturnvaluetype="System.Int32">

         <summary>
            Performs the enabled measurements on the I/Q complex waveform that you specify in <em>spectrum</em> parameter. Call this method after you configure the signal and measurement methods. You can fetch measurement results using the Fetch methods or result methods in the method node.
            Use this method only if the Recommended Acquisition Type method value is either <em>spectral</em> or <em>IQorSpectral</em>.<br />
            When using the Analysis-Only mode in RFmxNR, the RFmx driver ignores the RFmx hardware settings such as reference level and attenuation. The only RF hardware settings that are not ignored are the center frequency and trigger type, since it is needed for spectral measurement traces as well as some measurements such as ModAcc, ACP, and SEM.<br />
            Query the Recommended Acquisition Type method from the RFmxInstr Property Node after calling the RFmxNR Commit  method.

         </summary>
         <param name="selectorString">
            Specifies the result name.  The result name can either be specified through this input or the <em>resultName</em> parameter.  If you do not specify the result name in this parameter, either the result name specified by the <em>resultName</em>  parameter  or the default result instance is used.
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method  to build the <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a>.<br />
         </param>
         <param name="resultName">
            Specifies the name to be associated with measurement results. Provide a unique name, such as "r1" to enable fetching of multiple measurement results and traces. This input accepts the result name with or without the "result::" prefix.
            Example:<br /><span class="monospace">"result::r1"</span><br /><span class="monospace">"r1"</span><br />
         </param>
         <param name="spectrum">
            Specifies the data for a spectrum waveform.<br />
         </param>
         <param name="reset">
            Resets measurement averaging. If you enable averaging, set this parameter to TRUE for first record and FALSE for subsequent records.
            <br />
         </param>
         <param name="reserved">Reserved.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.AutoLevel(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AutoLevel" nihasget="0" nihasset="0" niparameters="selectorString,measurementInterval,referenceLevel" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Examines the input signal to calculate the peak power level and sets it as the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method. Use this method to calculate an approximate setting for the reference level. <br />
            The RFmxNR Auto Level method completes the following tasks:<br /><ol>
               <li>
                  Resets the mixer level, mixer level offset, and IF output power offset. <br />
               </li>
               <li>
                  Sets the starting reference level to the maximum reference level supported by the device based on the current RF attenuation, mechanical attenuation, and preamplifier enabled settings.<br />
               </li>
               <li>
                  Iterates to adjust the reference level based on the input signal peak power. <br />
               </li>
               <li>
                  Uses immediate triggering and restores the trigger settings back to user setting after the execution.<br />
               </li>
            </ol>
            When using NI-PXIe 5663, NI-PXIe 5665, or NI-PXIe 5668R device, NI recommends that you set an appropriate value for mechanical attenuation before calling the RFmxNR Auto Level method. Setting an appropriate value for mechanical attenuation reduces the number of times the attenuator settings are changed by this method; thus reducing wear and tear, and maximizing the life time of the attenuator. <br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="measurementInterval">
            Specifies the acquisition length. This value is expressed in seconds. Use this value to compute the number of samples to acquire from the signal analyzer.
            Auto Level method does not use any trigger for acquisition. It ignores the user-configured trigger methods. NI recommends that you set a sufficiently high measurement interval to ensure that the acquired waveform is at least as long as one period of the signal.<br />
         </param>
         <param name="referenceLevel">
            Upon return, contains the estimated peak power level of the input signal. This value is expressed in dBm. The default value of this parameter is hardware dependent.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.CheckMeasurementStatus(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CheckMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,isDone" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Checks the status of the measurement. Use this method to check for any errors that may occur during measurement or to check whether the measurement is complete and results are available.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="isDone">
            <see langword="True" /> if the measurement is complete; otherwise <see langword="False" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ClearNamedResult(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ClearNamedResult" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Clears a result instance specified by the result name in the <em>selectorString</em> parameter.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ClearAllNamedResults(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ClearAllNamedResults" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Clears all results for the current signal instance.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.Commit(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Commit" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Commits settings to the hardware. Calling this method is optional. RFmxNR commits settings to the hardware when you call the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.Initiate(System.String,System.String)" crefType="FullyQualified" /> method. <br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.DisableTrigger(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DisableTrigger" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Configures the device to not wait for a trigger to mark a reference point within a record. This method defines the signal triggering as immediate.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.Initiate(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Initiate" nihasget="0" nihasset="0" niparameters="selectorString,resultName" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Initiates all enabled measurements. Call this method after configuring the signal and measurement. This method asynchronously launches measurements in the background and immediately returns to the caller program. You can fetch measurement results using the Fetch methods or result methods in the method node. To get the status of measurements, use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.WaitForMeasurementComplete(System.String,System.Double)" crefType="FullyQualified" /> method or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.CheckMeasurementStatus(System.String,System.Boolean@)" crefType="FullyQualified" /> method.<br />
         </summary>
         <param name="selectorString">
            Specifies the result name.  The result name can either be specified through this input or the <em>resultName</em> parameter.  If you do not specify the result name in this parameter, either the result name specified by the <em>resultName</em>  parameter  or the default result instance is used.
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method  to build the <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a>.<br />
         </param>
         <param name="resultName">
            Specifies the name to be associated with measurement results. Provide a unique name, such as "r1" to enable fetching of multiple measurement results and traces. This input accepts the result name with or without the "result::" prefix.
            Example:<br /><span class="monospace">"result::r1"</span><br /><span class="monospace">"r1"</span><br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ResetToDefault(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ResetToDefault" nihasget="0" nihasset="0" niparameters="selectorString" niparametertypes="System.String" nireturnvaluetype="System.Int32">

         <summary>
            Resets a signal to the default values.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SelectMeasurements(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SelectMeasurements" nihasget="0" nihasset="0" niparameters="selectorString,measurement,enableAllTraces" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Specifies the measurements that you want to enable.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used. </param>
         <param name="measurement">Specifies the measurement to perform.</param>
         <param name="enableAllTraces">
            <see langword="True" /> to enable all traces for the selected measurement; otherwise <see langword="False" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.WaitForMeasurementComplete(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="WaitForMeasurementComplete" nihasget="0" nihasset="0" niparameters="selectorString,timeout" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Waits for the specified number for seconds for all the measurements to complete.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">
            Specifies the timeout for which the method waits for the measurement to complete. This value is expressed in seconds. A value of -1 specifies that the method waits until the measurement is complete. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureDigitalEdgeTrigger(System.String,System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge,System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="selectorString,digitalEdgeTriggerSource,digitalEdgeTriggerEdge,triggerDelay,enableTrigger" niparametertypes="System.String,System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge,System.Double,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Configures the device to wait for a digital edge trigger and then marks a reference point within the record.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="digitalEdgeTriggerSource">
            Specifies the source terminal for the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants" />.
         </param>
         <param name="digitalEdgeTriggerEdge">Specifies the trigger edge to detect.</param>
         <param name="triggerDelay">
            Specifies the trigger delay time. This value is expressed in seconds.
         </param>
         <param name="enableTrigger">
            Specifies whether to enable the trigger.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureIQPowerEdgeTrigger(System.String,System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope,System.Double,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureIQPowerEdgeTrigger" nihasget="0" nihasset="0" niparameters="selectorString,iqPowerEdgeTriggerSource,iqPowerEdgeTriggerSlope,iqPowerEdgeTriggerLevel,triggerDelay,minimumQuietTimeMode,minimumQuietTimeDuration,iqPowerEdgeTriggerLevelType,enableTrigger" niparametertypes="System.String,System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope,System.Double,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Configures the device to wait for the complex power of the I/Q data to cross the specified threshold to mark a reference point within the record.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="iqPowerEdgeTriggerSource">Specifies the channel from which the device monitors the trigger.</param>
         <param name="iqPowerEdgeTriggerSlope">Specifies whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify.</param>
         <param name="iqPowerEdgeTriggerLevel">
            Specifies the power level at which the device triggers, depending on the value of the iqPowerEdgeTriggerSlope
            parameter. The value is expressed in dB when the iqPowerEdgeTriggerLevelType
            parameter is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" />, or in dBm when it is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" />.
         </param>
         <param name="triggerDelay">
            Specifies the trigger delay time. This value is expressed in seconds.
         </param>
         <param name="minimumQuietTimeMode">
            Specifies whether the measurement computes the minimum quiet time used for triggering.
         </param>
         <param name="minimumQuietTimeDuration">
            Specifies the duration for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. This value is expressed in seconds. If you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="PartiallyQualified" /> to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet when it is below the trigger level.
         </param>
         <param name="iqPowerEdgeTriggerLevelType">
            Specifies whether the IQPowerEdgeLevel is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" /> or <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />. The value is expressed in dB when this parameter is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />. The value is expressed in dBm when this parameter is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />.
         </param>
         <param name="enableTrigger">
            Specifies whether the trigger is used.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ConfigureSoftwareEdgeTrigger(System.String,System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSoftwareEdgeTrigger" nihasget="0" nihasset="0" niparameters="selectorString,triggerDelay,enableTrigger" niparametertypes="System.String,System.Double,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Configures the device to wait for a software trigger and then marks a reference point within the record.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="triggerDelay">Specifies the trigger delay time. This value is expressed in seconds. If the delay is negative, the measurement acquires pretrigger samples. If the delay is positive, the measurement acquires post-trigger samples.</param>
         <param name="enableTrigger">Specifies whether to enable the trigger.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.ResetAttribute(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ResetAttribute" nihasget="0" nihasset="0" niparameters="selectorString,attributeId" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId" nireturnvaluetype="System.Int32">

         <summary>
            Resets the attribute to its default value.
         </summary>
         <param name="selectorString">Specifies the selector string for the property being reset. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.</param>
         <param name="attributeId">Specifies an attribute identifier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAttributeDouble(System.String,System.Int32,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeDouble" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of a Double attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Passes the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAttributeInt(System.String,System.Int32,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeInt" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of an RFmx 32-bit integer (int32) attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAttributeString(System.String,System.Int32,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeString" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of a of an RFmx string.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAttributeBool(System.String,System.Int32,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeBool" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of a Bool attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.GetAttributeSbyte(System.String,System.Int32,System.SByte@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAttributeSbyte" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,out System.SByte" nireturnvaluetype="System.Int32">
         <summary>
            Gets the value of a Sbyte attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being read. Refer to the Using a Selector String (.NET) topic in the RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Upon return, contains a value of the specified attribute ID.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAttributeDouble(System.String,System.Int32,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeDouble" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Double attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAttributeInt(System.String,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeInt" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Int attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAttributeString(System.String,System.Int32,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeString" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a String attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAttributeBool(System.String,System.Int32,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeBool" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of a Bool attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the NI-RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAttributeSbyte(System.String,System.Int32,System.SByte)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAttributeSbyte" nihasget="0" nihasset="0" niparameters="selectorString,attributeIdentifier,value" niparametertypes="System.String,System.Int32,System.SByte" nireturnvaluetype="System.Int32">
         <summary>
            Sets the value of a Sbyte attribute.
         </summary>
         <param name="selectorString">
            Specifies the selector string for the attribute being set. Refer to the Using a Selector String (.NET) topic in the RFmx NR Help for more information about configuring the selector string.
         </param>
         <param name="attributeIdentifier">Specifies the ID of an attribute.</param>
         <param name="value">Specifies the value to which you want to set the attribute. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildResultString" nihasget="0" nihasset="0" niparameters="resultName" niparametertypes="System.String" nireturnvaluetype="System.String">

         <summary>
            Creates selector string for use with configuration or fetch.
         </summary>
         <param name="resultName">Specifies the result name for building the selector string. This input accepts the result name with or without the "result::" prefix. Example: "", "result::r1", "r1".</param>
         <returns>Upon return, contains the selector string created by this method.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildSubblockString" nihasget="0" nihasset="0" niparameters="selectorString,subblockNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the subblock string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="subblockNumber">
            Specifies the number of subblocks that are configured in the non-contiguous carrier aggregation. Set this parameter to 1, which is the default, for single carrier and intra-band contiguous carrier aggregation.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BuildCarrierString" nihasget="0" nihasset="0" niparameters="selectorString,carrierNumber" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.String">

         <summary>
            Creates the carrier string.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="carrierNumber">
            Specifies the carrier number for building the selector string.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.SignalConfigurationName" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SignalConfigurationName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">

         <summary>
            Gets the signal configuration name.
         </summary>
         <value>Returns a string representing the signal configuration name</value>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.SignalConfigurationType" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SignalConfigurationType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Type">

         <summary>
            Gets the <see cref="T:System.Type"></see> object for RFmxNRMX.
         </summary>
         <value>Returns the type of signal configuration object.</value>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.ModAcc" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAcc" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXModAcc">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAcc" crefType="PartiallyQualified" /> instance that represents the ModAcc measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.Sem" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Sem" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXSem">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSem" crefType="PartiallyQualified" /> instance that represents the SEM measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.Acp" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Acp" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXAcp">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcp" crefType="PartiallyQualified" /> instance that represents the ACP measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.Chp" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Chp" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXChp">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChp" crefType="PartiallyQualified" /> instance that represents the CHP measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.Obw" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Obw" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXObw">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObw" crefType="PartiallyQualified" /> instance that represents the OBW measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.Pvt" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pvt" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXPvt">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvt" crefType="PartiallyQualified" /> instance that represents the PVT measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier" crefType="PartiallyQualified" /> instance.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMX.IsDisposed" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="IsDisposed" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">

         <summary>
            Gets a value that indicates whether the signal has been disposed.
         </summary>
         <value>
            <see langword="true" /> if the session is disposed; otherwise,  <see langword="false" />.
         </value>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcp" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents the ACP measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXAcp.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the ACP measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXAcp.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the ACP measurement results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable averaging for the ACP measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed on a single acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The ACP measurement uses the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions over which the ACP measurement is averaged.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for ACP measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations, but not the noise floor. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is averaged in a logarithmic scale.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The square root of the power spectrum is averaged.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The lowest power in the spectrum at each frequency bin is retained from one acquisition to the next. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpComponentCarrierConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the ACP Component Carrier measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierConfiguration.GetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of the component carrier (CC). This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of the component carrier (CC). This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 9 MHz.
         </remarks>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpComponentCarrierResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Provides methods to fetch and read the ACP Component Carrier results.</summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults.GetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsComponentCarrierAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults.GetRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the component carrier power relative to its subblock power. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the component carrier power relative to its subblock power. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsComponentCarrierRelativePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults.FetchMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,relativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of the absolute and relative powers measured in the component carriers.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="absolutePower">
            Upon return, contains an array of the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="relativePower">
            Upon return, contains an array of the component carrier power relative to its subblock power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,relativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the absolute and relative powers measured in the component carriers.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="absolutePower">
            Upon return, contains the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="relativePower">
            Upon return, contains the component carrier power relative to its subblock power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the ACP measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetSubblockIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of a subblock. This value is expressed in Hz. Integration bandwidth is the span from the left edge of the leftmost carrier to the right edge of the rightmost carrier within the subblock.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of a subblock. This value is expressed in Hz. Integration bandwidth is the span from the left edge of the leftmost carrier to the right edge of the rightmost carrier within the subblock.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSubblockIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNumberOfUtraOffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfUtraOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of universal terrestrial radio access (UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement in frequency range 2, and for downlink ACP measurement, the ACP Num UTRA Offsets has to be 0.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of universal terrestrial radio access (UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement in frequency range 2, and for downlink ACP measurement, the ACP Num UTRA Offsets has to be 0.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfUtraOffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNumberOfUtraOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfUtraOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of universal terrestrial radio access (UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement in frequency range 2, and for downlink ACP measurement, the ACP Num UTRA Offsets has to be 0.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of universal terrestrial radio access (UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement in frequency range 2, and for downlink ACP measurement, the ACP Num UTRA Offsets has to be 0.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfUtraOffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNumberOfEutraOffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfEutraOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of evolved universal terrestrial radio access (E-UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement, and for downlink ACP measurement in frequency range 2, this method has to be 0.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of evolved universal terrestrial radio access (E-UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement, and for downlink ACP measurement in frequency range 2, this method has to be 0.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfEutraOffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNumberOfEutraOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfEutraOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of evolved universal terrestrial radio access (E-UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement, and for downlink ACP measurement in frequency range 2, this method has to be 0.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of evolved universal terrestrial radio access (E-UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement, and for downlink ACP measurement in frequency range 2, this method has to be 0.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfEutraOffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNumberOfNROffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfNROffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of NR adjacent channel offsets to be configured at offset positions.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of NR adjacent channel offsets to be configured at offset positions.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfNROffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNumberOfNROffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfNROffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of NR adjacent channel offsets to be configured at offset positions.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of NR adjacent channel offsets to be configured at offset positions.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfNROffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNumberOfEndcOffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfEndcOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of ENDC adjacent channel offsets to be configured at offset positions.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of ENDC adjacent channel offsets to be configured at offset positions. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfEndcOffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNumberOfEndcOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfEndcOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of ENDC adjacent channel offsets to be configured at offset positions.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of ENDC adjacent channel offsets to be configured at offset positions. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfEndcOffsets" crefType="PartiallyQualified" /> attribute.The default value is dependent on 3GPP specification.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetOffsetChannelSpacingAdjustment(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetChannelSpacingAdjustment" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the additional spacing of ACP offset channels at nominal spacing.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the additional spacing of ACP offset channels at nominal spacing. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetChannelSpacingAdjustment" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetOffsetChannelSpacingAdjustment(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetChannelSpacingAdjustment" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the additional spacing of ACP offset channels at nominal spacing.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the additional spacing of ACP offset channels at nominal spacing. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetChannelSpacingAdjustment" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetOffsetFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the offset frequency of an offset channel. This value is expressed in Hz. The offset frequency is computed from the center of a reference component carrier/subblock to the center of the nearest RBW filter of the offset channel.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the offset frequency of an offset channel. This value is expressed in Hz. The offset frequency is computed from the center of a reference component carrier/subblock to the center of the nearest RBW filter of the offset channel.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetFrequency" crefType="PartiallyQualified" /> attribute.The default value is 10 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetOffsetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of an offset channel. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of an offset channel. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 9 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement computes the RBW.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement computes the RBW.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement computes the RBW.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement computes the RBW.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the shape of the RBW filter.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the shape of the RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType.FftBased" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the shape of the RBW filter.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the shape of the RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType.FftBased" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement sets the sweep time.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement sets the sweep time.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod" nireturnvaluetype="System.Int32">

         <summary>
            Gets the method for performing the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the method for performing the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod" nireturnvaluetype="System.Int32">

         <summary>
            Sets the method for performing the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the method for performing the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx automatically computes the averaging count used for instrument noise calibration.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether RFmx automatically computes the averaging count used for instrument noise calibration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationAveragingAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx automatically computes the averaging count used for instrument noise calibration.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether RFmx automatically computes the averaging count used for instrument noise calibration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationAveragingAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNoiseCalibrationAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCalibrationAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 32.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCalibrationAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 32.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx compensates for the instrument noise when performing the measurement when you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or when you set ACP Noise Cal Mode to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" /> Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether RFmx compensates for the instrument noise when performing the measurement when you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or when you set ACP Noise Cal Mode to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" /> Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx compensates for the instrument noise when performing the measurement when you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or when you set ACP Noise Cal Mode to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" /> Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether RFmx compensates for the instrument noise when performing the measurement when you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or when you set ACP Noise Cal Mode to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" /> Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNoiseCompensationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCompensationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCompensationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType.AnalyzerAndTermination" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCompensationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCompensationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCompensationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType.AnalyzerAndTermination" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable averaging for the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable averaging for the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable averaging for the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable averaging for the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingType" crefType="PartiallyQualified" /> attribute.Default value is RMS<see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingType" crefType="PartiallyQualified" /> attribute.Default value is RMS<see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement calibrates the noise floor of analyzer or performs the ACP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement calibrates the noise floor of analyzer or performs the ACP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement calibrates the noise floor of analyzer or performs the ACP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement calibrates the noise floor of analyzer or performs the ACP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetFftOverlapMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftOverlapMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets the overlap mode when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to Sequential FFT.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the overlap mode when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to Sequential FFT.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftOverlapMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetFftOverlapMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftOverlapMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets the overlap mode when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to Sequential FFT.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the overlap mode when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to Sequential FFT.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftOverlapMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode.Disabled" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetFftOverlap(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftOverlap" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of samples to overlap between consecutive chunks while performing FFT.      This value is expressed as a percentage of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" crefType="FullyQualified" /> method when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of samples to overlap between consecutive chunks while performing FFT.      This value is expressed as a percentage of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" crefType="FullyQualified" /> method when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftOverlap" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement computes an appropriate IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the measurement computes an appropriate IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpIFOutputPowerOffsetAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement computes an appropriate IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the measurement computes an appropriate IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpIFOutputPowerOffsetAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNearIFOutputPowerOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the offset that is needed to adjust the IF output power levels for the offset channels that are near the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the offset that is needed to adjust the IF output power levels for the offset channels that are near the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNearIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNearIFOutputPowerOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the offset that is needed to adjust the IF output power levels for the offset channels that are near the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the offset that is needed to adjust the IF output power levels for the offset channels that are near the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNearIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetFarIFOutputPowerOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the offset that is needed to adjust the IF output power levels for the offset channels that are far from the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the offset that is needed to adjust the IF output power levels for the offset channels that are far from the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFarIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 20.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetFarIFOutputPowerOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the offset that is needed to adjust the IF output power levels for the offset channels that are far from the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the offset that is needed to adjust the IF output power levels for the offset channels that are far from the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFarIFOutputPowerOffset" crefType="PartiallyQualified" /> attribute.The default value is 20.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetSequentialFftSize(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSequentialFftSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of bins to be used for FFT computation, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of bins to be used for FFT computation, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSequentialFftSize" crefType="PartiallyQualified" /> attribute.The default value is 512.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSequentialFftSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of bins to be used for FFT computation, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of bins to be used for FFT computation, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSequentialFftSize" crefType="PartiallyQualified" /> attribute.The default value is 512.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the traces to be stored and retrieved after performing the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the traces to be stored and retrieved after performing the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum number of threads used for parallelism for the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the maximum number of threads used for parallelism for the ACP measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum number of threads used for parallelism for the ACP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the maximum number of threads used for parallelism for the ACP measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureNumberOfUtraOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfUtraOffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfUtraOffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Configures the number of UTRA adjacent channels of the subblock.<br />
            Use "subblock(n)" as the selector string to configure this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="numberOfUtraOffsets">Specifies the number of UTRA adjacent channel offsets to be configured at offset positions. For uplink ACP measurement in frequency range 2, and for downlink ACP measurement, this parameter has to be 0.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureNumberOfEutraOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfEutraOffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfEutraOffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Configures the number of E-UTRA adjacent channels of the subblock.<br />
            Use "subblock(n)" as the selector string to configure this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="numberOfEutraOffsets">Specifies the number of E-UTRA adjacent channel offsets to be configured at offset positions. For downlink ACP measurement in frequency range 2, and for uplink ACP measurement, this parameter has to be 0.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureNumberOfNROffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfNROffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfNROffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Configures the number of NR adjacent channels of the subblock.<br />
            Use "subblock(n)" as the selector string to configure this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="numberOfNROffsets">Specifies the number of NR adjacent channel offsets to be configured at offset positions.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureNumberOfEndcOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfEndcOffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfEndcOffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Configures the number of ENDC adjacent channels of the subblock.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   The default is <span class="monospace">"subblock0"</span>.<br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="numberOfEndcOffsets">Specifies the number of ENDC adjacent channel offsets to be configured at offset positions.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,measurementMethod" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod" nireturnvaluetype="System.Int32">

         <summary>
            Configures the method for performing the ACP measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="measurementMethod">Specifies the method for performing the ACP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,noiseCompensationEnabled" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Configures compensation of the channel powers for the inherent noise floor of the signal analyzer.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="noiseCompensationEnabled">Specifies whether to enable compensation of the channel powers for the inherent noise floor of the signal analyzer.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Configures the resolution bandwidth (RBW) filter.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="rbwAuto">Specifies whether the measurement computes the RBW.</param>
         <param name="rbw">
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <em>rbwAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <param name="rbwFilterType">Specifies the shape of the RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the sweep time.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="sweepTimeAuto">Specifies whether the measurement sets the sweep time.</param>
         <param name="sweepTimeInterval">
            Specifies the sweep time when you set the <em>sweepTimeAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Configures averaging for the ACP measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
         <param name="averagingCount">
            Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ValidateNoiseCalibrationData(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationDataValid@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ValidateNoiseCalibrationData" nihasget="0" nihasset="0" niparameters="selectorString,noiseCalibrationDataValid" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationDataValid" nireturnvaluetype="System.Int32">

         <summary>
            Indicates whether the ACP noise calibration data is valid for the configuration specified by the signal name in the <em>selectorString</em> parameter.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="noiseCalibrationDataValid">
            Upon return, contains whether the calibration data is valid.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierConfiguration" crefType="PartiallyQualified" /> instance.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpFftOverlapMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the overlap mode when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to Sequential FFT.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that no overlapping is applied to the acquired samples.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftOverlapMode.Automatic" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Automatic" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Indicates that RFmx chooses optimal values of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.GetFftOverlap(System.String,System.Double@)" crefType="FullyQualified" />(%) method based on the measurement configuration.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the FFT window type to be used to reduce spectral leakage.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using flat top window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hanning window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hamming window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Gaussian window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman-Harris window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Kaiser-Bessel window type.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement computes an appropriate IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement sets the IF output power level offset using the values of the ACP Near IF Output Pwr Offset (dB) and ACP Far IF Output Pwr Offset (dB) properties.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement automatically computes an IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the method for performing the ACP measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The ACP measurement acquires the spectrum using the same signal analyzer setting across frequency bands. Use this method when measurement speed is desirable over higher dynamic range. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DynamicRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The ACP measurement acquires the spectrum using the hardware-specific optimizations for different frequency bands. Use this method to get the best dynamic range. Supported Devices: PXIe 5665/5668R</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SequentialFft" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The ACP measurement acquires all the samples specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="FullyQualified" /> method and divides them in to smaller chunks of equal size defined by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" crefType="FullyQualified" /> method.
            FFT is computed for each chunk. The resultant FFTs are averaged to get the spectrum used to compute the ACP.
            If the total acquired samples is not an integer multiple of the FFT size, the remaining samples at the end of the acquisition are not used.
            Use this method to optimize for speed. The accuracy of results may be reduced when using this measurement method.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpMeasurementMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement calibrates the noise floor of analyzer or performs the ACP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Measure" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Performs the ACP measurement on the acquired signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.CalibrateNoiseFloor" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CalibrateNoiseFloor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Performs manual noise calibration of the signal analyzer for the ACP measurement.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx automatically computes the averaging count used for instrument noise calibration.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            RFmx uses the averaging count that you set for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.Normal" crefType="PartiallyQualified" />, RFmx uses a noise calibration averaging count of 32. When you set the ACP Meas Method method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the sweep time is less than 5 ms, RFmx uses a noise calibration averaging count of 15. When you set the ACP Meas Method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" /> and the sweep time is greater than or equal to 5 ms, RFmx uses a noise calibration averaging count of 5.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationDataValid" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpNoiseCalibrationDataValid" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
          Indicates whether calibration data is valid for the configuration specified by the signal name in the <em>selectorstring</em> parameter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationDataValid.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns false if the calibration data is not present for the specified configuration or if the difference between the current device temperature and the calibration temperature exceeds the [-5 °C, 5 °C] range.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationDataValid.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns true if the calibration data is present for the configuration specified by the signal name in the Selector string parameter.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to Noise Calibrate, you can initiate instrument noise calibration for ACP manually. When you set the ACP Meas Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" />, you can initiate the ACP measurement manually.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled.True" crefType="PartiallyQualified" />, RFmx sets Input Isolation Enabled method to Enabled and calibrates the instrument noise in the current state of the instrument. Next, RFmx resets the Input Isolation Enabled method and performs the ACP measurement, including compensation for the noise contribution of the instrument. RFmx skips noise calibration in this mode if valid noise calibration data is already cached.When you set the ACP Noise Comp Enabled method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled.False" crefType="PartiallyQualified" />, RFmx does not calibrate instrument noise and performs the ACP measurement without compensating for the noise contribution of the instrument.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx compensates for the instrument noise when performing the measurement when you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or when you set ACP Noise Cal Mode to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" /> Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Disables noise compensation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables noise compensation.Supported Devices: PXIe-5663/5665/5668R, PXIe-5830/5831</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpNoiseCompensationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType.AnalyzerAndTermination" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzerAndTermination" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Compensates for noise from the analyzer and the 50-ohm termination. The measured power values are in excess of the thermal noise floor.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCompensationType.AnalyzerOnly" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzerOnly" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Compensates only for analyzer noise only.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement computes the RBW.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement computes the RBW.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the shape of the RBW filter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No RBW filtering is performed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An RBW filter with a Gaussian response is applied.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An RBW filter with a flat response is applied.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to fetch and read the ACP measurement results.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.GetTotalAggregatedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsTotalAggregatedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.GetSubblockPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsSubblockPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.GetLowerOffsetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the lower (negative) offset channel power.  This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the lower (negative) offset channel power.  This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsLowerOffsetAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.GetLowerOffsetRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power in lower (negative) offset channel relative to the total aggregated power. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power in lower (negative) offset channel relative to the total aggregated power. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsLowerOffsetRelativePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.GetUpperOffsetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the upper (positive) offset channel power. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the upper (positive) offset channel power. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsUpperOffsetAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.GetUpperOffsetRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power in the upper (positive) offset channel relative to the total aggregated power. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power in the upper (positive) offset channel relative to the total aggregated power. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsUpperOffsetRelativePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchOffsetMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchOffsetMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,lowerRelativePower,upperRelativePower,lowerAbsolutePower,upperAbsolutePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of the absolute and relative power of the lower and upper offset channel. The relative power is relative to subblock power.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="lowerRelativePower">
            Upon return, contains an array of the power in lower (negative) offset channel relative to the total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="upperRelativePower">
            Upon return, contains an array of the power in the upper (positive) offset channel relative to the total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="lowerAbsolutePower">
            Upon return, contains an array of the lower offset channel power. This value is expressed in dBm.
            <br />
         </param>
         <param name="upperAbsolutePower">
            Upon return, contains an array of the upper offset channel power. This value is expressed in dBm.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the spectrum used for ACP measurements.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="spectrum">
            Upon return, contains the spectrum.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchAbsolutePowersTrace(System.String,System.Double,System.Int32,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="12/18/2018 1:46:11 PM" niupdatedby="Sebastius" nidisplayname="FetchAbsolutePowersTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,traceIndex,absolutePowersTrace" niparametertypes="System.String,System.Double,System.Int32,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">
         <summary>
            Fetches the absolute powers trace.<br/>
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used.<br/>
            Example:<br/>
            <span class="monospace">""</span>
            <br/>
            <span class="monospace">"result::r1"</span>
            <br/>
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified"/> method to build the selector string.<br/>
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="traceIndex">
            Specifies the index of the trace to fetch. The traceIndex can range from 0 to (Number of carriers + 2*Number of offsets).
            <br/>
         </param>
         <param name="absolutePowersTrace">
            Upon return, contains the trace of the measured integrated power in the channel specified by the traceIndex parameter. This value is expressed in dBm.

            <br/>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchRelativePowersTrace(System.String,System.Double,System.Int32,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="12/18/2018 1:46:11 PM" niupdatedby="Sebastius" nidisplayname="FetchRelativePowersTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,traceIndex,relativePowersTrace" niparametertypes="System.String,System.Double,System.Int32,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">
         <summary>
            Fetches the relative powers trace.<br/>
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used.<br/>
            Example:<br/>
            <span class="monospace">""</span>
            <br/>
            <span class="monospace">"result::r1"</span>
            <br/>
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified"/> method to build the selector string.<br/>
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="traceIndex">
            Specifies the index of the trace to fetch. The traceIndex can range from 0 to (Number of carriers + 2*Number of offsets).
            <br/>
         </param>
         <param name="relativePowersTrace">
            Upon return, contains the trace of relative powers measured relative to total aggregated power in the channel specified by the traceIndex parameter. This value is expressed in dB.

            <br/>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchTotalAggregatedPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAggregatedPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the sum of powers in all the subblocks.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAggregatedPower">
            Upon return, contains the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchSubblockPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSubblockPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,subblockPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the power of subblock.<br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="subblockPower">
            Upon return, contains the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This includes the power in inter-carrier gaps within a subblock. This value is expressed in dBm.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.FetchOffsetMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchOffsetMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,lowerRelativePower,upperRelativePower,lowerAbsolutePower,upperAbsolutePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the absolute and relative power of the lower and upper offset channel. The relative power is relative to subblock power.<br />
            Use "offset(k)" or "subblock(n)" or "subblock(n)/offset(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, and offset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br /><span class="monospace">"result::r1/subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="lowerRelativePower">
            Upon return, contains the power in lower (negative) offset channel relative to the total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="upperRelativePower">
            Upon return, contains the power in the upper (positive) offset channel relative to the total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="lowerAbsolutePower">
            Upon return, contains the lower offset channel power. This value is expressed in dBm.
            <br />
         </param>
         <param name="upperAbsolutePower">
            Upon return, contains the upper offset channel power. This value is expressed in dBm.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpResults.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpComponentCarrierResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the ACP Component Carrier results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement sets the sweep time.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses a sweep time of 1 ms.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAcquisitionBandwidthOptimizationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx optimizes the acquisition bandwidth. This may cause acquisition center frequency or local oscillator (LO) to be placed at different position than you configured.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>RFmx does not optimize acquisition bandwidth and will be based on the Nyquist criterion. The value of the acquisition center frequency is the same as the value of the Center Frequency that you configure.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>RFmx positions the acquisition center frequency to acquire the least bandwidth based on the configuration and span needed for the measurement. This helps in reducing the amount of data to process for the measurement, thus improving the speed. However this might cause the LO to be positioned at a non-dc subcarrier position, hence the measurement sensitive to it should have this method disabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAutoIncrementCellIDEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the cell ID of component carrier is auto calculated and configured by the measurement or configured by the user.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses the user-configured cell IDs. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoIncrementCellIDEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The Cell ID of each CC is auto calculated as specified in section 4.9.2.3 of <em>3GPP 38.141</em> specification.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXAutoResourceBlockDetectionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement or configured by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks that you specify are used for the measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXBandwidthPartCyclicPrefixMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the cyclic prefix (CP) duration and the number of symbols in a slot for the signal being measured.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The number of symbols in the slot is 14.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode.Extended" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Extended" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The number of symbols in the slot is 12.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChp" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents the CHP measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXChp.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the CHP measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXChp.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the CHP measurement results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>All frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable averaging for the CHP measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed on a single acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The CHP measurement uses the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions over which the CHP measurement is averaged.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for CHP measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is averaged in a logarithmic scale.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The square root of the power spectrum is averaged.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The lowest power in the spectrum at each frequency bin is retained from one acquisition to the next. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpComponentCarrierConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the CHP Component Carrier measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierConfiguration.GetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of a component carrier (CC). This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of a component carrier (CC). This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 9 MHz.
         </remarks>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpComponentCarrierResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Provides methods to fetch and read the CHP Component Carrier results.</summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults.GetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsComponentCarrierAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults.GetRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the component carrier power relative to its subblock power. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the component carrier power relative to its subblock power. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsComponentCarrierRelativePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults.FetchMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,relativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an arry of the absolute and relative powers measured in the component carriers.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="absolutePower">
            Upon return, contains an array of the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="relativePower">
            Upon return, contains an array of the component carrier power relative to its subblock power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,relativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the absolute and relative powers measured in the component carriers.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="absolutePower">
            Upon return, contains the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="relativePower">
            Upon return, contains the component carrier power relative to its subblock power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the CHP measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the channel power measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the channel power measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the channel power measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the channel power measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement sets the sweep time.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement sets the sweep time.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto)" crefType="FullyQualified" /> method to False. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto)" crefType="FullyQualified" /> method to False. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto)" crefType="FullyQualified" /> method to False. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto)" crefType="FullyQualified" /> method to False. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetIntegrationBandwidthType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIntegrationBandwidthType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth (IBW) type used to measure the power of the acquired signal. Integration bandwidth is the frequency interval over which the power in each frequency bin is added to measure the total power in that interval.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the integration bandwidth (IBW) type used to measure the power of the acquired signal. Integration bandwidth is the frequency interval over which the power in each frequency bin is added to measure the total power in that interval. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpIntegrationBandwidthType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType.SignalBandwidth" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetIntegrationBandwidthType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIntegrationBandwidthType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the integration bandwidth (IBW) type used to measure the power of the acquired signal. Integration bandwidth is the frequency interval over which the power in each frequency bin is added to measure the total power in that interval.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the integration bandwidth (IBW) type used to measure the power of the acquired signal. Integration bandwidth is the frequency interval over which the power in each frequency bin is added to measure the total power in that interval. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpIntegrationBandwidthType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType.SignalBandwidth" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetSubblockIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of the subblock. This value is expressed in Hz. It is the span from left edge of the integration bandwidth of the leftmost carrier to the right edge of the integration bandwidth of the rightmost carrier within a subblock.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of the subblock. This value is expressed in Hz. It is the span from left edge of the integration bandwidth of the leftmost carrier to the right edge of the integration bandwidth of the rightmost carrier within a subblock.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSubblockIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement computes the RBW.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement computes the RBW.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement computes the RBW.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement computes the RBW.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth)" crefType="FullyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth)" crefType="FullyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth)" crefType="FullyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth)" crefType="FullyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the shape of the digital RBW filter.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the shape of the digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType.FftBased" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the shape of the digital RBW filter.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the shape of the digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType.FftBased" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx automatically computes the averaging count used for instrument noise calibration.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether RFmx automatically computes the averaging count used for instrument noise calibration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationAveragingAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx automatically computes the averaging count used for instrument noise calibration.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether RFmx automatically computes the averaging count used for instrument noise calibration.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationAveragingAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetNoiseCalibrationAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCalibrationAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 32.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCalibrationAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 32.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether RFmx compensates for the instrument noise when performing the measurement. To compensate for instrument noise when performing a CHP measurement, set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or set the CHP Noise Cal Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether RFmx compensates for the instrument noise when performing the measurement. To compensate for instrument noise when performing a CHP measurement, set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or set the CHP Noise Cal Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether RFmx compensates for the instrument noise when performing the measurement. To compensate for instrument noise when performing a CHP measurement, set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or set the CHP Noise Cal Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether RFmx compensates for the instrument noise when performing the measurement. To compensate for instrument noise when performing a CHP measurement, set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or set the CHP Noise Cal Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCompensationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetNoiseCompensationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNoiseCompensationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCompensationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType.AnalyzerAndTermination" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCompensationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNoiseCompensationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCompensationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType.AnalyzerAndTermination" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable averaging for the CHP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable averaging for the CHP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable averaging for the CHP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable averaging for the CHP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for CHP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for CHP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for CHP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for CHP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement calibrates the noise floor of analyzer or performs the CHP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement calibrates the noise floor of analyzer or performs the CHP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpMeasurementMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement calibrates the noise floor of analyzer or performs the CHP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement calibrates the noise floor of analyzer or performs the CHP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpMeasurementMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the traces to be stored and retrieved after performing the CHP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the CHP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the traces to be stored and retrieved after performing the CHP measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the CHP measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum number of threads used for parallelism for the CHP measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the maximum number of threads used for parallelism for the CHP measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum number of threads used for parallelism for the CHP measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the maximum number of threads used for parallelism for the CHP measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Configures the resolution bandwidth (RBW) filter.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="rbwAuto">Specifies whether the measurement computes the RBW.</param>
         <param name="rbw">
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <em>rbwAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <param name="rbwFilterType">Specifies the shape of the RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the sweep time.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="sweepTimeAuto">Specifies whether the measurement sets the sweep time.</param>
         <param name="sweepTimeInterval">
            Specifies the sweep time when you set the <em>sweepTimeAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Configures averaging for the CHP measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
         <param name="averagingCount">
            Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.ValidateNoiseCalibrationData(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationDataValid@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ValidateNoiseCalibrationData" nihasget="0" nihasset="0" niparameters="selectorString,noiseCalibrationDataValid" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationDataValid" nireturnvaluetype="System.Int32">

         <summary>
            Indicates whether the CHP noise calibration data is valid for the configuration specified by the signal name in the <em>selectorString</em> parameter.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="noiseCalibrationDataValid">
            Upon return, contains whether the calibration data is valid.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierConfiguration" crefType="PartiallyQualified" /> instance.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the FFT window type to be used to reduce spectral leakage.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using flat top window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hanning window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hamming window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Gaussian window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman-Harris window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Kaiser-Bessel window type.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpIntegrationBandwidthType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the integration bandwidth (IBW) type used to measure the power of the acquired signal. Integration bandwidth is the frequency interval over which the power in each frequency bin is added to measure the total power in that interval.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType.SignalBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SignalBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The IBW excludes the guard bands at the edges of the carrier or subblock.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpIntegrationBandwidthType.ChannelBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChannelBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The IBW includes the guard bands at the edges of the carrier or subblock.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpMeasurementMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement calibrates the noise floor of analyzer or performs the CHP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Measure" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Performs the CHP measurement on the acquired signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.CalibrateNoiseFloor" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CalibrateNoiseFloor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Performs manual noise calibration of the signal analyzer for the CHP measurement.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx automatically computes the averaging count used for instrument noise calibration.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            RFmx uses the averages that you set for <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>RFmx uses a noise calibration averaging count of 32.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationDataValid" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpNoiseCalibrationDataValid" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Indicates whether calibration data is valid for the configuration specified by the signal name in the <em>selectorstring</em> parameter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationDataValid.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns false if the calibration data is not present for the specified configuration or if the difference between the current device temperature and the calibration temperature exceeds the [-5 °C, 5 °C] range.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationDataValid.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns true if the calibration data is present for the configuration specified by the signal name in the Selector string parameter.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            When you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.CalibrateNoiseFloor" crefType="PartiallyQualified" />, you can initiate the instrument noise calibration for CHP manually. When you set the CHP Meas Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />, you can initiate the CHP measurement manually.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCompensationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled.True" crefType="PartiallyQualified" />, RFmx sets the Input Isolation Enabled method to Enabled and calibrates the instrument noise in the current state of the instrument. Next, RFmx resets the Input Isolation Enabled method and performs the CHP measurement including compensation for the noise contribution of the instrument. RFmx skips noise calibration in this mode if valid noise calibration data is already cached. When you set the CHP Noise Comp Enabled to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled.False" crefType="PartiallyQualified" />, RFmx does not calibrate instrument noise and performs the CHP measurement without compensating for the noise contribution of the instrument.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx compensates for the instrument noise when performing the measurement. To compensate for instrument noise when performing a CHP measurement, set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or set the CHP Noise Cal Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that noise compensation is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that noise compensation is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpNoiseCompensationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType.AnalyzerAndTermination" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzerAndTermination" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Compensates for noise contribution of the analyzer instrument and the 50-ohm termination. The measured power values are in excess of the thermal noise floor.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCompensationType.AnalyzerOnly" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AnalyzerOnly" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Compensates only for analyzer noise only.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement computes the RBW.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses the RBW that you specify in the CHP RBW (Hz) method. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement computes the RBW.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the shape of the digital RBW filter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No RBW filtering is performed. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An RBW filter with a Gaussian response is applied.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An RBW filter with a flat response is applied.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to fetch and read the CHP measurement results.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults.GetTotalAggregatedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsTotalAggregatedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults.GetSubblockPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This includes the power in inter-carrier gaps within a subblock. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This includes the power in inter-carrier gaps within a subblock. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsSubblockPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the spectrum used for CHP measurements.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="spectrum">
            Upon return, contains the spectrum.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults.FetchTotalAggregatedPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAggregatedPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the sum of powers in all the subblocks.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAggregatedPower">
            Upon return, contains the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults.FetchSubblockPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSubblockPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,subblockPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the power of subblock.<br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="subblockPower">
            Upon return, contains the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This includes the power in inter-carrier gaps within a subblock. This value is expressed in dBm.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXChpResults.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpComponentCarrierResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the CHP Component Carrier results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXChpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement sets the sweep time.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses the sweep time that you specify in the Sweep Time Interval method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses the sweep time based on the resolution bandwidth.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXComponentCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Represents Component Carrier</summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsnScid(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsnScid" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of PDSCH DMRS nSCID used for reference signal generation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the value of PDSCH DMRS nSCID used for reference signal generation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsnScid" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsConfigurationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the configuration type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the configuration type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsConfigurationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType.Type1" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsConfigurationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the configuration type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the configuration type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsConfigurationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType.Type1" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschMappingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mapping type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the mapping type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschMappingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType.TypeA" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschMappingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the mapping type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the mapping type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschMappingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType.TypeA" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsTypeAPosition(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsTypeAPosition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the position of first DMRS symbol in a slot for Type A configurations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the position of first DMRS symbol in a slot for Type A configurations.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsTypeAPosition" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsTypeAPosition(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsTypeAPosition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the position of first DMRS symbol in a slot for Type A configurations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the position of first DMRS symbol in a slot for Type A configurations.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsTypeAPosition" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsDuration(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the DMRS is single-symbol or double-symbol.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the DMRS is single-symbol or double-symbol.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsDuration" crefType="PartiallyQualified" /> attribute.The default value is  Single-Symbol.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsDuration(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the DMRS is single-symbol or double-symbol.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the DMRS is single-symbol or double-symbol.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsDuration" crefType="PartiallyQualified" /> attribute.The default value is  Single-Symbol.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsAdditionalPositions(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsAdditionalPositions" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of additional sets of consecutive DMRS symbols in a slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of additional sets of consecutive DMRS symbols in a slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsAdditionalPositions" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsAdditionalPositions(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsAdditionalPositions" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of additional sets of consecutive DMRS symbols in a slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of additional sets of consecutive DMRS symbols in a slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsAdditionalPositions" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether PT-RS is present in the transmitted signal.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether PT-RS is present in the transmitted signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether PT-RS is present in the transmitted signal.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether PT-RS is present in the transmitted signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsAntennaPorts(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the DMRS Antenna Ports associated with PTRS transmission.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the DMRS Antenna Ports associated with PTRS transmission.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsAntennaPorts(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the DMRS Antenna Ports associated with PTRS transmission.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the DMRS Antenna Ports associated with PTRS transmission.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated as defined in 3GPP specification or configured by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated as defined in 3GPP specification or configured by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated as defined in 3GPP specification or configured by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated as defined in 3GPP specification or configured by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetEpreRatioPort(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetEpreRatioPort" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the EPRE Ratio Port used to determine the PDSCH PT-RS RE power scaling as defined in the Table 4.1-2 of <em>3GPP TS 38.214</em> specification when you set the PDSCH PTRS Power Mode method to Standard.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the EPRE Ratio Port used to determine the PDSCH PT-RS RE power scaling as defined in the Table 4.1-2 of <em>3GPP TS 38.214</em> specification when you set the PDSCH PTRS Power Mode method to Standard.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.EpreRatioPort" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetEpreRatioPort(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetEpreRatioPort" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the EPRE Ratio Port used to determine the PDSCH PT-RS RE power scaling as defined in the Table 4.1-2 of <em>3GPP TS 38.214</em> specification when you set the PDSCH PTRS Power Mode method to Standard.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the EPRE Ratio Port used to determine the PDSCH PT-RS RE power scaling as defined in the Table 4.1-2 of <em>3GPP TS 38.214</em> specification when you set the PDSCH PTRS Power Mode method to Standard.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.EpreRatioPort" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the factor by which the PDSCH PTRS REs are boosted, compared to PDSCH REs. This value is expressed in dB. The value of this method is taken as an input when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.UserDefined" crefType="PartiallyQualified" />. If you set the PDSCH PTRS Pwr Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />, the value is computed from other parameters.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the factor by which the PDSCH PTRS REs are boosted, compared to PDSCH REs. This value is expressed in dB. The value of this method is taken as an input when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.UserDefined" crefType="PartiallyQualified" />. If you set the PDSCH PTRS Pwr Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />, the value is computed from other parameters.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the factor by which the PDSCH PTRS REs are boosted, compared to PDSCH REs. This value is expressed in dB. The value of this method is taken as an input when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.UserDefined" crefType="PartiallyQualified" />. If you set the PDSCH PTRS Pwr Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />, the value is computed from other parameters.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the factor by which the PDSCH PTRS REs are boosted, compared to PDSCH REs. This value is expressed in dB. The value of this method is taken as an input when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.UserDefined" crefType="PartiallyQualified" />. If you set the PDSCH PTRS Pwr Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />, the value is computed from other parameters.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsTimeDensity(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsTimeDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the density of PTRS in time domain
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the density of PTRS in time domain</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsTimeDensity" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsTimeDensity(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsTimeDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the density of PTRS in time domain
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the density of PTRS in time domain</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsTimeDensity" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsFrequencyDensity(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsFrequencyDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the density of PTRS in frequency domain
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the density of PTRS in frequency domain</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsFrequencyDensity" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsFrequencyDensity(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsFrequencyDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the density of PTRS in frequency domain
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the density of PTRS in frequency domain</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsFrequencyDensity" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPtrsREOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsREOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RE Offset to be used for transmission of PTRS as defined in Table 7.4.1.2.2-1 of <em>3GPP 38.211</em> specification.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the RE Offset to be used for transmission of PTRS as defined in Table 7.4.1.2.2-1 of <em>3GPP 38.211</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsREOffset" crefType="PartiallyQualified" /> attribute.The default value is 00.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsREOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPtrsREOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RE Offset to be used for transmission of PTRS as defined in Table 7.4.1.2.2-1 of <em>3GPP 38.211</em> specification.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the RE Offset to be used for transmission of PTRS as defined in Table 7.4.1.2.2-1 of <em>3GPP 38.211</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsREOffset" crefType="PartiallyQualified" /> attribute.The default value is 00.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschSlotAllocation(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschSlotAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the slot allocation in NR Frame. This defines the indices of the allocated slots.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the slot allocation in NR Frame. This defines the indices of the allocated slots. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschSlotAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to (Maximum number of slots in frame - 1), inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschSlotAllocation(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschSlotAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the slot allocation in NR Frame. This defines the indices of the allocated slots.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the slot allocation in NR Frame. This defines the indices of the allocated slots. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschSlotAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to (Maximum number of slots in frame - 1), inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschSymbolAllocation(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschSymbolAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the symbol allocation of each slot allocation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the symbol allocation of each slot allocation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschSymbolAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to 13, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschSymbolAllocation(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschSymbolAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the symbol allocation of each slot allocation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the symbol allocation of each slot allocation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschSymbolAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to 13, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschPresentInSsbResourceBlock(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPresentInSsbResourceBlock" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the subset of RBs for certain symbols in a slot are occupied by SS/PBCH resources depending on the SS/PBCH block configuration. If this method is enabled, PDSCH RBs are allocated in the remaining symbols of this RB subset. If this method is disabled, any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the subset of RBs for certain symbols in a slot are occupied by SS/PBCH resources depending on the SS/PBCH block configuration. If this method is enabled, PDSCH RBs are allocated in the remaining symbols of this RB subset. If this method is disabled, any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPresentInSsbResourceBlock" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPresentInSsbResourceBlock(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschPresentInSsbResourceBlock" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the subset of RBs for certain symbols in a slot are occupied by SS/PBCH resources depending on the SS/PBCH block configuration. If this method is enabled, PDSCH RBs are allocated in the remaining symbols of this RB subset. If this method is disabled, any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the subset of RBs for certain symbols in a slot are occupied by SS/PBCH resources depending on the SS/PBCH block configuration. If this method is enabled, PDSCH RBs are allocated in the remaining symbols of this RB subset. If this method is disabled, any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPresentInSsbResourceBlock" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfCoresets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfCoresets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of CORSETs present in the bandwidth part.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of CORSETs present in the bandwidth part.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfCoresets" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfCoresets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfCoresets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of CORSETs present in the bandwidth part.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of CORSETs present in the bandwidth part.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfCoresets" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetSymbolOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetSymbolOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the starting symbol number of the CORESET within a slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the starting symbol number of the CORESET within a slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetSymbolOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetSymbolOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetSymbolOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the starting symbol number of the CORESET within a slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the starting symbol number of the CORESET within a slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetSymbolOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetNumberOfSymbols(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetNumberOfSymbols" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of symbols alloted to CORESET in each slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of symbols alloted to CORESET in each slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfSymbols" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetNumberOfSymbols(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetNumberOfSymbols" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of symbols alloted to CORESET in each slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of symbols alloted to CORESET in each slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfSymbols" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetNumberOfResourceBlockClusters(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of RB clusters present in the CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of RB clusters present in the CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfResourceBlockClusters" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetNumberOfResourceBlockClusters(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of RB clusters present in the CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of RB clusters present in the CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfResourceBlockClusters" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetResourceBlockOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the starting resource block of a CORESET cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the starting resource block of a CORESET cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetResourceBlockOffset" crefType="PartiallyQualified" /> attribute.Valid values should be a multiple of 6. The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetResourceBlockOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the starting resource block of a CORESET cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the starting resource block of a CORESET cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetResourceBlockOffset" crefType="PartiallyQualified" /> attribute.Valid values should be a multiple of 6. The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetNumberOfResourceBlocks(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of consecutive resource blocks of CORESET cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of consecutive resource blocks of CORESET cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The value should be a multiple of 6. The default value is -1. If you set this property to the default value, all available resource blocks within the bandwidth part are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetNumberOfResourceBlocks(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of consecutive resource blocks of CORESET cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of consecutive resource blocks of CORESET cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The value should be a multiple of 6. The default value is -1. If you set this property to the default value, all available resource blocks within the bandwidth part are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetPrecodingGranularity(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetPrecodingGranularity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity" nireturnvaluetype="System.Int32">

         <summary>
            Gets the precoding granularity of the CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the precoding granularity of the CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetPrecodingGranularity" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity.SameAsRegBundle" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetPrecodingGranularity(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetPrecodingGranularity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity" nireturnvaluetype="System.Int32">

         <summary>
            Sets the precoding granularity of the CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the precoding granularity of the CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetPrecodingGranularity" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity.SameAsRegBundle" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetCceToRegMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetCceToRegMappingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the CCE-to-REG mapping type of CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the CCE-to-REG mapping type of CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetCceToRegMappingType" crefType="PartiallyQualified" /> attribute.The default value is  Non-Interleaved.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetCceToRegMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetCceToRegMappingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the CCE-to-REG mapping type of CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the CCE-to-REG mapping type of CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetCceToRegMappingType" crefType="PartiallyQualified" /> attribute.The default value is  Non-Interleaved.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetRegBundleSize(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetRegBundleSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RBG bundle size of CORESET for interleaved CCE to REG mapping.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the RBG bundle size of CORESET for interleaved CCE to REG mapping.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetRegBundleSize" crefType="PartiallyQualified" /> attribute.The default value is 6.      For interleaved Mapping Type, the valid values are 2, 3, and 6. For non-interleaved Mapping Type, the valid value is 6.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetRegBundleSize(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetRegBundleSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RBG bundle size of CORESET for interleaved CCE to REG mapping.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the RBG bundle size of CORESET for interleaved CCE to REG mapping.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetRegBundleSize" crefType="PartiallyQualified" /> attribute.The default value is 6.      For interleaved Mapping Type, the valid values are 2, 3, and 6. For non-interleaved Mapping Type, the valid value is 6.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetInterleaverSize(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetInterleaverSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the interleaver size of CORESET for interleaved CCE to REG mapping.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the interleaver size of CORESET for interleaved CCE to REG mapping.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetInterleaverSize" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetInterleaverSize(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetInterleaverSize" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the interleaver size of CORESET for interleaved CCE to REG mapping.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the interleaver size of CORESET for interleaved CCE to REG mapping.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetInterleaverSize" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCoresetShiftIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCoresetShiftIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the shift index of CORESET for interleaved CCE to REG mapping.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the shift index of CORESET for interleaved CCE to REG mapping.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetShiftIndex" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCoresetShiftIndex(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCoresetShiftIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the shift index of CORESET for interleaved CCE to REG mapping.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the shift index of CORESET for interleaved CCE to REG mapping.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetShiftIndex" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfPdcchConfigurations(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfPdcchConfigurations" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of PDCCH Configurations for a CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of PDCCH Configurations for a CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPdcchConfigurations" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfPdcchConfigurations(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfPdcchConfigurations" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of PDCCH Configurations for a CORESET.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of PDCCH Configurations for a CORESET.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPdcchConfigurations" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdcchCceAggregationLevel(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdcchCceAggregationLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the CCE aggregation level of PDCCH.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the CCE aggregation level of PDCCH.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchCceAggregationLevel" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdcchCceAggregationLevel(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdcchCceAggregationLevel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the CCE aggregation level of PDCCH.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the CCE aggregation level of PDCCH.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchCceAggregationLevel" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdcchCceOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdcchCceOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the PDCCH CCE offset.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the PDCCH CCE offset.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchCceOffset" crefType="PartiallyQualified" /> attribute.It is used when the PDCCH Candidate Index is set to -1. The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdcchCceOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdcchCceOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the PDCCH CCE offset.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the PDCCH CCE offset.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchCceOffset" crefType="PartiallyQualified" /> attribute.It is used when the PDCCH Candidate Index is set to -1. The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdcchSlotAllocation(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdcchSlotAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the slot allocation in NR frame. This defines the indices of the allocated slots.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the slot allocation in NR frame. This defines the indices of the allocated slots.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchSlotAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-last. Valid values are between 0 and (Maximum Slots in Frame - 1).
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdcchSlotAllocation(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdcchSlotAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the slot allocation in NR frame. This defines the indices of the allocated slots.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the slot allocation in NR frame. This defines the indices of the allocated slots.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchSlotAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-last. Valid values are between 0 and (Maximum Slots in Frame - 1).
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSsbEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSsbEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether synchronization signal block (SSB) is present in the transmitted signal.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether synchronization signal block (SSB) is present in the transmitted signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSsbEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether synchronization signal block (SSB) is present in the transmitted signal.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies whether synchronization signal block (SSB) is present in the transmitted signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSsbCrbOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSsbCrbOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the CRB offset for the SS/PBCH block relative to the reference Point A in units of 15 kHz or 60 kHz resource blocks for frequency range 1 and frequency range 2 respectively.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the CRB offset for the SS/PBCH block relative to the reference Point A in units of 15 kHz or 60 kHz resource blocks for frequency range 1 and frequency range 2 respectively.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbCrbOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbCrbOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSsbCrbOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the CRB offset for the SS/PBCH block relative to the reference Point A in units of 15 kHz or 60 kHz resource blocks for frequency range 1 and frequency range 2 respectively.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the CRB offset for the SS/PBCH block relative to the reference Point A in units of 15 kHz or 60 kHz resource blocks for frequency range 1 and frequency range 2 respectively.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbCrbOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSubcarrierSpacingCommon(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubcarrierSpacingCommon" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the basic unit of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbSubcarrierOffset(System.String,System.Int32)" crefType="FullyQualified" /> method for frequency range 2. The method refers to the MIB control element subCarrierSpacingCommon in <em>3GPP TS 38.331</em>.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the basic unit of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbSubcarrierOffset(System.String,System.Int32)" crefType="FullyQualified" /> method for frequency range 2. The method refers to the MIB control element subCarrierSpacingCommon in <em>3GPP TS 38.331</em>.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubcarrierSpacingCommon" crefType="PartiallyQualified" /> attribute.The default value is 60kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSubcarrierSpacingCommon(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSubcarrierSpacingCommon" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the basic unit of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbSubcarrierOffset(System.String,System.Int32)" crefType="FullyQualified" /> method for frequency range 2. The method refers to the MIB control element subCarrierSpacingCommon in <em>3GPP TS 38.331</em>.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the basic unit of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbSubcarrierOffset(System.String,System.Int32)" crefType="FullyQualified" /> method for frequency range 2. The method refers to the MIB control element subCarrierSpacingCommon in <em>3GPP TS 38.331</em>.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubcarrierSpacingCommon" crefType="PartiallyQualified" /> attribute.The default value is 60kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSsbSubcarrierOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSsbSubcarrierOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets an additional subcarrier offset for the SS/PBCH block in units of resource blocks of 15 kHz or subcarrier spacing given by SSB Subcarrier Common method for frequency range 1 and frequency range 2 respectively.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains an additional subcarrier offset for the SS/PBCH block in units of resource blocks of 15 kHz or subcarrier spacing given by SSB Subcarrier Common method for frequency range 1 and frequency range 2 respectively.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbSubcarrierOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbSubcarrierOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSsbSubcarrierOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets an additional subcarrier offset for the SS/PBCH block in units of resource blocks of 15 kHz or subcarrier spacing given by SSB Subcarrier Common method for frequency range 1 and frequency range 2 respectively.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies an additional subcarrier offset for the SS/PBCH block in units of resource blocks of 15 kHz or subcarrier spacing given by SSB Subcarrier Common method for frequency range 1 and frequency range 2 respectively.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbSubcarrierOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSsbPeriodicity(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSsbPeriodicity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the repetition duration of the SS/PBCH block transmit pattern.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the repetition duration of the SS/PBCH block transmit pattern.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbPeriodicity" crefType="PartiallyQualified" /> attribute.The default value is 5 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbPeriodicity(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSsbPeriodicity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the repetition duration of the SS/PBCH block transmit pattern.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the repetition duration of the SS/PBCH block transmit pattern.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbPeriodicity" crefType="PartiallyQualified" /> attribute.The default value is 5 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSsbPattern(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSsbPattern" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern" nireturnvaluetype="System.Int32">

         <summary>
            Gets the candidate SS/PBCH blocks with different subcarrier spacing configurations as defined in the section 4.1 of <em>3GPP TS 38.213</em> specification.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the candidate SS/PBCH blocks with different subcarrier spacing configurations as defined in the section 4.1 of <em>3GPP TS 38.213</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbPattern" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseB3GHzTo6GHz" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbPattern(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSsbPattern" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern" nireturnvaluetype="System.Int32">

         <summary>
            Sets the candidate SS/PBCH blocks with different subcarrier spacing configurations as defined in the section 4.1 of <em>3GPP TS 38.213</em> specification.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the candidate SS/PBCH blocks with different subcarrier spacing configurations as defined in the section 4.1 of <em>3GPP TS 38.213</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbPattern" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseB3GHzTo6GHz" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSsbActiveBlocks(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSsbActiveBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the SSB burst(s) indices for the SSB pattern that needs to be transmitted.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the SSB burst(s) indices for the SSB pattern that needs to be transmitted.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbActiveBlocks" crefType="PartiallyQualified" /> attribute.The default value is 0 - Last.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbActiveBlocks(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSsbActiveBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the SSB burst(s) indices for the SSB pattern that needs to be transmitted.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the SSB burst(s) indices for the SSB pattern that needs to be transmitted.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbActiveBlocks" crefType="PartiallyQualified" /> attribute.The default value is 0 - Last.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPssPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPssPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power scaling value for the primary synchronization symbol in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power scaling value for the primary synchronization symbol in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PssPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPssPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPssPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power scaling value for the primary synchronization symbol in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the power scaling value for the primary synchronization symbol in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PssPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSssPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSssPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power scaling value for the secondary synchronization symbol in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power scaling value for the secondary synchronization symbol in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SssPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSssPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSssPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power scaling value for the secondary synchronization symbol in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the power scaling value for the secondary synchronization symbol in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SssPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPbchPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPbchPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power scaling value for the PBCH REs in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power scaling value for the PBCH REs in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PbchPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPbchPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPbchPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power scaling value for the PBCH REs in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the power scaling value for the PBCH REs in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PbchPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPbchDmrsPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPbchDmrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power scaling value for the PBCH DMRS symbols in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power scaling value for the PBCH DMRS symbols in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PbchDmrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPbchDmrsPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPbchDmrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the power scaling value for the PBCH DMRS symbols in the SS/PBCH block. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the power scaling value for the PBCH DMRS symbols in the SS/PBCH block. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PbchDmrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfComponentCarriers(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfComponentCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of component carriers configured within a subblock. Set this method to 1 for single carrier.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of component carriers configured within a subblock. Set this method to 1 for single carrier. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfComponentCarriers" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfComponentCarriers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfComponentCarriers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of component carriers configured within a subblock. Set this method to 1 for single carrier.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of component carriers configured within a subblock. Set this method to 1 for single carrier. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfComponentCarriers" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetDownlinkTestModel(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDownlinkTestModel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel" nireturnvaluetype="System.Int32">

         <summary>
            Gets the NR test model type when you set the Channel Configuration Mode method to Test Model. Refer to section 4.9.2 of the <em>3GPP 38.141</em> specification for more information regarding test model configurations.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the NR test model type when you set the Channel Configuration Mode method to Test Model. Refer to section 4.9.2 of the <em>3GPP 38.141</em> specification for more information regarding test model configurations.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkTestModel" crefType="PartiallyQualified" /> attribute.The default value is  TM1.1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetDownlinkTestModel(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDownlinkTestModel" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel" nireturnvaluetype="System.Int32">

         <summary>
            Sets the NR test model type when you set the Channel Configuration Mode method to Test Model. Refer to section 4.9.2 of the <em>3GPP 38.141</em> specification for more information regarding test model configurations.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the NR test model type when you set the Channel Configuration Mode method to Test Model. Refer to section 4.9.2 of the <em>3GPP 38.141</em> specification for more information regarding test model configurations.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkTestModel" crefType="PartiallyQualified" /> attribute.The default value is  TM1.1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetDownlinkTestModelDuplexScheme(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDownlinkTestModelDuplexScheme" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme" nireturnvaluetype="System.Int32">

         <summary>
            Gets the duplexing technique of the signal being measured. Refer to section 4.9.2 of <em>3GPP 38.141</em> specification for more information regarding test model configurations based on duplex scheme.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the duplexing technique of the signal being measured. Refer to section 4.9.2 of <em>3GPP 38.141</em> specification for more information regarding test model configurations based on duplex scheme.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkTestModelDuplexScheme" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme.Fdd" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetDownlinkTestModelDuplexScheme(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDownlinkTestModelDuplexScheme" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme" nireturnvaluetype="System.Int32">

         <summary>
            Sets the duplexing technique of the signal being measured. Refer to section 4.9.2 of <em>3GPP 38.141</em> specification for more information regarding test model configurations based on duplex scheme.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the duplexing technique of the signal being measured. Refer to section 4.9.2 of <em>3GPP 38.141</em> specification for more information regarding test model configurations based on duplex scheme.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkTestModelDuplexScheme" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme.Fdd" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the channel bandwidth of the signal being measured. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the channel bandwidth of the signal being measured. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 100M. Valid values for frequency range 1 are from 5M to 100M. Valid values for frequency range 2 are 50M, 100M, 200M, and 400M.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the channel bandwidth of the signal being measured. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the channel bandwidth of the signal being measured. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 100M. Valid values for frequency range 1 are from 5M to 100M. Valid values for frequency range 2 are 50M, 100M, 200M, and 400M.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the offset of the component carrier from the subblock center frequency that you configure in the Center Frequency method.  This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the offset of the component carrier from the subblock center frequency that you configure in the Center Frequency method.  This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the offset of the component carrier from the subblock center frequency that you configure in the Center Frequency method.  This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the offset of the component carrier from the subblock center frequency that you configure in the Center Frequency method.  This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetRadioAccessType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRadioAccessType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType" nireturnvaluetype="System.Int32">

         <summary>
            Gets if a carrier is a NR or an E-UTRA carrier while using dual connectivity (EN-DC) signal.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains if a carrier is a NR or an E-UTRA carrier while using dual connectivity (EN-DC) signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierRadioAccessType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType.NR" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetRadioAccessType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRadioAccessType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType" nireturnvaluetype="System.Int32">

         <summary>
            Sets if a carrier is a NR or an E-UTRA carrier while using dual connectivity (EN-DC) signal.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies if a carrier is a NR or an E-UTRA carrier while using dual connectivity (EN-DC) signal.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierRadioAccessType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType.NR" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetCellID(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCellID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets a physical layer cell identity.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains a physical layer cell identity.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CellID" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are 0 to 1007, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCellID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets a physical layer cell identity.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies a physical layer cell identity.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CellID" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are 0 to 1007, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetReferenceGridSubcarrierSpacing(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceGridSubcarrierSpacing" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the subcarrier spacing of the reference resource grid when you set the Reference Grid Alignment Mode method to Manual. This should be the largest subcarrier spacing used in the component carrier. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the subcarrier spacing of the reference resource grid when you set the Reference Grid Alignment Mode method to Manual. This should be the largest subcarrier spacing used in the component carrier. This value is expressed in Hz. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridSubcarrierSpacing" crefType="PartiallyQualified" /> attribute.The default value is 30kHz.Valid values for frequency range 1 are 15kHz, 30kHz, and 60kHz.Valid values for frequency range 2 are 60kHz and 120kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetReferenceGridSubcarrierSpacing(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceGridSubcarrierSpacing" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the subcarrier spacing of the reference resource grid when you set the Reference Grid Alignment Mode method to Manual. This should be the largest subcarrier spacing used in the component carrier. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the subcarrier spacing of the reference resource grid when you set the Reference Grid Alignment Mode method to Manual. This should be the largest subcarrier spacing used in the component carrier. This value is expressed in Hz. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridSubcarrierSpacing" crefType="PartiallyQualified" /> attribute.The default value is 30kHz.Valid values for frequency range 1 are 15kHz, 30kHz, and 60kHz.Valid values for frequency range 2 are 60kHz and 120kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetReferenceGridStart(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetReferenceGridStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the reference resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual. Center of subcarrier 0 in common resource block 0 is considered as Reference Point A.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the reference resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual. Center of subcarrier 0 in common resource block 0 is considered as Reference Point A.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridStart" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetReferenceGridStart(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetReferenceGridStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the reference resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual. Center of subcarrier 0 in common resource block 0 is considered as Reference Point A.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the reference resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual. Center of subcarrier 0 in common resource block 0 is considered as Reference Point A.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridStart" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfBandwidthParts(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfBandwidthParts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of bandwidth parts present in the component carrier.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of bandwidth parts present in the component carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfBandwidthParts" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfBandwidthParts(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfBandwidthParts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of bandwidth parts present in the component carrier.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of bandwidth parts present in the component carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfBandwidthParts" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetBandwidthPartSubcarrierSpacing(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidthPartSubcarrierSpacing" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the subcarrier spacing of the bandwidth part used  in the component carrier.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the subcarrier spacing of the bandwidth part used  in the component carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartSubcarrierSpacing" crefType="PartiallyQualified" /> attribute.The default value is 30kHz.Valid values for frequency range 1 are 15kHz, 30kHz, and 60kHz.Valid values for frequency range 2 are 60kHz and 120kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetBandwidthPartSubcarrierSpacing(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidthPartSubcarrierSpacing" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the subcarrier spacing of the bandwidth part used  in the component carrier.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the subcarrier spacing of the bandwidth part used  in the component carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartSubcarrierSpacing" crefType="PartiallyQualified" /> attribute.The default value is 30kHz.Valid values for frequency range 1 are 15kHz, 30kHz, and 60kHz.Valid values for frequency range 2 are 60kHz and 120kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetBandwidthPartCyclicPrefixMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidthPartCyclicPrefixMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets the cyclic prefix (CP) duration and the number of symbols in a slot for the signal being measured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the cyclic prefix (CP) duration and the number of symbols in a slot for the signal being measured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartCyclicPrefixMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetBandwidthPartCyclicPrefixMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidthPartCyclicPrefixMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets the cyclic prefix (CP) duration and the number of symbols in a slot for the signal being measured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the cyclic prefix (CP) duration and the number of symbols in a slot for the signal being measured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartCyclicPrefixMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXBandwidthPartCyclicPrefixMode.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetGridStart(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetGridStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.GridStart" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetGridStart(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetGridStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.GridStart" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetBandwidthPartResourceBlockOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidthPartResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the resource block offset of a bandwidth part relative to the resource <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetGridStart(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the resource block offset of a bandwidth part relative to the resource <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetGridStart(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartResourceBlockOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetBandwidthPartResourceBlockOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidthPartResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the resource block offset of a bandwidth part relative to the resource <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetGridStart(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the resource block offset of a bandwidth part relative to the resource <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetGridStart(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartResourceBlockOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetBandwidthPartNumberOfResourceBlocks(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBandwidthPartNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of consecutive resource blocks in a bandwidth  part.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Sets the number of consecutive resource blocks in a bandwidth  part.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The default value is -1. If you set this property to -1, all available resource blocks for the specified bandwidth that do not violate the minimum guard band are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetBandwidthPartNumberOfResourceBlocks(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetBandwidthPartNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of consecutive resource blocks in a bandwidth  part.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of consecutive resource blocks in a bandwidth  part.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The default value is -1. If you set this property to -1, all available resource blocks for the specified bandwidth that do not violate the minimum guard band are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfUsers(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfUsers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of users present in the bandwidth part.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of users present in the bandwidth part.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfUsers" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfUsers(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfUsers" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of users present in the bandwidth part.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of users present in the bandwidth part.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfUsers" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetRnti(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRnti" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RNTI.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the RNTI.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.Rnti" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetRnti(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRnti" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RNTI.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the RNTI.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.Rnti" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfPuschConfigurations(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfPuschConfigurations" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of PUSCH slot configurations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of PUSCH slot configurations.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPuschConfigurations" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfPuschConfigurations(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfPuschConfigurations" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of PUSCH slot configurations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of PUSCH slot configurations.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPuschConfigurations" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschTransformPrecodingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether transform precoding is enabled. Enable transform precoding when analyzing a DFT-s-OFDM waveform.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether transform precoding is enabled. Enable transform precoding when analyzing a DFT-s-OFDM waveform.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschTransformPrecodingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschTransformPrecodingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether transform precoding is enabled. Enable transform precoding when analyzing a DFT-s-OFDM waveform.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether transform precoding is enabled. Enable transform precoding when analyzing a DFT-s-OFDM waveform.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschTransformPrecodingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschNumberOfResourceBlockClusters(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschNumberOfResourceBlockClusters" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschNumberOfResourceBlockClusters(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschNumberOfResourceBlockClusters" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschResourceBlockOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the starting resource block number of a PUSCH cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the starting resource block number of a PUSCH cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschResourceBlockOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschResourceBlockOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the starting resource block number of a PUSCH cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the starting resource block number of a PUSCH cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschResourceBlockOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschNumberOfResourceBlocks(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of consecutive resource blocks in a physical uplink shared channel (PUSCH) cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of consecutive resource blocks in a physical uplink shared channel (PUSCH) cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The default value is -1. If you set this property to -1, all available resource blocks for the specified bandwidth are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschNumberOfResourceBlocks(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of consecutive resource blocks in a physical uplink shared channel (PUSCH) cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of consecutive resource blocks in a physical uplink shared channel (PUSCH) cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The default value is -1. If you set this property to -1, all available resource blocks for the specified bandwidth are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschModulationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschModulationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the modulation scheme used in the physical uplink shared channel (PUSCH) of the signal being measured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the modulation scheme used in the physical uplink shared channel (PUSCH) of the signal being measured. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschModulationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qpsk" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschModulationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschModulationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the modulation scheme used in the physical uplink shared channel (PUSCH) of the signal being measured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the modulation scheme used in the physical uplink shared channel (PUSCH) of the signal being measured. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschModulationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qpsk" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsReleaseVersion(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion" nireturnvaluetype="System.Int32">

         <summary>
            Gets the 3GGP release version for PUSCH DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the 3GGP release version for PUSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsReleaseVersion" crefType="PartiallyQualified" /> attribute.The default value is  0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsReleaseVersion(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion" nireturnvaluetype="System.Int32">

         <summary>
            Sets the 3GGP release version for PUSCH DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the 3GGP release version for PUSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsReleaseVersion" crefType="PartiallyQualified" /> attribute.The default value is  0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsAntennaPorts(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the antenna ports used for DMRS transmission.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the antenna ports used for DMRS transmission.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values depend on PUSCH Mapping Type and PUSCH DMRS Num CDM Groups properties.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsAntennaPorts(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the antenna ports used for DMRS transmission.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the antenna ports used for DMRS transmission.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values depend on PUSCH Mapping Type and PUSCH DMRS Num CDM Groups properties.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> method is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> method or specified by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> method is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> method or specified by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> method is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> method or specified by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> method is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> method or specified by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the factor which boosts the PUSCH DMRS REs. This value is expressed in dB. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the factor which boosts the PUSCH DMRS REs. This value is expressed in dB. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the factor which boosts the PUSCH DMRS REs. This value is expressed in dB. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the factor which boosts the PUSCH DMRS REs. This value is expressed in dB. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsNumberOfCdmGroups(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsNumberOfCdmGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of CDM groups, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />, otherwise it is coerced to 2.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of CDM groups, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />, otherwise it is coerced to 2.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsNumberOfCdmGroups" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsNumberOfCdmGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of CDM groups, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />, otherwise it is coerced to 2.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of CDM groups, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />, otherwise it is coerced to 2.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsNumberOfCdmGroups" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsScramblingIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the configured Scrambling ID is honored or the Cell ID is used for reference signal generation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the configured Scrambling ID is honored or the Cell ID is used for reference signal generation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsScramblingIDMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode.CellID" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsScramblingIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the configured Scrambling ID is honored or the Cell ID is used for reference signal generation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the configured Scrambling ID is honored or the Cell ID is used for reference signal generation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsScramblingIDMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode.CellID" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsScramblingID(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsScramblingID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of scrambling ID. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the value of scrambling ID. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsScramblingID" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are from 0 to 65535, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsScramblingID(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsScramblingID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of scrambling ID. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the value of scrambling ID. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsScramblingID" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are from 0 to 65535, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsNscid(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsNscid" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of PUSCH DMRS nSCID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the value of PUSCH DMRS nSCID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsNscid" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNscid(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsNscid" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of PUSCH DMRS nSCID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the value of PUSCH DMRS nSCID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsNscid" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsGroupHoppingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsGroupHoppingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the group hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the group hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsGroupHoppingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsGroupHoppingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsGroupHoppingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the group hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the group hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsGroupHoppingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsSequenceHoppingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsSequenceHoppingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the sequence hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the sequence hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsSequenceHoppingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsSequenceHoppingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsSequenceHoppingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the sequence hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the sequence hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsSequenceHoppingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsPuschIDMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether PUSCH DMRS PUSCH ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether PUSCH DMRS PUSCH ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPuschIDMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.CellID" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsPuschIDMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether PUSCH DMRS PUSCH ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether PUSCH DMRS PUSCH ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPuschIDMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.CellID" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsPuschID(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsPuschID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of PUSCH DMRS PUSCH ID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.UserDefined" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the value of PUSCH DMRS PUSCH ID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.UserDefined" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPuschID" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are from 0 to 1007, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschID(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsPuschID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of PUSCH DMRS PUSCH ID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.UserDefined" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the value of PUSCH DMRS PUSCH ID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.UserDefined" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPuschID" crefType="PartiallyQualified" /> attribute.The default value is 0. Valid values are from 0 to 1007, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsConfigurationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the configuration type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the configuration type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsConfigurationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType.Type1" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsConfigurationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the configuration type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the configuration type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsConfigurationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType.Type1" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschMappingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mapping type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the mapping type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschMappingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschMappingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the mapping type of DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the mapping type of DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschMappingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsTypeAPosition(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsTypeAPosition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the position of first DMRS symbol in a slot when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the position of first DMRS symbol in a slot when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsTypeAPosition" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsTypeAPosition(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsTypeAPosition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the position of first DMRS symbol in a slot when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the position of first DMRS symbol in a slot when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsTypeAPosition" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsDuration(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the DMRS is single-symbol or double-symbol.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the DMRS is single-symbol or double-symbol.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsDuration" crefType="PartiallyQualified" /> attribute.The default value is  Single-Symbol.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsDuration(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsDuration" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the DMRS is single-symbol or double-symbol.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the DMRS is single-symbol or double-symbol.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsDuration" crefType="PartiallyQualified" /> attribute.The default value is  Single-Symbol.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschDmrsAdditionalPositions(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsAdditionalPositions" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of additional sets of consecutive DMRS symbols in a slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of additional sets of consecutive DMRS symbols in a slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsAdditionalPositions" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsAdditionalPositions(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschDmrsAdditionalPositions" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of additional sets of consecutive DMRS symbols in a slot.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of additional sets of consecutive DMRS symbols in a slot.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsAdditionalPositions" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the PUSCH transmission contains PTRS signals.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the PUSCH transmission contains PTRS signals.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the PUSCH transmission contains PTRS signals.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the PUSCH transmission contains PTRS signals.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsAntennaPorts(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the DMRS antenna ports associated with PTRS transmission. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the DMRS antenna ports associated with PTRS transmission. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsAntennaPorts(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the DMRS antenna ports associated with PTRS transmission. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the DMRS antenna ports associated with PTRS transmission. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the PUSCH PTRS power scaling is calculated as defined in 3GPP specification or specified by you. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the PUSCH PTRS power scaling is calculated as defined in 3GPP specification or specified by you. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode.Standard" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the PUSCH PTRS power scaling is calculated as defined in 3GPP specification or specified by you. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the PUSCH PTRS power scaling is calculated as defined in 3GPP specification or specified by you. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode.Standard" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the factor by which the PUSCH PTRS REs are boosted. This value is expressed in dB. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the factor by which the PUSCH PTRS REs are boosted. This value is expressed in dB. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the factor by which the PUSCH PTRS REs are boosted. This value is expressed in dB. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the factor by which the PUSCH PTRS REs are boosted. This value is expressed in dB. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfPtrsGroups(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfPtrsGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of PTRS groups per OFDM symbol. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of PTRS groups per OFDM symbol. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPtrsGroups" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfPtrsGroups(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfPtrsGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of PTRS groups per OFDM symbol. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of PTRS groups per OFDM symbol. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPtrsGroups" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetSamplesPerPtrsGroup(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSamplesPerPtrsGroup" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of samples per each PTRS group. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of samples per each PTRS group. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SamplesPerPtrsGroup" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSamplesPerPtrsGroup(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSamplesPerPtrsGroup" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of samples per each PTRS group. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of samples per each PTRS group. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SamplesPerPtrsGroup" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsTimeDensity(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsTimeDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the density of PTRS in time domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the density of PTRS in time domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsTimeDensity" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsTimeDensity(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsTimeDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the density of PTRS in time domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the density of PTRS in time domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsTimeDensity" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsFrequencyDensity(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsFrequencyDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the density of PTRS in frequency domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the density of PTRS in frequency domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsFrequencyDensity" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsFrequencyDensity(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsFrequencyDensity" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the density of PTRS in frequency domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the density of PTRS in frequency domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsFrequencyDensity" crefType="PartiallyQualified" /> attribute.The default value is 2.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschPtrsREOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsREOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RE offset to be used for transmission of PTRS as defined in the Table 6.4.1.2.2.1-1 of <em>3GPP 38.211</em> specification.  This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the RE offset to be used for transmission of PTRS as defined in the Table 6.4.1.2.2.1-1 of <em>3GPP 38.211</em> specification.  This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsREOffset" crefType="PartiallyQualified" /> attribute.The default value is 00.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsREOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschPtrsREOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the RE offset to be used for transmission of PTRS as defined in the Table 6.4.1.2.2.1-1 of <em>3GPP 38.211</em> specification.  This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the RE offset to be used for transmission of PTRS as defined in the Table 6.4.1.2.2.1-1 of <em>3GPP 38.211</em> specification.  This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsREOffset" crefType="PartiallyQualified" /> attribute.The default value is 00.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschSlotAllocation(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschSlotAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the slot allocation in NR Frame. This defines the indices of the allocated slots.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the slot allocation in NR Frame. This defines the indices of the allocated slots. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschSlotAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to (Maximum number of slots in frame - 1), inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschSlotAllocation(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschSlotAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the slot allocation in NR Frame. This defines the indices of the allocated slots.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the slot allocation in NR Frame. This defines the indices of the allocated slots. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschSlotAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to (Maximum number of slots in frame - 1), inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPuschSymbolAllocation(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschSymbolAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the symbol allocation of each slot allocation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the symbol allocation of each slot allocation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschSymbolAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to 13, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschSymbolAllocation(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPuschSymbolAllocation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the symbol allocation of each slot allocation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the symbol allocation of each slot allocation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschSymbolAllocation" crefType="PartiallyQualified" /> attribute.The default value is 0-Last. Valid values are from 0 to 13, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetNumberOfPdschConfigurations(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfPdschConfigurations" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of PDSCH slot configurations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of PDSCH slot configurations.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPdschConfigurations" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetNumberOfPdschConfigurations(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfPdschConfigurations" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of PDSCH slot configurations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of PDSCH slot configurations.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPdschConfigurations" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschNumberOfResourceBlockClusters(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschNumberOfResourceBlockClusters" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschNumberOfResourceBlockClusters(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschNumberOfResourceBlockClusters" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschResourceBlockOffset(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the starting resource block number of a PDSCH cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the starting resource block number of a PDSCH cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschResourceBlockOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschResourceBlockOffset(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschResourceBlockOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the starting resource block number of a PDSCH cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the starting resource block number of a PDSCH cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschResourceBlockOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschNumberOfResourceBlocks(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of consecutive resource blocks in a PDSCH cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of consecutive resource blocks in a PDSCH cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The default value is -1. If you set this property to -1, all available resource blocks within the bandwidth part are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschNumberOfResourceBlocks(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of consecutive resource blocks in a PDSCH cluster.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of consecutive resource blocks in a PDSCH cluster.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschNumberOfResourceBlocks" crefType="PartiallyQualified" /> attribute.The default value is -1. If you set this property to -1, all available resource blocks within the bandwidth part are configured.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschModulationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschModulationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the modulation scheme used in PDSCH channel of the signal being measured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the modulation scheme used in PDSCH channel of the signal being measured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschModulationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qpsk" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschModulationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschModulationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the modulation scheme used in PDSCH channel of the signal being measured.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the modulation scheme used in PDSCH channel of the signal being measured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschModulationType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qpsk" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsReleaseVersion(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion" nireturnvaluetype="System.Int32">

         <summary>
            Gets the 3GGP release version for PDSCH DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the 3GGP release version for PDSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsReleaseVersion" crefType="PartiallyQualified" /> attribute.The default value is  0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsReleaseVersion(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion" nireturnvaluetype="System.Int32">

         <summary>
            Sets the 3GGP release version for PDSCH DMRS.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the 3GGP release version for PDSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsReleaseVersion" crefType="PartiallyQualified" /> attribute.The default value is  0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsAntennaPorts(System.String,System.String@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.String" nireturnvaluetype="System.Int32">

         <summary>
            Gets the antenna ports used for DMRS transmission.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the antenna ports used for DMRS transmission.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 1000.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsAntennaPorts(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsAntennaPorts" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.String" nireturnvaluetype="System.Int32">

         <summary>
            Sets the antenna ports used for DMRS transmission.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the antenna ports used for DMRS transmission.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsAntennaPorts" crefType="PartiallyQualified" /> attribute.The default value is 1000.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsPowerMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the factor by which the PDSCH DMRS REs are boosted. This value is expressed in dB.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the factor by which the PDSCH DMRS REs are boosted. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the factor by which the PDSCH DMRS REs are boosted. This value is expressed in dB.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the factor by which the PDSCH DMRS REs are boosted. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsNumberOfCdmGroups(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsNumberOfCdmGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of CDM groups.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the number of CDM groups.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsNumberOfCdmGroups" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsNumberOfCdmGroups" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of CDM groups.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the number of CDM groups.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsNumberOfCdmGroups" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsScramblingIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the configured Scrambling ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether the configured Scrambling ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsScramblingIDMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode.CellID" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsScramblingIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the configured Scrambling ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether the configured Scrambling ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsScramblingIDMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode.CellID" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsScramblingID(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsScramblingID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of scrambling ID used for reference signal generation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the value of scrambling ID used for reference signal generation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsScramblingID" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsScramblingID(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPdschDmrsScramblingID" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the value of scrambling ID used for reference signal generation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the value of scrambling ID used for reference signal generation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsScramblingID" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.GetPdschDmrsnScid(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsnScid" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the value of PDSCH DMRS nSCID used for reference signal generation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the value of PDSCH DMRS nSCID used for reference signal generation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsnScid" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXComponentCarrierRadioAccessType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies if a carrier is a NR or an E-UTRA carrier while using dual connectivity (EN-DC) signal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType.NR" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NR" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the carrier is NR.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierRadioAccessType.Eutra" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Eutra" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the carrier is E-UTRA.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXComponentCarrierSpacingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the spacing between adjacent component carriers (CCs) within a subblock.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.Nominal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Nominal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Calculates the frequency spacing between component carriers as defined in section 5.4A.1 in the <em>3GPP 38.101-1/2</em> specification and section 5.4.1.2 in the <em>3GPP TS 38.104</em> specification and sets the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.User" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="User" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The component carrier frequency that you configure in the CC Freq method is used.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXConstants" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies constants for I/O terminals.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.Pfi0" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pfi0" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PFI 0.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.Pfi1" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pfi1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI 1.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine0" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine0" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 0.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine1" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 1.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine2" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 2.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine3" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine3" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 3.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine4" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 4.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine5" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine5" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 5.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine6" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine6" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 6.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiTriggerLine7" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiTriggerLine7" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI trigger line 7.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxiStarLine" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxiStarLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXI star trigger line.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.PxieDStarBLine" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PxieDStarBLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The signal is exported to the PXIe DStar B trigger line. This value is valid only for PXIe-5820/5830/5831/5840/5841.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXConstants.TimerEvent" nitypekind="PublicConstantField" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TimerEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The trigger is received from the timer event. This value is valid only for PXIe-5820/5840/5841 and for digital edge advance triggers on PXIe-5663E/5665.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXCoresetCceToRegMappingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the CCE-to-REG mapping type of CORESET.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType.NonInterleaved" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NonInterleaved" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Mapping type is non-interleaved.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetCceToRegMappingType.Interleaved" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Interleaved" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Mapping type is interleaved.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXCoresetPrecodingGranularity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the precoding granularity of the CORESET.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity.SameAsRegBundle" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SameAsRegBundle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Precoding granularity is set to Same As REG Bundle.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXCoresetPrecodingGranularity.AllContiguousResourceBlocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AllContiguousResourceBlocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Precoding granularity is set to All Contiguous Resource Blocks.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXDigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the active edge for the trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge.Rising" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The trigger asserts on the rising edge of the signal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDigitalEdgeTriggerEdge.Falling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The trigger asserts on the falling edge of the signal.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXDownlinkChannelConfigurationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the downlink channel configuration mode.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>User has to manually set all the signals and channels.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkChannelConfigurationMode.TestModel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TestModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            A test model needs to be selected that will configure all the signals and channels automatically according to the section 4.9.2 of <em>3GPP 38.141-1/2</em> specification.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXDownlinkTestModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the NR test model type when you set the Channel Configuration Mode method to Test Model. Refer to section 4.9.2 of the <em>3GPP 38.141</em> specification for more information regarding test model configurations.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM1_1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM1_1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM1.1 NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM1_2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM1_2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM1.2 NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM2 NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM2a" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM2a" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM2a NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM3_1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM3_1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM3.1 NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM3_1a" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM3_1a" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM3.1a NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM3_2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM3_2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM3.2 NR test model.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModel.TM3_3" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TM3_3" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a TM3.3 NR test model.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXDownlinkTestModelDuplexScheme" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the duplexing technique of the signal being measured. Refer to section 4.9.2 of <em>3GPP 38.141</em> specification for more information regarding test model configurations based on duplex scheme.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme.Fdd" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Fdd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the duplexing technique is frequency-division duplexing.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXDownlinkTestModelDuplexScheme.Tdd" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Tdd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the duplexing technique is time-division duplexing.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXFrequencyRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to use channel bandwidth and subcarrier spacing configuration supported in the frequency range 1 (sub 6 GHz) or the frequency range 2 (above 24 GHz).
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Range1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement uses the channel bandwidth and the subcarrier spacing configuration supported in frequency range 1 (sub 6 GHz).</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Range2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement uses the channel bandwidth and the subcarrier spacing configuration supported in frequency range 2 (above 24 GHz).</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXgNodeBCategory" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the downlink gNodeB (base station) category. Refer to the <em>3GPP 38.104</em> specification for more information about gNodeB category.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.WideAreaBaseStationCategoryA" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="WideAreaBaseStationCategoryA" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is Wide Area Base Station - Category A.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.WideAreaBaseStationCategoryBOption1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="WideAreaBaseStationCategoryBOption1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is Wide Area Base Station - Category B Option1.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.WideAreaBaseStationCategoryBOption2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="WideAreaBaseStationCategoryBOption2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is Wide Area Base Station - Category B Option2.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.LocalAreaBaseStation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="LocalAreaBaseStation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is Local Area Base Station.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.MediumRangeBaseStation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="MediumRangeBaseStation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is Medium Range Base Station.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.FR2CategoryA" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FR2CategoryA" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is FR2 Category A.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.FR2CategoryB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FR2CategoryB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The gNodeB type is FR2 Category B.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXIQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the reference for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The IQ Power Edge Level Type method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The IQ Power Edge Level method is relative to the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The IQ Power Edge Level method specifies the absolute power. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXIQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The trigger asserts when the signal power is rising.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Falling" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The trigger asserts when the signal power is falling.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXLimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the set of properties that are considered by RFmx in the locked signal configuration state.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>This is the normal mode of RFmx operation. All configuration changes in RFmxInstr properties or in personality properties will be applied during RFmx Commit. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.NoChange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Signal configuration is locked after the first Commit of the named signal configuration. Any configuration change thereafter either in RFmxInstr properties or personality properties will not be considered by subsequent RFmx Commits or Initiates of this signal.  Use No Change if you have created named signal configurations for all measurement configurations but are setting some RFmxInstr properties. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.Frequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Frequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Signal configuration, other than center frequency and external attenuation, is locked after first Commit of the named signal configuration. Thereafter, only the Center Frequency and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetExternalAttenuation(System.String,System.Double)" crefType="FullyQualified" /> method value changes will be considered by subsequent driver Commits or Initiates of this signal.  Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.ReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Signal configuration, other than the reference level, is locked after first Commit of the named signal configuration. Thereafter only the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method value change will be considered by subsequent driver Commits or Initiates of this signal. If you have configured this signal to use an IQ Power Edge Trigger, NI recommends that you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" /> so that the trigger level is automatically adjusted as you adjust the reference level. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.FrequencyAndReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FrequencyAndReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Signal configuration, other than center frequency, reference level, and external attenuation, is locked after first Commit of the named signal configuration. Thereafter only Center Frequency,
            <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetExternalAttenuation(System.String,System.Double)" crefType="FullyQualified" /> method value changes will be considered by subsequent driver Commits or Initiates of this signal. If you have configured this signal to use an IQ Power Edge Trigger, NI recommends you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" /> so that the trigger level is automatically adjusted as you adjust the reference level. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLimitedConfigurationChange.SelectedPortsFrequencyAndReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SelectedPortsFrequencyAndReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Signal configuration, other than selected ports, center frequency, reference level, external attenuation, and RFInstr configuration, is locked after first Commit or Initiate of the named signal configuration. Thereafter only Selected Ports, Center Frequency, Reference Level, and External Attenuation method value changes will be considered by subsequent driver Commits or Initiates of this signal. If you have configured this signal to use an IQ Power Edge Trigger, NI recommends you set the IQ Power Edge Level Type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" /> so that the trigger level is automatically adjusted as you adjust the reference level. Refer to the Limitations of the Limited Configuration Change Property topic for more details about the limitations of using this mode.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXLinkDirection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the direction for which the frequency is calculated. Only Uplink is supported. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection.Downlink" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Downlink" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>NR measurement uses 3GPP NR downlink specification to measure the received signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection.Uplink" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Uplink" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The frequency is calculated in the reverse link direction, also know as the uplink direction. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXMeasurementTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the type of measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes.ModAcc" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAcc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Selects ModAcc measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes.Sem" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Sem" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Selects SEM measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes.Acp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Acp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Selects ACP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes.Chp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Chp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Selects CHP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes.Obw" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Obw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Selects OBW measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXMeasurementTypes.Pvt" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pvt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Selects PVT measurement.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAcc" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAcc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents the ModAcc measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXModAcc.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the ModAcc measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXModAcc.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the ModAcc measurement results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Enables averaging for the measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed on a single acquisition. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement is averaged over multiple acquisitions. The number of acquisitions is obtained by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccChannelEstimationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the method used for channel estimation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType.Reference" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Reference" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Only demodulation reference (DMRS) symbol is used to calculate channel coefficients.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType.ReferenceAndData" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceAndData" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Both demodulation reference (DMRS) and data symbols are used to calculate channel coefficients. This method is as per definition of 3GPP NR specification.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccCommonClockSourceEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether same reference clock is used for local oscillator and digital-to-analog converter. When same reference clock is used the Carrier Frequency Offset is proportional to Sample Clock Error.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The Sample Clock error is estimated independently.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The Sample Clock error is estimated from carrier frequency offset.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccCompositeResultsIncludeDmrs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the DMRS resource elements are included for composite EVM and magnitude and phase error results and traces.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The DMRS resource elements are not included.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The DMRS resource elements are included.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccCompositeResultsIncludePtrs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the PTRS resource elements are included for composite EVM and magnitude and phase error results and traces.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The PTRS resource elements are not included.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The PTRS resource elements are included.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the ModAcc measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the ModAcc measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the ModAcc measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the ModAcc measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the ModAcc measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetMulticarrierFilterEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMulticarrierFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to use the filter in single carrier configurations to minimize leakage into the carrier. Measurement ignores this method, if number of carriers is set to more than 1 or if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />, where in the multi carrier filter will always be used.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether to use the filter in single carrier configurations to minimize leakage into the carrier. Measurement ignores this method, if number of carriers is set to more than 1 or if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />, where in the multi carrier filter will always be used.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMulticarrierFilterEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMulticarrierFilterEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMulticarrierFilterEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to use the filter in single carrier configurations to minimize leakage into the carrier. Measurement ignores this method, if number of carriers is set to more than 1 or if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />, where in the multi carrier filter will always be used.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether to use the filter in single carrier configurations to minimize leakage into the carrier. Measurement ignores this method, if number of carriers is set to more than 1 or if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />, where in the multi carrier filter will always be used.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMulticarrierFilterEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetFrequencyErrorEstimation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFrequencyErrorEstimation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation" nireturnvaluetype="System.Int32">

         <summary>
            Gets the operation mode of frequency error estimation.      If frequency error is absent in the signal to be analyzed, you may disable frequency estimation to reduce measurement time or to avoid measurement inaccuracy due to error in frequency error estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the operation mode of frequency error estimation.      If frequency error is absent in the signal to be analyzed, you may disable frequency estimation to reduce measurement time or to avoid measurement inaccuracy due to error in frequency error estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFrequencyErrorEstimation" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFrequencyErrorEstimation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFrequencyErrorEstimation" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation" nireturnvaluetype="System.Int32">

         <summary>
            Sets the operation mode of frequency error estimation.      If frequency error is absent in the signal to be analyzed, you may disable frequency estimation to reduce measurement time or to avoid measurement inaccuracy due to error in frequency error estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the operation mode of frequency error estimation.      If frequency error is absent in the signal to be analyzed, you may disable frequency estimation to reduce measurement time or to avoid measurement inaccuracy due to error in frequency error estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFrequencyErrorEstimation" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetSymbolClockErrorEstimationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSymbolClockErrorEstimationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to estimate symbol clock error.      This method is ignored when the Common Clock Source Enabled method is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" /> and the Frequency Error Estimation method is Disabled, in which case, symbol clock error is not estimated.      If symbol clock error is absent in the signal to be analyzed, you may disable symbol clock error estimation to reduce measurement time or to avoid measurement inaccuracy due to error in symbol clock error estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains whether to estimate symbol clock error.      This method is ignored when the Common Clock Source Enabled method is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" /> and the Frequency Error Estimation method is Disabled, in which case, symbol clock error is not estimated.      If symbol clock error is absent in the signal to be analyzed, you may disable symbol clock error estimation to reduce measurement time or to avoid measurement inaccuracy due to error in symbol clock error estimation.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSymbolClockErrorEstimationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSymbolClockErrorEstimationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSymbolClockErrorEstimationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to estimate symbol clock error.      This method is ignored when the Common Clock Source Enabled method is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" /> and the Frequency Error Estimation method is Disabled, in which case, symbol clock error is not estimated.      If symbol clock error is absent in the signal to be analyzed, you may disable symbol clock error estimation to reduce measurement time or to avoid measurement inaccuracy due to error in symbol clock error estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies whether to estimate symbol clock error.      This method is ignored when the Common Clock Source Enabled method is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" /> and the Frequency Error Estimation method is Disabled, in which case, symbol clock error is not estimated.      If symbol clock error is absent in the signal to be analyzed, you may disable symbol clock error estimation to reduce measurement time or to avoid measurement inaccuracy due to error in symbol clock error estimation.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSymbolClockErrorEstimationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetIQOriginOffsetEstimationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIQOriginOffsetEstimationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to estimate the IQ origin offset.      If IQ origin offset is absent in the signal to be analyzed, you may disable IQ origin offset estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ origin offset estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to estimate the IQ origin offset.      If IQ origin offset is absent in the signal to be analyzed, you may disable IQ origin offset estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ origin offset estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccIQOriginOffsetEstimationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetIQOriginOffsetEstimationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIQOriginOffsetEstimationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to estimate the IQ origin offset.      If IQ origin offset is absent in the signal to be analyzed, you may disable IQ origin offset estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ origin offset estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to estimate the IQ origin offset.      If IQ origin offset is absent in the signal to be analyzed, you may disable IQ origin offset estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ origin offset estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccIQOriginOffsetEstimationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetIQImpairmentsEstimationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIQImpairmentsEstimationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to estimate the IQ impairments such as IQ gain imbalance and quadrature skew.      If IQ impairments is absent in the signal to be analyzed, you may disable IQ impairments estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ impairments estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to estimate the IQ impairments such as IQ gain imbalance and quadrature skew.      If IQ impairments is absent in the signal to be analyzed, you may disable IQ impairments estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ impairments estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccIQImpairmentsEstimationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetIQImpairmentsEstimationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetIQImpairmentsEstimationEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to estimate the IQ impairments such as IQ gain imbalance and quadrature skew.      If IQ impairments is absent in the signal to be analyzed, you may disable IQ impairments estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ impairments estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to estimate the IQ impairments such as IQ gain imbalance and quadrature skew.      If IQ impairments is absent in the signal to be analyzed, you may disable IQ impairments estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ impairments estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccIQImpairmentsEstimationEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetMagnitudeAndPhaseErrorEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMagnitudeAndPhaseErrorEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to measure the magnitude and the phase error.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to measure the magnitude and the phase error.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMagnitudeAndPhaseErrorEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMagnitudeAndPhaseErrorEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMagnitudeAndPhaseErrorEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to measure the magnitude and the phase error.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to measure the magnitude and the phase error.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMagnitudeAndPhaseErrorEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetEvmReferenceDataSymbolsMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetEvmReferenceDataSymbolsMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmReferenceDataSymbolsMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetEvmReferenceDataSymbolsMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSynchronizationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement is performed from slot or frame boundary.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement is performed from slot or frame boundary.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSynchronizationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode.Slot" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSynchronizationMode" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement is performed from slot or frame boundary.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement is performed from slot or frame boundary.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSynchronizationMode" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode.Slot" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetMeasurementLengthUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementLengthUnit" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit" nireturnvaluetype="System.Int32">

         <summary>
            Gets the units in which measurement offset and measurement length are specified.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the units in which measurement offset and measurement length are specified.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementLengthUnit" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit.Slot" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLengthUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementLengthUnit" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit" nireturnvaluetype="System.Int32">

         <summary>
            Sets the units in which measurement offset and measurement length are specified.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the units in which measurement offset and measurement length are specified.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementLengthUnit" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit.Slot" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetMeasurementOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the measurement offset to skip from the synchronization boundary. The synchronization boundary is specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode)" crefType="FullyQualified" /> method. The unit for this is specified by ModAcc Measurement Length Unit.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the measurement offset to skip from the synchronization boundary. The synchronization boundary is specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode)" crefType="FullyQualified" /> method. The unit for this is specified by ModAcc Measurement Length Unit.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the measurement offset to skip from the synchronization boundary. The synchronization boundary is specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode)" crefType="FullyQualified" /> method. The unit for this is specified by ModAcc Measurement Length Unit.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the measurement offset to skip from the synchronization boundary. The synchronization boundary is specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode)" crefType="FullyQualified" /> method. The unit for this is specified by ModAcc Measurement Length Unit.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementOffset" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetMeasurementLength(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementLength" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the measurement length in units specified by Measurement Length Unit method.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the measurement length in units specified by Measurement Length Unit method.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementLength" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLength(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementLength" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the measurement length in units specified by Measurement Length Unit method.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the measurement length in units specified by Measurement Length Unit method.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementLength" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetSpectrumInverted(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpectrumInverted" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the spectrum of the signal being measured  is inverted. This happens when I and Q component of the baseband complex signal is swapped.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the spectrum of the signal being measured  is inverted. This happens when I and Q component of the baseband complex signal is swapped.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSpectrumInverted" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSpectrumInverted(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSpectrumInverted" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the spectrum of the signal being measured  is inverted. This happens when I and Q component of the baseband complex signal is swapped.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the spectrum of the signal being measured  is inverted. This happens when I and Q component of the baseband complex signal is swapped.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSpectrumInverted" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetChannelEstimationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetChannelEstimationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the method used for channel estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the method used for channel estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccChannelEstimationType" crefType="PartiallyQualified" /> attribute.The default value is  Reference+Data.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetChannelEstimationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetChannelEstimationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccChannelEstimationType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the method used for channel estimation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the method used for channel estimation.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccChannelEstimationType" crefType="PartiallyQualified" /> attribute.The default value is  Reference+Data.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetPhaseTrackingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPhaseTrackingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether phase tracking is enabled.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether phase tracking is enabled.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccPhaseTrackingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetPhaseTrackingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetPhaseTrackingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether phase tracking is enabled.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether phase tracking is enabled.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccPhaseTrackingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetTimingTrackingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether timing tracking is enabled.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether timing tracking is enabled.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccTimingTrackingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetTimingTrackingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether timing tracking is enabled.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether timing tracking is enabled.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccTimingTrackingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetEvmUnit" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit" nireturnvaluetype="System.Int32">

         <summary>
            Gets the units of the EVM results.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the units of the EVM results.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccEvmUnit" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetEvmUnit" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit" nireturnvaluetype="System.Int32">

         <summary>
            Sets the units of the EVM results.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the units of the EVM results.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccEvmUnit" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindowType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT window type used for EVM calculation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the FFT window type used for EVM calculation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindowType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT window type used for EVM calculation.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the FFT window type used for EVM calculation. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetFftWindowOffset(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindowOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the position of the FFT window used to calculate the EVM when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />. The offset is expressed as a percentage of the cyclic prefix length. If you set this method to 0, the EVM window starts at the end of cyclic prefix. If you set this method to 100, the EVM window starts at the beginning of cyclic prefix.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the position of the FFT window used to calculate the EVM when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />. The offset is expressed as a percentage of the cyclic prefix length. If you set this method to 0, the EVM window starts at the end of cyclic prefix. If you set this method to 100, the EVM window starts at the beginning of cyclic prefix.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowOffset" crefType="PartiallyQualified" /> attribute.The default value is 50. Valid values are 0 to 100, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowOffset(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindowOffset" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the position of the FFT window used to calculate the EVM when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />. The offset is expressed as a percentage of the cyclic prefix length. If you set this method to 0, the EVM window starts at the end of cyclic prefix. If you set this method to 100, the EVM window starts at the beginning of cyclic prefix.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the position of the FFT window used to calculate the EVM when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />. The offset is expressed as a percentage of the cyclic prefix length. If you set this method to 0, the EVM window starts at the end of cyclic prefix. If you set this method to 100, the EVM window starts at the beginning of cyclic prefix.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowOffset" crefType="PartiallyQualified" /> attribute.The default value is 50. Valid values are 0 to 100, inclusive.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetFftWindowLength(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindowLength" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT window length (W). This value is expressed as a percentage of the cyclic prefix length. This method is used when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.Type3GPP" crefType="PartiallyQualified" />, where it is needed to calculate the EVM using two different FFT window positions, Delta_C-W/2, and Delta_C+W/2.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the FFT window length (W). This value is expressed as a percentage of the cyclic prefix length. This method is used when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.Type3GPP" crefType="PartiallyQualified" />, where it is needed to calculate the EVM using two different FFT window positions, Delta_C-W/2, and Delta_C+W/2.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowLength" crefType="PartiallyQualified" /> attribute.The default value is -1. Valid values range from -1 to 100, inclusive. When this property is set to -1, the measurement automatically sets the value of this property to the recommended value as specified in the Annexe F.5 of <em>3GPP TS 38.101-2</em> specification for uplink and Annexe B.5.2 and C.5.2 of <em>3GPP TS 38.104</em> specification for downlink.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowLength(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindowLength" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT window length (W). This value is expressed as a percentage of the cyclic prefix length. This method is used when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.Type3GPP" crefType="PartiallyQualified" />, where it is needed to calculate the EVM using two different FFT window positions, Delta_C-W/2, and Delta_C+W/2.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the FFT window length (W). This value is expressed as a percentage of the cyclic prefix length. This method is used when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.Type3GPP" crefType="PartiallyQualified" />, where it is needed to calculate the EVM using two different FFT window positions, Delta_C-W/2, and Delta_C+W/2.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowLength" crefType="PartiallyQualified" /> attribute.The default value is -1. Valid values range from -1 to 100, inclusive. When this property is set to -1, the measurement automatically sets the value of this property to the recommended value as specified in the Annexe F.5 of <em>3GPP TS 38.101-2</em> specification for uplink and Annexe B.5.2 and C.5.2 of <em>3GPP TS 38.104</em> specification for downlink.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetDCSubcarrierRemovalEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDCSubcarrierRemovalEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the DC subcarrier is removed from the EVM results.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the DC subcarrier is removed from the EVM results.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccDCSubcarrierRemovalEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetDCSubcarrierRemovalEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDCSubcarrierRemovalEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the DC subcarrier is removed from the EVM results.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the DC subcarrier is removed from the EVM results.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccDCSubcarrierRemovalEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetCommonClockSourceEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCommonClockSourceEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether same reference clock is used for local oscillator and digital-to-analog converter. When same reference clock is used the Carrier Frequency Offset is proportional to Sample Clock Error.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether same reference clock is used for local oscillator and digital-to-analog converter. When same reference clock is used the Carrier Frequency Offset is proportional to Sample Clock Error.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccCommonClockSourceEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCommonClockSourceEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCommonClockSourceEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether same reference clock is used for local oscillator and digital-to-analog converter. When same reference clock is used the Carrier Frequency Offset is proportional to Sample Clock Error.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether same reference clock is used for local oscillator and digital-to-analog converter. When same reference clock is used the Carrier Frequency Offset is proportional to Sample Clock Error.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccCommonClockSourceEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCommonClockSourceEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetEvmWithExclusionPeriodEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetEvmWithExclusionPeriodEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmWithExclusionPeriodEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetEvmWithExclusionPeriodEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="value">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetSpectralFlatnessCondition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpectralFlatnessCondition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition" nireturnvaluetype="System.Int32">

         <summary>
            Gets the test condition for Spectral Flatness measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the test condition for Spectral Flatness measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSpectralFlatnessCondition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSpectralFlatnessCondition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSpectralFlatnessCondition" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition" nireturnvaluetype="System.Int32">

         <summary>
            Sets the test condition for Spectral Flatness measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the test condition for Spectral Flatness measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSpectralFlatnessCondition" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetCompositeResultsIncludeDmrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositeResultsIncludeDmrs" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the DMRS resource elements are included for composite EVM and magnitude and phase error results and traces.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the DMRS resource elements are included for composite EVM and magnitude and phase error results and traces.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCompositeResultsIncludeDmrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs)" crefType="FullyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCompositeResultsIncludeDmrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCompositeResultsIncludeDmrs" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the DMRS resource elements are included for composite EVM and magnitude and phase error results and traces.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the DMRS resource elements are included for composite EVM and magnitude and phase error results and traces.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCompositeResultsIncludeDmrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs)" crefType="FullyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludeDmrs.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetCompositeResultsIncludePtrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositeResultsIncludePtrs" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the PTRS resource elements are included for composite EVM and magnitude and phase error results and traces.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the PTRS resource elements are included for composite EVM and magnitude and phase error results and traces.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCompositeResultsIncludePtrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs)" crefType="FullyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCompositeResultsIncludePtrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetCompositeResultsIncludePtrs" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the PTRS resource elements are included for composite EVM and magnitude and phase error results and traces.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the PTRS resource elements are included for composite EVM and magnitude and phase error results and traces.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetCompositeResultsIncludePtrs(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs)" crefType="FullyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccCompositeResultsIncludePtrs.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Enables averaging for the measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Enables averaging for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Enables averaging for the measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Enables averaging for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the traces to be stored and retrieved after performing the ModAcc measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the ModAcc measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the traces to be stored and retrieved after performing the ModAcc measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the ModAcc measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum number of threads used for parallelism for the ModAcc measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the maximum number of threads used for parallelism for the ModAcc measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum number of threads used for parallelism for the ModAcc measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the maximum number of threads used for parallelism for the ModAcc measurement. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.ConfigureReferenceWaveform(System.String,NationalInstruments.ComplexWaveform{NationalInstruments.ComplexSingle})" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureReferenceWaveform" nihasget="0" nihasset="0" niparameters="selectorString,referenceWaveform" niparametertypes="System.String,NationalInstruments.ComplexWaveform`1[[NationalInstruments.ComplexSingle, NationalInstruments.Common, Version=19.0.40.49152, Culture=neutral, PublicKeyToken=dc6ad606294fc298]]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="referenceWaveform">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.GetTimingTrackingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>
            Gets whether timing tracking is enabled.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether timing tracking is enabled.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccTimingTrackingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetTimingTrackingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>
            Sets whether timing tracking is enabled.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether timing tracking is enabled.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccTimingTrackingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccDCSubcarrierRemovalEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the DC subcarrier is removed from the EVM results.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The DC subcarrier is present in the EVM results.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccDCSubcarrierRemovalEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The DC subcarrier is removed from the EVM results.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccEvmReferenceDataSymbolsMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode.AcquiredWaveform" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcquiredWaveform" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmReferenceDataSymbolsMode.ReferenceWaveform" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceWaveform" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccEvmUnit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the units of the EVM results.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Percentage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The EVM is reported as a percentage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="dB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The EVM is reported in dB.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccEvmWithExclusionPeriodEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            missing content
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmWithExclusionPeriodEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccFftWindowType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the FFT window type used for EVM calculation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.Type3GPP" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Type3GPP" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The maximum EVM between the start window position and the end window position is returned according to the 3GPP specification. The FFT window positions are specified by the  method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TypeCustom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Only one FFT window position is used for the EVM calculation. FFT window position is specified by <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowOffset(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccFrequencyErrorEstimation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the operation mode of frequency error estimation.      If frequency error is absent in the signal to be analyzed, you may disable frequency estimation to reduce measurement time or to avoid measurement inaccuracy due to error in frequency error estimation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Frequency error estimation and correction is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Estimate and correct frequency error of range +/- half subcarrier spacing.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFrequencyErrorEstimation.Wide" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Wide" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Estimate and correct frequency error of range +/- half resource block when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />, or range +/-  number of guard subcarrier when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccIQImpairmentsEstimationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to estimate the IQ impairments such as IQ gain imbalance and quadrature skew.      If IQ impairments is absent in the signal to be analyzed, you may disable IQ impairments estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ impairments estimation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that IQ impairments estimation is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQImpairmentsEstimationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that IQ impairments estimation is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccIQOriginOffsetEstimationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to estimate the IQ origin offset.      If IQ origin offset is absent in the signal to be analyzed, you may disable IQ origin offset estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ origin offset estimation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that IQ origin offset estimation and correction is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccIQOriginOffsetEstimationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that IQ origin offset estimation and correction is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to measure the magnitude and the phase error.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that magnitude error and phase error results computation is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMagnitudeAndPhaseErrorEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that magnitude error and phase error results computation is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccMeasurementLengthUnit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the units in which measurement offset and measurement length are specified.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit.Slot" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Slot" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement offset and measurement length are specified in units of slots.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit.Subframe" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Subframe" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement offset and measurement length are specified in units of subframes.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMeasurementLengthUnit.Time" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Time" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement offset and measurement length are specified in seconds. Specify the measurement offset and length in multiples of 1 ms * (15 kHz/minimum subcarrier spacing of all carriers). All slots within this notional time duration are analysed.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccMulticarrierFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to use the filter in single carrier configurations to minimize leakage into the carrier. Measurement ignores this method, if number of carriers is set to more than 1 or if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />, where in the multi carrier filter will always be used.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement filters out unwanted emissions.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Measurement doesn't use the filter.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccPhaseTrackingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether phase tracking is enabled.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The phase tracking is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccPhaseTrackingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The phase tracking is done per symbol.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to fetch and read the ModAcc measurement results.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositeRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositeRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length. If ModAcc Composite Results Include DMRS method and ModAcc Composite Results Include PTRS method are set to False, EVM is computed only for the shared channel.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length. If ModAcc Composite Results Include DMRS method and ModAcc Composite Results Include PTRS method are set to False, EVM is computed only for the shared channel.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositeRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length. If ModAcc Composite Results Include DMRS method and ModAcc Composite Results Include PTRS method are set to False, EVM is computed only for the shared channel.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length. If ModAcc Composite Results Include DMRS method and ModAcc Composite Results Include PTRS method are set to False, EVM is computed only for the shared channel.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakEvmBwpIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakEvmBwpIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the bandwidth part index where ModAcc Results Max Pk Composite EVM occurs.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the bandwidth part index where ModAcc Results Max Pk Composite EVM occurs.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmBwpIndex" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakEvmSlotIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakEvmSlotIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the slot index where ModAcc Results Max Pk Composite EVM occurs.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the slot index where ModAcc Results Max Pk Composite EVM occurs.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmSlotIndex" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakEvmSymbolIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakEvmSymbolIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the symbol index where ModAcc Results Max Pk Composite EVM occurs.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the symbol index where ModAcc Results Max Pk Composite EVM occurs.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmSymbolIndex" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakEvmSubcarrierIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakEvmSubcarrierIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the subcarrier index where ModAcc Results Max Pk Composite EVM occurs.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the subcarrier index where ModAcc Results Max Pk Composite EVM occurs.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmSubcarrierIndex" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositeRmsMagnitudeErrorMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositeRmsMagnitudeErrorMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RMS mean value of magnitude error calculated over measurement length on all configured channels.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the RMS mean value of magnitude error calculated over measurement length on all configured channels.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositeRmsMagnitudeErrorMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakMagnitudeErrorMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakMagnitudeErrorMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak value of magnitude error calculated over measurement length on all configured channels.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the peak value of magnitude error calculated over measurement length on all configured channels.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakMagnitudeErrorMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositeRmsPhaseErrorMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositeRmsPhaseErrorMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the RMS mean value of Phase error calculated over measurement length on all configured channels. This value is expressed in degrees.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the RMS mean value of Phase error calculated over measurement length on all configured channels. This value is expressed in degrees.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositeRmsPhaseErrorMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetCompositePeakPhaseErrorMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetCompositePeakPhaseErrorMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak value of Phase error calculated over measurement length on all configured channels. This value is expressed in degrees.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the peak value of Phase error calculated over measurement length on all configured channels. This value is expressed in degrees.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakPhaseErrorMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSchSymbolPowerMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSchSymbolPowerMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value (over <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLength(System.String,System.Double)" crefType="FullyQualified" />) of power calculated on OFDM symbols allocated only with the shared channel.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the mean value (over <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLength(System.String,System.Double)" crefType="FullyQualified" />) of power calculated on OFDM symbols allocated only with the shared channel.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSchSymbolPowerMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSchDetectedModulationType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSchDetectedModulationType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the modulation of the shared channel user data if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />; otherwise, returns the configured modulation of the shared user data.      In case of downlink test model, the modulation type specified by the 3GPP standard is returned.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">
            Upon return, contains the modulation of the shared channel user data if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />; otherwise, returns the configured modulation of the shared user data.      In case of downlink test model, the modulation type specified by the 3GPP standard is returned.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSchDetectedModulationType" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPuschDataRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDataRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on PUSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on PUSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDataRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPuschDataPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDataPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PUSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length on PUSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDataPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPuschDmrsRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on PUSCH DMRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on PUSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDmrsRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPuschDmrsPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschDmrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PUSCH DMRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length on PUSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDmrsPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPuschPtrsRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on PUSCH PTRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on PUSCH PTRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschPtrsRmsEvmMean" crefType="PartiallyQualified" /> attribute.Use "user(l)" or "bwp(m)" or "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)/bwp(m)/user(l)" as the selector string to read this result.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPuschPtrsPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPuschPtrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PUSCH PTRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length on PUSCH PTRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschPtrsPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschQpskRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschQpskRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on all  QPSK modulated PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on all  QPSK modulated PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschQpskRmsEvmMean" crefType="PartiallyQualified" /> attribute.Use "bwp(m)" or "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)/bwp(m)" as the selector string to read this result.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdsch16QamRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdsch16QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on all  16 QAM modulated PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on all  16 QAM modulated PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch16QamRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdsch64QamRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdsch64QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on all  64 QAM modulated PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on all  64 QAM modulated PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch64QamRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdsch256QamRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdsch256QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on all  256 QAM modulated PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on all  256 QAM modulated PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch256QamRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdsch1024QamRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdsch1024QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on all 1024 QAM modulated PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on all 1024 QAM modulated PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch1024QamRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschDataRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDataRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDataRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschDataPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDataPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PDSCH data symbols.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length on PDSCH data symbols.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDataPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschDmrsRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on PDSCH DMRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on PDSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDmrsRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschDmrsPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschDmrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PDSCH DMRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length on PDSCH DMRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDmrsPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschPtrsRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs calculated over measurement length on PDSCH PTRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the mean value of RMS EVMs calculated over measurement length on PDSCH PTRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschPtrsRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPdschPtrsPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPdschPtrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PDSCH PTRS.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the maximum value of peak EVMs calculated over measurement length on PDSCH PTRS.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschPtrsPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPssRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPssRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs computed over measurement length on PSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the mean value of RMS EVMs computed over measurement length on PSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPssRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPssPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPssPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on PSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the maximum value of peak EVMs calculated over measurement length on PSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPssPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSssRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSssRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value of RMS EVMs computed over measurement length on SSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the mean value of RMS EVMs computed over measurement length on SSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSssRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSssPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSssPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value of peak EVMs calculated over measurement length on SSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the maximum value of peak EVMs calculated over measurement length on SSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSssPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPbchDataRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPbchDataRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value calculated over measurement length of RMS EVMs calculated on PBCH data symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the mean value calculated over measurement length of RMS EVMs calculated on PBCH data symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDataRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPbchDataPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPbchDataPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value calculated over measurement length of peak EVMs calculated on PBCH data symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the maximum value calculated over measurement length of peak EVMs calculated on PBCH data symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDataPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPbchDmrsRmsEvmMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPbchDmrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the mean value calculated over measurement length of RMS EVMs calculated on PBCH DMRS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the mean value calculated over measurement length of RMS EVMs calculated on PBCH DMRS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDmrsRmsEvmMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetPbchDmrsPeakEvmMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPbchDmrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum value calculated over measurement length of peak EVMs calculated on PBCH DMRS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the maximum value calculated over measurement length of peak EVMs calculated on PBCH DMRS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDmrsPeakEvmMaximum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetInBandEmissionMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetInBandEmissionMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets In-Band Emission Margin of the component carrier. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains In-Band Emission Margin of the component carrier. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsInBandEmissionMargin" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSpectralFlatnessRange1MaximumToRange1Minimum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpectralFlatnessRange1MaximumToRange1Minimum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak-to-peak ripple of the magnitude of EVM equalizer coefficients within Range1 for the measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the peak-to-peak ripple of the magnitude of EVM equalizer coefficients within Range1 for the measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange1MaximumToRange1Minimum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSpectralFlatnessRange2MaximumToRange2Minimum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpectralFlatnessRange2MaximumToRange2Minimum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak-to-peak ripple of the magnitude of EVM equalizer coefficients within Range2 for the Measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification.  This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the peak-to-peak ripple of the magnitude of EVM equalizer coefficients within Range2 for the Measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification.  This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange2MaximumToRange2Minimum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSpectralFlatnessRange1MaximumToRange2Minimum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpectralFlatnessRange1MaximumToRange2Minimum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak-to-peak ripple of the EVM equalizer coefficients from maximum in Range1 to minimum in Range2 for the Measurement unit that has the worst ripple margin among all four ripple results defined in 3section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the peak-to-peak ripple of the EVM equalizer coefficients from maximum in Range1 to minimum in Range2 for the Measurement unit that has the worst ripple margin among all four ripple results defined in 3section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange1MaximumToRange2Minimum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSpectralFlatnessRange2MaximumToRange1Minimum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpectralFlatnessRange2MaximumToRange1Minimum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak-to-peak ripple of the EVM equalizer coefficients from maximum in Range2 to minimum in Range1 for the Measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the peak-to-peak ripple of the EVM equalizer coefficients from maximum in Range2 to minimum in Range1 for the Measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange2MaximumToRange1Minimum" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSubblockInBandEmissionMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockInBandEmissionMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets In-Band Emission Margin of the subblock's aggregated bandwidth. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains In-Band Emission Margin of the subblock's aggregated bandwidth. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockInBandEmissionMargin" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetComponentCarrierFrequencyErrorMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierFrequencyErrorMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the estimated carrier frequency offset averaged over measurement length. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the estimated carrier frequency offset averaged over measurement length. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierFrequencyErrorMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetComponentCarrierSymbolClockErrorMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierSymbolClockErrorMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the estimated sample clock error averaged over measurement length. This value is expressed in ppm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the estimated sample clock error averaged over measurement length. This value is expressed in ppm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierSymbolClockErrorMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetComponentCarrierIQOriginOffsetMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierIQOriginOffsetMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the estimated IQ origin offset averaged over measurement length.  This value is expressed in dBc.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the estimated IQ origin offset averaged over measurement length.  This value is expressed in dBc.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierIQOriginOffsetMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetComponentCarrierIQGainImbalanceMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierIQGainImbalanceMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the estimated IQ gain imbalance averaged over measurement length. This value is expressed in dB. IQ gain imbalance is the ratio of the amplitude of the I component to the Q component of the IQ signal being measured.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the estimated IQ gain imbalance averaged over measurement length. This value is expressed in dB. IQ gain imbalance is the ratio of the amplitude of the I component to the Q component of the IQ signal being measured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierIQGainImbalanceMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetComponentCarrierQuadratureErrorMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetComponentCarrierQuadratureErrorMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the estimated quadrature error averaged over measurement length. This value is expressed in degrees. Quadrature error is the measure of skewness in degree of the I component with respect to the Q component of the IQ signal being measured.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the estimated quadrature error averaged over measurement length. This value is expressed in degrees. Quadrature error is the measure of skewness in degree of the I component with respect to the Q component of the IQ signal being measured.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierQuadratureErrorMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSubblockLOComponentCarrierIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockLOComponentCarrierIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the index of the component carrier that includes the LO of the transmitter according to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties. If the LO of the transmitter doesn't fall into any component carrier of the subblock, the method returns -1.  This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the index of the component carrier that includes the LO of the transmitter according to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties. If the LO of the transmitter doesn't fall into any component carrier of the subblock, the method returns -1.  This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockLOComponentCarrierIndex" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSubblockLOSubcarrierIndex(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockLOSubcarrierIndex" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the subcarrier index within the respective component carrier where the transmitter LO is located. Due to its dependence on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties, the value can be fractional, and the LO might reside in between subcarriers of a component carrier. This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the subcarrier index within the respective component carrier where the transmitter LO is located. Due to its dependence on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties, the value can be fractional, and the LO might reside in between subcarriers of a component carrier. This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockLOSubcarrierIndex" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.GetSubblockIQOriginOffsetMean(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockIQOriginOffsetMean" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the estimated IQ origin offset averaged over measurement length in the subblock. This value is expressed in dBc. This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the estimated IQ origin offset averaged over measurement length in the subblock. This value is expressed in dBc. This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockIQOriginOffsetMean" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschDemodulatedBits(System.String,System.Double,System.SByte[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschDemodulatedBits" nihasget="0" nihasset="0" niparameters="selectorString,timeout,bits" niparametertypes="System.String,System.Double,ref System.SByte[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the recovered bits during EVM calculation. The bits of different slots in the measurement length are concatenated. <br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="bits">
            Upon return, contains an array of the recovered bits during EVM calculation.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschDataConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschDataConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschDataConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PUSCH Data Constellation trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "user(k)" or "carrier(l)" or "subblock(n)" or "subblock(n)/carrier(l)/user(k)" as the selector string to read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="puschDataConstellation">
            Upon return, contains the PUSCH data constellation trace.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschDmrsConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschDmrsConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschDmrsConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PUSCH DMRS trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "user(k)" or "carrier(l)" or "subblock(n)" or "subblock(n)/carrier(l)/user(k)" as the selector string to read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="puschDmrsConstellation">
            Upon return, contains the PDSCH DMRS constellation trace.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschPtrsConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschPtrsConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschPtrsConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PUSCH PTRS trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "user(k)" or "carrier(l)" or "subblock(n)" or "subblock(n)/carrier(l)/user(k)" as the selector string to read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="puschPtrsConstellation">
            Upon return, contains the PUSCH PTRS constellation trace.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchRmsEvmPerSubcarrierMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchRmsEvmPerSubcarrierMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rmsEvmPerSubcarrierMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the EVM of each allocated subcarrier averaged across all the symbols within the measurement length. <br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="rmsEvmPerSubcarrierMean">
            Upon return, contains the EVM of each allocated subcarrier averaged across all the symbols within the measurement length.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchRmsEvmPerSlotMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchRmsEvmPerSlotMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rmsEvmPerSlotMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the EVM of each slot averaged across all the symbols and all the allocated subcarriers within each slot.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="rmsEvmPerSlotMean">
            Upon return, contains the EVM of each slot averaged across all the symbols and all the allocated subcarriers within each slot.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchRmsEvmPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchRmsEvmPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rmsEvmPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the EVM on each symbol within the measurement length averaged across all the allocated subcarriers.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="rmsEvmPerSymbolMean">
            Upon return, contains the EVM on each symbol within the measurement length averaged across all the allocated subcarriers.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPeakEvmPerSubcarrierMaximumTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPeakEvmPerSubcarrierMaximumTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,peakEvmPerSubcarrierMaximum" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the peak value of EVM  for each allocated subcarrier computed across all the symbols within the measurement length. <br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="peakEvmPerSubcarrierMaximum">
            Upon return, contains the peak value of EVM  for each allocated subcarrier computed across all the symbols within the measurement length. .<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPeakEvmPerSlotMaximumTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPeakEvmPerSlotMaximumTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,peakEvmPerSlotMaximum" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the peak value of EVM  for each slot computed across all the symbols and all the allocated subcarriers.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="peakEvmPerSlotMaximum">
            Upon return, contains the peak value of EVM  for each slot computed across all the symbols and all the allocated subcarriers.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPeakEvmPerSymbolMaximumTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPeakEvmPerSymbolMaximumTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,peakEvmPerSymbolMaximum" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the peak value of EVM  for each symbol computed across all the allocated subcarriers.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="peakEvmPerSymbolMaximum">
            Upon return, contains the peak value of EVM  for each symbol computed across all the allocated subcarriers.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchRmsEvmHighPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchRmsEvmHighPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rmsEvmHighPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the EVM per symbol trace for all confgured slots. The EVM is obtained by using FFT window position Delta_C+W/2.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="rmsEvmHighPerSymbolMean">
            Upon return, contains the EVM per symbol trace for all confgured slots.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchRmsEvmLowPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchRmsEvmLowPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,rmsEvmLowPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the EVM per symbol trace for all confgured slots. The EVM is obtained by using FFT window position Delta_C-W/2.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="rmsEvmLowPerSymbolMean">
            Upon return, contains the EVM per symbol trace for all confgured slots.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchInBandEmissionTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchInBandEmissionTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,inBandEmission,inBandEmissionMask" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the in-band emission trace and limits trace for the component carrier. In-band emission is measured as the ratio of the power in non-allocated resource blocks to the power in the allocated resource blocks averaged over the measurement interval. The IBE for various regions (general, carrier leakage, and I/Q Image) are obtained and concatenated to form a composite trace and the limits are defined in section 6.4.2.3 of <em>3GPP 38.101-1</em>, and section 6.4.2.3 of <em>3GPP 38.101-2</em>. The trace is not returned when there is full allocation of bandwidth, or there is clustered PUSCH or there is more than one active component carrier.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="inBandEmission">
            Upon return, contains the in-band emission margin.<br />
         </param>
         <param name="inBandEmissionMask">
            Upon return, contains the in-band emission mask.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchCompositeMagnitudeAndPhaseErrorArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchCompositeMagnitudeAndPhaseErrorArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,compositeRmsMagnitudeErrorMean,compositePeakMagnitudeErrorMaximum,compositeRmsPhaseErrorMean,compositePeakPhaseErrorMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="compositeRmsMagnitudeErrorMean">missing content</param>
         <param name="compositePeakMagnitudeErrorMaximum">missing content</param>
         <param name="compositeRmsPhaseErrorMean">missing content</param>
         <param name="compositePeakPhaseErrorMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSubblockInBandEmissionTrace(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSubblockInBandEmissionTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,SubblockInBandEmission,SubblockInBandEmissionMask,SubblockInBandEmissionRBIndices" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns the in-band emission trace and limit trace for the the subblocks aggregated bandwidth. In-band emission is measured as the ratio of the power in non-allocated resource blocks to the power in the allocated resource blocks averaged over the measurement interval. The IBE for various regions (general, carrier leakage, and I/Q Image) are obtained and concatenated to form a composite trace and the limits are defined in section 6.4.2.3 of <em>3GPP 38.101-1</em>, and section 6.4.2.3 of <em>3GPP 38.101-2</em>. The trace is not returned when there is full allocation of bandwidth, or there is clustered PUSCH or there is more than one active component carrier.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="SubblockInBandEmission">
            Upon return, contains the array of subblock in-band emission measurement trace.
            <br />
         </param>
         <param name="SubblockInBandEmissionMask">
            Upon return, contains the array of subblock in-band emission mask trace.
            <br />
         </param>
         <param name="SubblockInBandEmissionRBIndices">
            Upon return, contains the array of resource block indices for the subblock in-band emission trace. It can have non integer values depending upon the spacing between carriers.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSpectralFlatnessTrace(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@,NationalInstruments.Spectrum{System.Single}@,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectralFlatnessTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectralFlatness,spectralFlatnessLowerMask,spectralFlatnessUpperMask" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Returns the spectral flatness, upper mask, and lower mask traces. Spectral flatness is the magnitude of equalizer coefficients at each allocated subcarrier. Lower and upper masks are derived from section 6.5.2.4.5 of <em>3GPP TS 38.521-1</em> specification. <br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="spectralFlatness">
            Upon return, contains the spectral flatness.<br />
         </param>
         <param name="spectralFlatnessLowerMask">
            Upon return, contains the lower mask of the spectral flatness.<br />
         </param>
         <param name="spectralFlatnessUpperMask">
            Upon return, contains the upper mask of the spectral flatness.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchCompositeEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchCompositeEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,compositeRmsEvmMean,compositePeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the composite EVM for ModAcc measurements. <br />
            Use "carrier(k)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="compositeRmsEvmMean">
            Upon return, contains the mean value of the RMS EVMs calculated on all configured channels over the slots specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLength(System.String,System.Double)" crefType="FullyQualified" /> method. When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage.When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
            <br />
         </param>
         <param name="compositePeakEvmMaximum">Upon return, contains the symbol index where the ModAcc maximum peak composite EVM occurs.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchFrequencyErrorMean(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchFrequencyErrorMean" nihasget="0" nihasset="0" niparameters="selectorString,timeout,frequencyErrorMean" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the estimated carrier frequency offset averaged over measurement length. This value is expressed in Hz.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read this result.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="frequencyErrorMean">
            Upon return, contains the estimated carrier frequency offset averaged over measurement length. This value is expressed in Hz.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchCompositeMagnitudeAndPhaseError(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchCompositeMagnitudeAndPhaseError" nihasget="0" nihasset="0" niparameters="selectorString,timeout,compositeRmsMagnitudeErrorMean,compositePeakMagnitudeErrorMaximum,compositeRmsPhaseErrorMean,compositePeakPhaseErrorMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="compositeRmsMagnitudeErrorMean">missing content</param>
         <param name="compositePeakMagnitudeErrorMaximum">missing content</param>
         <param name="compositeRmsPhaseErrorMean">missing content</param>
         <param name="compositePeakPhaseErrorMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchComponentCarrierIQImpairments(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchComponentCarrierIQImpairments" nihasget="0" nihasset="0" niparameters="selectorString,timeout,componentCarrierIQOriginOffsetMean,componentCarrierIQGainImbalanceMean,componentCarrierIQQuadratureErrorMean" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="componentCarrierIQOriginOffsetMean">missing content</param>
         <param name="componentCarrierIQGainImbalanceMean">missing content</param>
         <param name="componentCarrierIQQuadratureErrorMean">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschDataEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschDataEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschDataRmsEvmMean,puschDataPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="puschDataRmsEvmMean">missing content</param>
         <param name="puschDataPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschDmrsEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschDmrsEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschDmrsRmsEvmMean,puschDmrsPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="puschDmrsRmsEvmMean">missing content</param>
         <param name="puschDmrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschPtrsEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschPtrsEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschPtrsRmsEvmMean,puschPtrsPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="puschPtrsRmsEvmMean">missing content</param>
         <param name="puschPtrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPuschSymbolPower(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPuschSymbolPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,puschDataPowerMean,puschDmrsPowerMean,puschPtrsPowerMean" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="puschDataPowerMean">missing content</param>
         <param name="puschDmrsPowerMean">missing content</param>
         <param name="puschPtrsPowerMean">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDemodulatedBits(System.String,System.Double,System.SByte[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDemodulatedBits" nihasget="0" nihasset="0" niparameters="selectorString,timeout,bits" niparametertypes="System.String,System.Double,ref System.SByte[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the recovered bits during EVM calculation. The bits of different slots in the measurement length are concatenated. <br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="bits">
            Upon return, contains an array of the recovered bits during EVM calculation.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDmrsConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDmrsConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDmrsConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PDSCH DMRS trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "user(k)" or "carrier(l)" or "subblock(n)" or "subblock(n)/carrier(l)/user(k)" as the selector string to read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pdschDmrsConstellation">
            Upon return, contains the PDSCH DMRS constellation trace.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschPtrsConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschPtrsConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschPtrsConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PDSCH PTRS trace.<br />
            Use "user(k)" or "carrier(l)" or "subblock(n)" or "subblock(n)/carrier(l)/user(k)" as the selector string to read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pdschPtrsConstellation">
            Upon return, contains the PDSCH PTRS constellation trace.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschQpskConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschQpskConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,qpskConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PDSCH QPSK trace.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="qpskConstellation">
            Upon return, contains the QPSK constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdsch16QamConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdsch16QamConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,qam16Constellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PDSCH 16 QAM trace.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="qam16Constellation">
            Upon return, contains the 16 QAM constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdsch64QamConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdsch64QamConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,qam64Constellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PDSCH 64 QAM trace.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="qam64Constellation">
            Upon return, contains the 64 QAM constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdsch256QamConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdsch256QamConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,qam256Constellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PDSCH 256 QAM trace.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="qam256Constellation">
            Upon return, contains the 256 QAM constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdsch1024QamConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdsch1024QamConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,qam1024Constellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the PDSCH 1024 QAM constellation trace.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="qam1024Constellation">
            Upon return, contains the 1024 QAM constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPssConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPssConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pssConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the PSS constellation trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pssConstellation">
            Upon return, contains the PSS constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSssConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSssConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,sssConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the SSS constellation trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="sssConstellation">
            Upon return, contains the SSS constellation trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDataConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDataConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDataConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the PBCH data trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pbchDataConstellation">
            Upon return, contains the PBCH data trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDmrsConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDmrsConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDmrsConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the PBCH DMRS trace. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pbchDmrsConstellation">
            Upon return, contains the PBCH DMRS trace. <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDataConstellationTrace(System.String,System.Double,NationalInstruments.ComplexSingle[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDataConstellationTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDataConstellation" niparametertypes="System.String,System.Double,ref NationalInstruments.ComplexSingle[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the recovered PDSCH data constellation points. The constellation points of different slots in the measurement length is concatenated.<br />
            Use "user(k)" or "carrier(l)" or "subblock(n)" or "subblock(n)/carrier(l)/user(k)" as the selector string to read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and user number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0/user0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0/user0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildUserString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pdschDataConstellation">
            Upon return, contains the PDSCH data constellation trace.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschSymbolPowerArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschSymbolPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDataPowerMean,pdschDmrsPowerMean,pdschPtrsPowerMean" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschDataPowerMean">missing content</param>
         <param name="pdschDmrsPowerMean">missing content</param>
         <param name="pdschPtrsPowerMean">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDataEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDataEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDataRmsEvmMean,pdschDataPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschDataRmsEvmMean">missing content</param>
         <param name="pdschDataPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDmrsEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDmrsEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDmrsRmsEvmMean,pdschDmrsPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschDmrsRmsEvmMean">missing content</param>
         <param name="pdschDmrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschSymbolPower(System.String,System.Double,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschSymbolPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDataPowerMean,pdschDmrsPowerMean,pdschPtrsPowerMean" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschDataPowerMean">missing content</param>
         <param name="pdschDmrsPowerMean">missing content</param>
         <param name="pdschPtrsPowerMean">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDataEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDataEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDataRmsEvmMean,pdschDataPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschDataRmsEvmMean">missing content</param>
         <param name="pdschDataPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschDmrsEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschDmrsEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschDmrsRmsEvmMean,pdschDmrsPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschDmrsRmsEvmMean">missing content</param>
         <param name="pdschDmrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSpectralFlatnessArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectralFlatnessArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,range1MaximumToRange1Minimum,range2MaximumToRange2Minimum,range1MaximumToRange2Minimum,range2MaximumToRange1Minimum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="range1MaximumToRange1Minimum">missing content</param>
         <param name="range2MaximumToRange2Minimum">missing content</param>
         <param name="range1MaximumToRange2Minimum">missing content</param>
         <param name="range2MaximumToRange1Minimum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchInBandEmissionMarginArray(System.String,System.Double,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchInBandEmissionMarginArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,inBandEmissionMargin" niparametertypes="System.String,System.Double,ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="inBandEmissionMargin">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschPtrsEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschPtrsEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschPtrsRmsEvmMean,pdschPtrsPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschPtrsRmsEvmMean">missing content</param>
         <param name="pdschPtrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSpectralFlatness(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectralFlatness" nihasget="0" nihasset="0" niparameters="selectorString,timeout,range1MaximumToRange1Minimum,range2MaximumToRange2Minimum,range1MaximumToRange2Minimum,range2MaximumToRange1Minimum" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="range1MaximumToRange1Minimum">missing content</param>
         <param name="range2MaximumToRange2Minimum">missing content</param>
         <param name="range1MaximumToRange2Minimum">missing content</param>
         <param name="range2MaximumToRange1Minimum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchInBandEmissionMargin(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchInBandEmissionMargin" nihasget="0" nihasset="0" niparameters="selectorString,timeout,inBandEmissionMargin" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="inBandEmissionMargin">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPdschPtrsEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPdschPtrsEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pdschPtrsRmsEvmMean,pdschPtrsPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pdschPtrsRmsEvmMean">missing content</param>
         <param name="pdschPtrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPssEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPssEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pssRmsEvmMean,pssPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pssRmsEvmMean">missing content</param>
         <param name="pssPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSssEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSssEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,sssRmsEvmMean,sssPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="sssRmsEvmMean">missing content</param>
         <param name="sssPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDataEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDataEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDataRmsEvmMean,pbchDataPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pbchDataRmsEvmMean">missing content</param>
         <param name="pbchDataPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDmrsEvmArray(System.String,System.Double,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDmrsEvmArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDmrsRmsEvmMean,pbchDmrsPeakEvmMaximum" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pbchDmrsRmsEvmMean">missing content</param>
         <param name="pbchDmrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPssEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPssEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pssRmsEvmMean,pssPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pssRmsEvmMean">missing content</param>
         <param name="pssPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSssEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSssEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,sssRmsEvmMean,sssPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="sssRmsEvmMean">missing content</param>
         <param name="sssPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDataEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDataEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDataRmsEvmMean,pbchDataPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pbchDataRmsEvmMean">missing content</param>
         <param name="pbchDataPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDmrsEvm(System.String,System.Double,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDmrsEvm" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDmrsRmsEvmMean,pbchDmrsPeakEvmMaximum" niparametertypes="System.String,System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">
         <exclude/>
         <summary>missing content</summary>
         <param name="selectorString">missing content</param>
         <param name="timeout">missing content</param>
         <param name="pbchDmrsRmsEvmMean">missing content</param>
         <param name="pbchDmrsPeakEvmMaximum">missing content</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPssRmsEvmPerSubcarrierMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPssRmsEvmPerSubcarrierMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pssRmsEvmPerSubcarrierMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean PSS RMS EVM of each subcarrier.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pssRmsEvmPerSubcarrierMean">
            Upon return, contains the RMS EVM of each subcarrier averaged across all the OFDM symbols allocated with PSS within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPssRmsEvmPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPssRmsEvmPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pssRmsEvmPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean PSS RMS EVM of each symbol.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pssRmsEvmPerSymbolMean">
            Upon return, contains the RMS EVM on each OFDM symbol averaged across all the defined subcarriers allocated with PSS within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSssRmsEvmPerSubcarrierMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSssRmsEvmPerSubcarrierMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,sssRmsEvmPerSubcarrierMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean SSS RMS EVM of each subcarrier.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="sssRmsEvmPerSubcarrierMean">
            Upon return, contains the RMS EVM of each subcarrier averaged across all the OFDM symbols allocated with SSS within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchSssRmsEvmPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSssRmsEvmPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,sssRmsEvmPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean SSS RMS EVM of each symbol.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="sssRmsEvmPerSymbolMean">
            Upon return, contains the RMS EVM on each OFDM symbol averaged across all the defined subcarriers allocated with SSS within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDataRmsEvmPerSubcarrierMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDataRmsEvmPerSubcarrierMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDataRmsEvmPerSubcarrierMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean PBCH data RMS EVM of each subcarrier.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pbchDataRmsEvmPerSubcarrierMean">
            Upon return, contains the RMS EVM of each subcarrier averaged across all the OFDM symbols allocated with PBCH data within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDataRmsEvmPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDataRmsEvmPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDataRmsEvmPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean PBCH data RMS EVM for each symbol.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pbchDataRmsEvmPerSymbolMean">
            Upon return, contains the RMS EVM on each OFDM symbol averaged across all the allocated subcarriers allocated with PBCH data within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDmrsRmsEvmPerSubcarrierMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDmrsRmsEvmPerSubcarrierMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDmrsRmsEvmPerSubcarrierMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean PBCH DMRS RMS EVM for each subcarrier.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pbchDmrsRmsEvmPerSubcarrierMean">
            Upon return, contains the RMS EVM of each subcarrier averaged across all the OFDM symbols allocated with PBCH DMRS within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccResults.FetchPbchDmrsRmsEvmPerSymbolMeanTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchPbchDmrsRmsEvmPerSymbolMeanTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,pbchDmrsRmsEvmPerSymbolMean" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the mean PBCH DMRS RMS EVM for each symbol.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="pbchDmrsRmsEvmPerSymbolMean">
            Upon return, contains the RMS EVM on each OFDM symbol averaged across all the allocated subcarriers allocated with PBCH DMRS within the measurement length. The unit of this EVM value is specified by the ModAccEvmUnit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccSpectralFlatnessCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the test condition for Spectral Flatness measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Frequency range and maximum ripple defined in the section 6.4.2.4.1, Table 6.4.2.4.1-1 of <em>3GPP 38.101-1</em> and section 6.4.2.4.1, Table 6.4.2.4.1-1 of <em>3GPP 38.101-2</em> are used.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectralFlatnessCondition.Extreme" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Extreme" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Frequency range and maximum ripple defined in the section 6.4.2.4.1, Table 6.4.2.4.1-2 of <em>3GPP 38.101-1</em> and section 6.4.2.4.1, Table 6.4.2.4.1-2 of <em>3GPP 38.101-2</em> are used.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccSpectrumInverted" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the spectrum of the signal being measured  is inverted. This happens when I and Q component of the baseband complex signal is swapped.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The signal being measured is not inverted.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSpectrumInverted.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The signal being measured is inverted and measurement will correct it by swapping the I and Q components.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccSymbolClockErrorEstimationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to estimate symbol clock error.      This method is ignored when the Common Clock Source Enabled method is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" /> and the Frequency Error Estimation method is Disabled, in which case, symbol clock error is not estimated.      If symbol clock error is absent in the signal to be analyzed, you may disable symbol clock error estimation to reduce measurement time or to avoid measurement inaccuracy due to error in symbol clock error estimation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that symbol clock error estimation and correction is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that symbol clock error estimation and correction is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccSynchronizationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement is performed from slot or frame boundary.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode.Slot" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Slot" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement is performed over the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLength(System.String,System.Double)" crefType="FullyQualified" /> starting at the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementOffset(System.String,System.Double)" crefType="FullyQualified" /> from the slot boundary. If you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />, the measurement expects the digital trigger at the slot boundary.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode.Frame" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Frame" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement is performed over the ModAcc Meas Length starting at ModAcc Meas Offset from the frame boundary. If you set the Trigger Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />, the measurement expects the digital trigger at the frame boundary.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModAccTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether timing tracking is enabled.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The time tracking is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccTimingTrackingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The time tracking is done per symbol.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXModTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>
            Specifies whether timing tracking is enabled.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>The time tracking is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModTimingTrackingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>The time tracking is done per symbol.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObw" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObw" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents the OBW measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXObw.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the OBW measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXObw.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the OBW measurement results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable averaging for the OBW measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed on a single acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The OBW measurement uses the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions over which the OBW measurement is averaged.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the OBW measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is averaged in a logarithmic scale.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The square root of the power spectrum is averaged.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The lowest power in the spectrum at each frequency bin is retained from one acquisition to the next. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the OBW measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetSpan(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSpan" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency search space to find the OBW. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency search space to find the OBW. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSpan" crefType="PartiallyQualified" /> attribute.The default value is 10 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement computes the RBW.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement computes the RBW. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement computes the RBW.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement computes the RBW. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterAutoBandwidth" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 10 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 10 kHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the shape of the digital RBW filter.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the shape of the digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType.Gaussian" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the shape of the digital RBW filter.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the shape of the digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType.Gaussian" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement sets the sweep time.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement sets the sweep time.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable averaging for the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable averaging for the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable averaging for the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable averaging for the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the traces to be stored and retrieved after performing the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the traces to be stored and retrieved after performing the OBW measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the OBW measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum number of threads used for parallelism for the OBW measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the maximum number of threads used for parallelism for the OBW measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum number of threads used for parallelism for the OBW measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the maximum number of threads used for parallelism for the OBW measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.ConfigureRbwFilter(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,rbwAuto,rbw,rbwFilterType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Configures the resolution bandwidth (RBW) filter.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="rbwAuto">Specifies whether the measurement computes the RBW.</param>
         <param name="rbw">
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <em>rbwAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </param>
         <param name="rbwFilterType">Specifies the shape of the RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Configures averaging for the OBW measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
         <param name="averagingCount">
            Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the sweep time.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="sweepTimeAuto">Specifies whether the measurement sets the sweep time.</param>
         <param name="sweepTimeInterval">
            Specifies the sweep time when you set the <em>sweepTimeAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the FFT window type to be used to reduce spectral leakage.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using flat top window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hanning window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hamming window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Gaussian window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman-Harris window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Kaiser-Bessel window type.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwRbwAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement computes the RBW.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement uses the RBW that you specify in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement computes the RBW.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the shape of the digital RBW filter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No RBW filtering is performed. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An RBW filter with a Gaussian response is applied.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>An RBW filter with a flat response is applied.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to fetch and read the OBW measurement results.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults.GetOccupiedBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOccupiedBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the bandwidth that occupies the specified percentage of the total power of the signal. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the bandwidth that occupies the specified percentage of the total power of the signal. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsOccupiedBandwidth" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults.GetAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the total power measured in the spectrum acquired by the measurement. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the total power measured in the spectrum acquired by the measurement. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults.GetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the start frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the start frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsStartFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults.GetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the stop frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz. Occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the stop frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz. Occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsStopFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the spectrum used for OBW measurements.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="spectrum">
            Upon return, contains the spectrum.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,occupiedBandwidth,absolutePower,startFrequency,stopFrequency" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the occupied bandwidth, absolute power, start frequency, and stop frequency of a component carrier or subblock.<br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="occupiedBandwidth">
            Upon return, contains the bandwidth that occupies the specified percentage of the total power of the signal. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<br /><em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em><br />
         </param>
         <param name="absolutePower">
            Upon return, contains the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="startFrequency">
            Upon return, contains the start frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz.
            <br />
         </param>
         <param name="stopFrequency">
            Upon return, contains the stop frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXObwSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement sets the sweep time.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement calculates the sweep time internally. For DL, the sweep time is calculated based on the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" /> method, and for UL, it uses a sweep time of 1 ms.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the configuration type of DMRS.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType.Type1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Type1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>One DMRS subcarrier alternates with one data subcarrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsConfigurationType.Type2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Type2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Two consecutive DMRS subcarriers alternate with four consecutive data subcarriers.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschDmrsDuration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the DMRS is single-symbol or double-symbol.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration.SingleSymbol" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SingleSymbol" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>There are no consecutive DMRS symbols in the slot.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsDuration.DoubleSymbol" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DoubleSymbol" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>There are one or more sets of two consecutive DMRS symbols in the slot.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode.CdmGroups" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CdmGroups" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PDSCH DMRS power is calculated based on the number of CDM groups.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsPowerMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PDSCH DMRS power is specified by you.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the 3GGP release version for PDSCH DMRS.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion.Release15" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Release15" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 3GGP release version of 15 for PDSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsReleaseVersion.Release16" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Release16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 3GGP release version of 16 for PDSCH DMRS.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured Scrambling ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode.CellID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CellID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PDSCH DMRS Scrambling ID is based on Cell ID.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschDmrsScramblingIDMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PDSCH DMRS Scrambling ID is specified by you.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschMappingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the mapping type of DMRS.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType.TypeA" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TypeA" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The first DMRS symbol index in a slot is either 2 or 3.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschMappingType.TypeB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TypeB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The first DMRS symbol index in a slot is 0.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the modulation scheme used in PDSCH channel of the signal being measured.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qpsk" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qpsk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a QPSK modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qam16" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 16 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qam64" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam64" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 64 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qam256" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam256" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 256 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschModulationType.Qam1024" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam1024" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 1024 QAM modulation scheme.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschPresentInSsbResourceBlock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the subset of RBs for certain symbols in a slot are occupied by SS/PBCH resources depending on the SS/PBCH block configuration. If this method is enabled, PDSCH RBs are allocated in the remaining symbols of this RB subset. If this method is disabled, any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The PDSCH RBs are allocated in the remaining symbols of the RB subset.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPresentInSsbResourceBlock.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschPtrsEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether PT-RS is present in the transmitted signal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Detection of PTRS in the transmitted signal is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Detection of PTRS in the transmitted signal is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPdschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated as defined in 3GPP specification or configured by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Standard" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The PTRS RE power scaling is computed as defined in the Table 4.1-2 of <em>3GPP TS 38.214</em> specification using the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetEpreRatioPort(System.String,System.Int32)" crefType="FullyQualified" /> method..
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The PTRS RE power scaling is given by the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPhaseCompensation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether phase compensation is disabled, auto-set by the measurement or set by the you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.Disabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Disabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No phase compensation is applied on the signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Phase compensation is applied on the signal using value of Center Frequency method as the phase compensation frequency.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Phase compensation is applied on the signal using value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensationFrequency(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPiBy2BpskPowerBoostEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the power boost for PI/2 BPSK signal when you set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified" />. This method is valid only for uplink direction.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Power boost for PI/2 BPSK modulation is not enabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPiBy2BpskPowerBoostEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Power boost for PI/2 BPSK modulation is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPropertyId" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies all the attribute identifiers.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SelectedPorts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SelectedPorts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the instrument port to be configured to acquire a signal. Use RFmxInstr_GetAvailablePorts function to get the valid port names.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the center frequency of the acquired RF signal for a single carrier. This value is expressed in Hz. For intraband carrier aggregation, this method specifies the reference frequency of a subblock. Depending on the Subblock Frequency Definition method, the center frequency can either be absolute or relative to first subblock's center frequency. All component carrier frequencies within the subblock are defined with respect to this frequency.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the reference level which represents the maximum expected power of the RF input signal. This value is expressed in dBm for RF devices and Vpk-pk for baseband devices.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ExternalAttenuation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ExternalAttenuation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the attenuation of a switch (or cable) connected to the RF IN connector of the signal analyzer. This value is expressed in dB. For more information about attenuation, refer to the Attenuation and Signal Levels topic for your device in the <em>NI RF Vector Signal Analyzers Help</em>.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceLevelHeadroom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceLevelHeadroom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the margin RFmx adds to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetReferenceLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The margin avoids clipping and overflow warnings if the input signal exceeds the configured reference level.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the type of trigger to be used for signal acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DigitalEdgeTriggerSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the source terminal for the digital edge trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DigitalEdgeTriggerEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the active edge for the trigger. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerSource" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the channel from which the device monitors the trigger. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the power level at which the device triggers. This value is expressed in dB when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevelType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Relative" crefType="PartiallyQualified" />; and in dBm when you set the IQ Power Edge Level Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerLevelType.Absolute" crefType="PartiallyQualified" />. The device asserts the trigger when the signal exceeds the level specified by the value of this method, taking into consideration the specified slope. This method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerLevelType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerLevelType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the reference for the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerLevel(System.String,System.Double)" crefType="FullyQualified" /> method. The IQ Power Edge Level Type method is used only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.IQPowerEdgeTriggerSlope" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdgeTriggerSlope" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the device asserts the trigger when the signal power is rising or when it is falling. The device asserts the trigger when the signal power exceeds the specified level with the slope you specify. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerDelay" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TriggerDelay" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the trigger delay time. This value is expressed in seconds. If the delay is negative, the measurement acquires pre-trigger samples. If the delay is positive, the measurement acquires post-trigger samples. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerMinimumQuietTimeMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement computes the minimum quiet time used for triggering. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TriggerMinimumQuietTimeDuration" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TriggerMinimumQuietTimeDuration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the time duration for which the signal must be quiet before the signal analyzer arms the I/Q power edge trigger. This value is expressed in seconds. If you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Rising" crefType="PartiallyQualified" />, the signal is quiet below the trigger level.  If you set the IQ Power Edge Slope method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope.Falling" crefType="PartiallyQualified" />, the signal is quiet above the trigger level.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.LinkDirection" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="LinkDirection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the link direction of the received signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.gNodeBCategory" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="gNodeBCategory" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the downlink gNodeB (base station) category. Refer to the <em>3GPP 38.104</em> specification for more information about gNodeB category.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TransmitAntennaToAnalyze" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TransmitAntennaToAnalyze" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the physical antenna that is currently connected to the analyzer.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PowerClass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PowerClass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the power class for the UE as specified in section 6.2 of <em>3GPP 38.101-1/2/3</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PiBy2BpskPowerBoostEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PiBy2BpskPowerBoostEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the power boost for PI/2 BPSK signal when you set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXFrequencyRange.Range1" crefType="PartiallyQualified" />. This method is valid only for uplink direction.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AutoResourceBlockDetectionEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AutoResourceBlockDetectionEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the values of modulation type, number of resource block clusters, resource block offsets, and number of resource blocks are auto-detected by the measurement or configured by you.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkChannelConfigurationMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DownlinkChannelConfigurationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the downlink channel configuration mode. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AutoIncrementCellIDEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AutoIncrementCellIDEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the cell ID of component carrier is auto calculated and configured by the measurement or configured by the user.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfSubblocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfSubblocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of subblocks configured in intraband non-contiguous carrier aggregation scenarios.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockFrequencyDefinition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SubblockFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies if the subblock center frequency definition is an absolute frequency or relative to the absolute frequency of the first subblock. This method is ignored for the first subblock and is considered to be absolute by the measurement. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockTransmitLOFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SubblockTransmitLOFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the frequency of the transmitters local oscillator. This value is expressed in Hz. The frequency is defined per subblock and relative to the respective subblock center frequency.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PhaseCompensationFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PhaseCompensationFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the frequency used for phase compensation of the signal when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetPhaseCompensation(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPhaseCompensation.UserDefined" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.FrequencyRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FrequencyRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to use channel bandwidth and subcarrier spacing configuration supported in the frequency range 1 (sub 6 GHz) or the frequency range 2 (above 24 GHz).</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.Band" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Band" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the evolved universal terrestrial radio access (E-UTRA) or NR operating frequency band of a subblock as specified in section 5.2 of the <em>3GPP 38.101-1/2/3</em> specification. Band determines the spectral flatness mask and spectral emission mask.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubblockEndcNominalSpacingAdjustment" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SubblockEndcNominalSpacingAdjustment" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the adjustment of the center frequency for adjacent E-UTRA and NR Channels in case of nominal spacing. The value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChannelRaster" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChannelRaster" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the subblock channel raster which is used for computing nominal spacing between aggregated carriers as specified in section 5.4A.1 of <em>3GPP 38.101-1/2</em> specification and section 5.4.1.2 of <em>3GPP TS 38.104</em> specification. The value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierSpacingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrierSpacingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the spacing between adjacent component carriers (CCs) within a subblock. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierAtCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrierAtCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the index of the component carrier having its center at the user-configured center frequency. The measurement uses this method along with <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetComponentCarrierSpacingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType)" crefType="FullyQualified" /> method to calculate the value of the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" crefType="PartiallyQualified" />. This method is ignored if you set the CC Spacing Type method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrierSpacingType.User" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfComponentCarriers" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfComponentCarriers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of component carriers configured within a subblock. Set this method to 1 for single carrier. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkTestModel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DownlinkTestModel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the NR test model type when you set the Channel Configuration Mode method to Test Model. Refer to section 4.9.2 of the <em>3GPP 38.141</em> specification for more information regarding test model configurations.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.DownlinkTestModelDuplexScheme" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DownlinkTestModelDuplexScheme" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the duplexing technique of the signal being measured. Refer to section 4.9.2 of <em>3GPP 38.141</em> specification for more information regarding test model configurations based on duplex scheme.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrierBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the channel bandwidth of the signal being measured. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrierFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the offset of the component carrier from the subblock center frequency that you configure in the Center Frequency method.  This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierRadioAccessType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrierRadioAccessType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies if a carrier is a NR or an E-UTRA carrier while using dual connectivity (EN-DC) signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CellID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CellID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a physical layer cell identity.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridSubcarrierSpacing" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceGridSubcarrierSpacing" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the subcarrier spacing of the reference resource grid when you set the Reference Grid Alignment Mode method to Manual. This should be the largest subcarrier spacing used in the component carrier. This value is expressed in Hz. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceGridStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the reference resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual. Center of subcarrier 0 in common resource block 0 is considered as Reference Point A.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfBandwidthParts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfBandwidthParts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of bandwidth parts present in the component carrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartSubcarrierSpacing" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BandwidthPartSubcarrierSpacing" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the subcarrier spacing of the bandwidth part used  in the component carrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartCyclicPrefixMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BandwidthPartCyclicPrefixMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the cyclic prefix (CP) duration and the number of symbols in a slot for the signal being measured.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.GridStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GridStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the resource grid start relative to Reference Point A in terms of resource block offset when you set the Reference Grid Alignment Mode method to Manual.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartResourceBlockOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BandwidthPartResourceBlockOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the resource block offset of a bandwidth part relative to the resource <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetGridStart(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.BandwidthPartNumberOfResourceBlocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BandwidthPartNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Sets the number of consecutive resource blocks in a bandwidth  part.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfUsers" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfUsers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of users present in the bandwidth part.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.Rnti" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rnti" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the RNTI.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPuschConfigurations" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfPuschConfigurations" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of PUSCH slot configurations.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschTransformPrecodingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschTransformPrecodingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether transform precoding is enabled. Enable transform precoding when analyzing a DFT-s-OFDM waveform.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschNumberOfResourceBlockClusters" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschResourceBlockOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschResourceBlockOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the starting resource block number of a PUSCH cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschNumberOfResourceBlocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of consecutive resource blocks in a physical uplink shared channel (PUSCH) cluster. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschModulationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the modulation scheme used in the physical uplink shared channel (PUSCH) of the signal being measured. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsReleaseVersion" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the 3GGP release version for PUSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsAntennaPorts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsAntennaPorts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the antenna ports used for DMRS transmission.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPowerMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> method is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> method or specified by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the factor which boosts the PUSCH DMRS REs. This value is expressed in dB. This method is ignored if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsNumberOfCdmGroups" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsNumberOfCdmGroups" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of CDM groups, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />, otherwise it is coerced to 2.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsScramblingIDMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the configured Scrambling ID is honored or the Cell ID is used for reference signal generation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsScramblingID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsScramblingID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the value of scrambling ID. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsNscid" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsNscid" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the value of PUSCH DMRS nSCID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsGroupHoppingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsGroupHoppingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the group hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsSequenceHoppingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsSequenceHoppingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the sequence hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPuschIDMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsPuschIDMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether PUSCH DMRS PUSCH ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsPuschID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsPuschID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the value of PUSCH DMRS PUSCH ID used for reference signal generation. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPuschIDMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.UserDefined" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsConfigurationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the configuration type of DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschMappingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschMappingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the mapping type of DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsTypeAPosition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsTypeAPosition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the position of first DMRS symbol in a slot when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschMappingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsDuration" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsDuration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the DMRS is single-symbol or double-symbol.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschDmrsAdditionalPositions" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschDmrsAdditionalPositions" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of additional sets of consecutive DMRS symbols in a slot.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the PUSCH transmission contains PTRS signals.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsAntennaPorts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsAntennaPorts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the DMRS antenna ports associated with PTRS transmission. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsPowerMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the PUSCH PTRS power scaling is calculated as defined in 3GPP specification or specified by you. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the factor by which the PUSCH PTRS REs are boosted. This value is expressed in dB. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPtrsGroups" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfPtrsGroups" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of PTRS groups per OFDM symbol. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SamplesPerPtrsGroup" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SamplesPerPtrsGroup" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of samples per each PTRS group. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsTimeDensity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsTimeDensity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the density of PTRS in time domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsFrequencyDensity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsFrequencyDensity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the density of PTRS in frequency domain. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschPtrsREOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschPtrsREOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the RE offset to be used for transmission of PTRS as defined in the Table 6.4.1.2.2.1-1 of <em>3GPP 38.211</em> specification.  This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschSlotAllocation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschSlotAllocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the slot allocation in NR Frame. This defines the indices of the allocated slots. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PuschSymbolAllocation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PuschSymbolAllocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the symbol allocation of each slot allocation. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPdschConfigurations" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfPdschConfigurations" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of PDSCH slot configurations.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschNumberOfResourceBlockClusters" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of clusters of resource allocations with each cluster including one or more consecutive resource blocks. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschResourceBlockOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschResourceBlockOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the starting resource block number of a PDSCH cluster.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschNumberOfResourceBlocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of consecutive resource blocks in a PDSCH cluster.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschModulationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the modulation scheme used in PDSCH channel of the signal being measured.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsReleaseVersion" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the 3GGP release version for PDSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsAntennaPorts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsAntennaPorts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the antenna ports used for DMRS transmission.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsPowerMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the factor by which the PDSCH DMRS REs are boosted. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsNumberOfCdmGroups" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsNumberOfCdmGroups" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of CDM groups.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsScramblingIDMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured Scrambling ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsScramblingID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsScramblingID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the value of scrambling ID used for reference signal generation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsnScid" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsnScid" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the value of PDSCH DMRS nSCID used for reference signal generation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsConfigurationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the configuration type of DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschMappingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschMappingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the mapping type of DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsTypeAPosition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsTypeAPosition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the position of first DMRS symbol in a slot for Type A configurations.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsDuration" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsDuration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the DMRS is single-symbol or double-symbol.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschDmrsAdditionalPositions" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschDmrsAdditionalPositions" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of additional sets of consecutive DMRS symbols in a slot.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether PT-RS is present in the transmitted signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsAntennaPorts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsAntennaPorts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the DMRS Antenna Ports associated with PTRS transmission.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsPowerMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> is calculated as defined in 3GPP specification or configured by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.EpreRatioPort" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="EpreRatioPort" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the EPRE Ratio Port used to determine the PDSCH PT-RS RE power scaling as defined in the Table 4.1-2 of <em>3GPP TS 38.214</em> specification when you set the PDSCH PTRS Power Mode method to Standard.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the factor by which the PDSCH PTRS REs are boosted, compared to PDSCH REs. This value is expressed in dB. The value of this method is taken as an input when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPdschPtrsPowerMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.UserDefined" crefType="PartiallyQualified" />. If you set the PDSCH PTRS Pwr Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPdschPtrsPowerMode.Standard" crefType="PartiallyQualified" />, the value is computed from other parameters.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsTimeDensity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsTimeDensity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the density of PTRS in time domain</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsFrequencyDensity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsFrequencyDensity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the density of PTRS in frequency domain</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPtrsREOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPtrsREOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the RE Offset to be used for transmission of PTRS as defined in Table 7.4.1.2.2-1 of <em>3GPP 38.211</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschSlotAllocation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschSlotAllocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the slot allocation in NR Frame. This defines the indices of the allocated slots. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschSymbolAllocation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschSymbolAllocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the symbol allocation of each slot allocation. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdschPresentInSsbResourceBlock" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdschPresentInSsbResourceBlock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the subset of RBs for certain symbols in a slot are occupied by SS/PBCH resources depending on the SS/PBCH block configuration. If this method is enabled, PDSCH RBs are allocated in the remaining symbols of this RB subset. If this method is disabled, any RBs occupied by SS/PBCH resources are not allocated on all symbols in this slot.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfCoresets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfCoresets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of CORSETs present in the bandwidth part.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetSymbolOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetSymbolOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the starting symbol number of the CORESET within a slot.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfSymbols" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetNumberOfSymbols" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of symbols alloted to CORESET in each slot.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfResourceBlockClusters" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetNumberOfResourceBlockClusters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of RB clusters present in the CORESET.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetResourceBlockOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetResourceBlockOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the starting resource block of a CORESET cluster.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetNumberOfResourceBlocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetNumberOfResourceBlocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of consecutive resource blocks of CORESET cluster.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetPrecodingGranularity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetPrecodingGranularity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the precoding granularity of the CORESET.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetCceToRegMappingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetCceToRegMappingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the CCE-to-REG mapping type of CORESET.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetRegBundleSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetRegBundleSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the RBG bundle size of CORESET for interleaved CCE to REG mapping.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetInterleaverSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetInterleaverSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the interleaver size of CORESET for interleaved CCE to REG mapping.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.CoresetShiftIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CoresetShiftIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the shift index of CORESET for interleaved CCE to REG mapping.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.NumberOfPdcchConfigurations" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NumberOfPdcchConfigurations" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of PDCCH Configurations for a CORESET.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchCceAggregationLevel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdcchCceAggregationLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary> Specifies the CCE aggregation level of PDCCH.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchCceOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdcchCceOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the PDCCH CCE offset.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PdcchSlotAllocation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PdcchSlotAllocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the slot allocation in NR frame. This defines the indices of the allocated slots.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SsbEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether synchronization signal block (SSB) is present in the transmitted signal.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbCrbOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SsbCrbOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the CRB offset for the SS/PBCH block relative to the reference Point A in units of 15 kHz or 60 kHz resource blocks for frequency range 1 and frequency range 2 respectively.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SubcarrierSpacingCommon" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SubcarrierSpacingCommon" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the basic unit of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetSsbSubcarrierOffset(System.String,System.Int32)" crefType="FullyQualified" /> method for frequency range 2. The method refers to the MIB control element subCarrierSpacingCommon in <em>3GPP TS 38.331</em>.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbSubcarrierOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SsbSubcarrierOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies an additional subcarrier offset for the SS/PBCH block in units of resource blocks of 15 kHz or subcarrier spacing given by SSB Subcarrier Common method for frequency range 1 and frequency range 2 respectively.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbPeriodicity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SsbPeriodicity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the repetition duration of the SS/PBCH block transmit pattern.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbPattern" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SsbPattern" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the candidate SS/PBCH blocks with different subcarrier spacing configurations as defined in the section 4.1 of <em>3GPP TS 38.213</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SsbActiveBlocks" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SsbActiveBlocks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the SSB burst(s) indices for the SSB pattern that needs to be transmitted.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PssPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PssPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the power scaling value for the primary synchronization symbol in the SS/PBCH block. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SssPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SssPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the power scaling value for the secondary synchronization symbol in the SS/PBCH block. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PbchPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PbchPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the power scaling value for the PBCH REs in the SS/PBCH block. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PbchDmrsPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PbchDmrsPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the power scaling value for the PBCH DMRS symbols in the SS/PBCH block. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the ModAcc measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMulticarrierFilterEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccMulticarrierFilterEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to use the filter in single carrier configurations to minimize leakage into the carrier. Measurement ignores this method, if number of carriers is set to more than 1 or if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAcquisitionBandwidthOptimizationEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcquisitionBandwidthOptimizationEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccMulticarrierFilterEnabled.False" crefType="PartiallyQualified" />, where in the multi carrier filter will always be used.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFrequencyErrorEstimation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccFrequencyErrorEstimation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the operation mode of frequency error estimation.      If frequency error is absent in the signal to be analyzed, you may disable frequency estimation to reduce measurement time or to avoid measurement inaccuracy due to error in frequency error estimation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSymbolClockErrorEstimationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccSymbolClockErrorEstimationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to estimate symbol clock error.      This method is ignored when the Common Clock Source Enabled method is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSymbolClockErrorEstimationEnabled.True" crefType="PartiallyQualified" /> and the Frequency Error Estimation method is Disabled, in which case, symbol clock error is not estimated.      If symbol clock error is absent in the signal to be analyzed, you may disable symbol clock error estimation to reduce measurement time or to avoid measurement inaccuracy due to error in symbol clock error estimation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccIQOriginOffsetEstimationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccIQOriginOffsetEstimationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to estimate the IQ origin offset.      If IQ origin offset is absent in the signal to be analyzed, you may disable IQ origin offset estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ origin offset estimation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccIQImpairmentsEstimationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccIQImpairmentsEstimationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to estimate the IQ impairments such as IQ gain imbalance and quadrature skew.      If IQ impairments is absent in the signal to be analyzed, you may disable IQ impairments estimation to reduce measurement time or to avoid measurement inaccuracy due to error in IQ impairments estimation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMagnitudeAndPhaseErrorEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccMagnitudeAndPhaseErrorEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to measure the magnitude and the phase error.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSynchronizationMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccSynchronizationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement is performed from slot or frame boundary.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementLengthUnit" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccMeasurementLengthUnit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the units in which measurement offset and measurement length are specified.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccMeasurementOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the measurement offset to skip from the synchronization boundary. The synchronization boundary is specified by the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetSynchronizationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccSynchronizationMode)" crefType="FullyQualified" /> method. The unit for this is specified by ModAcc Measurement Length Unit.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccMeasurementLength" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccMeasurementLength" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the measurement length in units specified by Measurement Length Unit method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSpectrumInverted" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccSpectrumInverted" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the spectrum of the signal being measured  is inverted. This happens when I and Q component of the baseband complex signal is swapped.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccChannelEstimationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccChannelEstimationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the method used for channel estimation.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccPhaseTrackingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccPhaseTrackingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether phase tracking is enabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccTimingTrackingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccTimingTrackingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether timing tracking is enabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccEvmUnit" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccEvmUnit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the units of the EVM results.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccFftWindowType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the FFT window type used for EVM calculation. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccFftWindowOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the position of the FFT window used to calculate the EVM when <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method is set to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.TypeCustom" crefType="PartiallyQualified" />. The offset is expressed as a percentage of the cyclic prefix length. If you set this method to 0, the EVM window starts at the end of cyclic prefix. If you set this method to 100, the EVM window starts at the beginning of cyclic prefix.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccFftWindowLength" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccFftWindowLength" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the FFT window length (W). This value is expressed as a percentage of the cyclic prefix length. This method is used when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetFftWindowType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccFftWindowType.Type3GPP" crefType="PartiallyQualified" />, where it is needed to calculate the EVM using two different FFT window positions, Delta_C-W/2, and Delta_C+W/2.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccDCSubcarrierRemovalEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccDCSubcarrierRemovalEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the DC subcarrier is removed from the EVM results.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccCommonClockSourceEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccCommonClockSourceEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether same reference clock is used for local oscillator and digital-to-analog converter. When same reference clock is used the Carrier Frequency Offset is proportional to Sample Clock Error.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccSpectralFlatnessCondition" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccSpectralFlatnessCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the test condition for Spectral Flatness measurement. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccCompositeResultsIncludeDmrs" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccCompositeResultsIncludeDmrs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the DMRS resource elements are included for composite EVM and magnitude and phase error results and traces.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccCompositeResultsIncludePtrs" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccCompositeResultsIncludePtrs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the PTRS resource elements are included for composite EVM and magnitude and phase error results and traces.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Enables averaging for the measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the traces to be stored and retrieved after performing the ModAcc measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum number of threads used for parallelism for the ModAcc measurement. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositeRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositeRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length. If ModAcc Composite Results Include DMRS method and ModAcc Composite Results Include PTRS method are set to False, EVM is computed only for the shared channel.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length. If ModAcc Composite Results Include DMRS method and ModAcc Composite Results Include PTRS method are set to False, EVM is computed only for the shared channel.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmBwpIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakEvmBwpIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the bandwidth part index where ModAcc Results Max Pk Composite EVM occurs.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmSlotIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakEvmSlotIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the slot index where ModAcc Results Max Pk Composite EVM occurs.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmSymbolIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakEvmSymbolIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the symbol index where ModAcc Results Max Pk Composite EVM occurs.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakEvmSubcarrierIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakEvmSubcarrierIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the subcarrier index where ModAcc Results Max Pk Composite EVM occurs.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositeRmsMagnitudeErrorMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositeRmsMagnitudeErrorMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the RMS mean value of magnitude error calculated over measurement length on all configured channels.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakMagnitudeErrorMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakMagnitudeErrorMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the peak value of magnitude error calculated over measurement length on all configured channels.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositeRmsPhaseErrorMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositeRmsPhaseErrorMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the RMS mean value of Phase error calculated over measurement length on all configured channels. This value is expressed in degrees.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsCompositePeakPhaseErrorMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsCompositePeakPhaseErrorMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the peak value of Phase error calculated over measurement length on all configured channels. This value is expressed in degrees.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSchSymbolPowerMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSchSymbolPowerMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the mean value (over <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetMeasurementLength(System.String,System.Double)" crefType="FullyQualified" />) of power calculated on OFDM symbols allocated only with the shared channel.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSchDetectedModulationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSchDetectedModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the modulation of the shared channel user data if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />; otherwise, returns the configured modulation of the shared user data.      In case of downlink test model, the modulation type specified by the 3GPP standard is returned.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDataRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPuschDataRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on PUSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDataPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPuschDataPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length on PUSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDmrsRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPuschDmrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on PUSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschDmrsPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPuschDmrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length on PUSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschPtrsRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPuschPtrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on PUSCH PTRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPuschPtrsPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPuschPtrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length on PUSCH PTRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschQpskRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschQpskRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on all  QPSK modulated PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch16QamRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdsch16QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on all  16 QAM modulated PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch64QamRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdsch64QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on all  64 QAM modulated PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch256QamRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdsch256QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on all  256 QAM modulated PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdsch1024QamRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdsch1024QamRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on all 1024 QAM modulated PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDataRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschDataRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDataPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschDataPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length on PDSCH data symbols.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDmrsRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschDmrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on PDSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschDmrsPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschDmrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length on PDSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschPtrsRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschPtrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the mean value of RMS EVMs calculated over measurement length on PDSCH PTRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPdschPtrsPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPdschPtrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the maximum value of peak EVMs calculated over measurement length on PDSCH PTRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPssRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPssRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the mean value of RMS EVMs computed over measurement length on PSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPssPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPssPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the maximum value of peak EVMs calculated over measurement length on PSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSssRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSssRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the mean value of RMS EVMs computed over measurement length on SSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSssPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSssPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the maximum value of peak EVMs calculated over measurement length on SSS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDataRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPbchDataRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the mean value calculated over measurement length of RMS EVMs calculated on PBCH data symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDataPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPbchDataPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the maximum value calculated over measurement length of peak EVMs calculated on PBCH data symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDmrsRmsEvmMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPbchDmrsRmsEvmMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the mean value calculated over measurement length of RMS EVMs calculated on PBCH DMRS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsPbchDmrsPeakEvmMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsPbchDmrsPeakEvmMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the maximum value calculated over measurement length of peak EVMs calculated on PBCH DMRS symbols.      When you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccConfiguration.SetEvmUnit(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.Percentage" crefType="PartiallyQualified" />, the measurement returns this result as a percentage. When you set the ModAcc EVM Unit method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXModAccEvmUnit.dB" crefType="PartiallyQualified" />, the measurement returns this result in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsInBandEmissionMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsInBandEmissionMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns In-Band Emission Margin of the component carrier. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange1MaximumToRange1Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSpectralFlatnessRange1MaximumToRange1Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the peak-to-peak ripple of the magnitude of EVM equalizer coefficients within Range1 for the measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange2MaximumToRange2Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSpectralFlatnessRange2MaximumToRange2Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the peak-to-peak ripple of the magnitude of EVM equalizer coefficients within Range2 for the Measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification.  This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange1MaximumToRange2Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSpectralFlatnessRange1MaximumToRange2Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the peak-to-peak ripple of the EVM equalizer coefficients from maximum in Range1 to minimum in Range2 for the Measurement unit that has the worst ripple margin among all four ripple results defined in 3section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSpectralFlatnessRange2MaximumToRange1Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSpectralFlatnessRange2MaximumToRange1Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the peak-to-peak ripple of the EVM equalizer coefficients from maximum in Range2 to minimum in Range1 for the Measurement unit, that has the worst ripple margin among all four ripple results defined in section 6.4.2.4.1 of <em>3GPP 38.101-1</em> specification and section 6.4.2.4.1 of <em>3GPP 38.101-2</em> specification. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockInBandEmissionMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSubblockInBandEmissionMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns In-Band Emission Margin of the subblock's aggregated bandwidth. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierFrequencyErrorMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsComponentCarrierFrequencyErrorMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the estimated carrier frequency offset averaged over measurement length. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierSymbolClockErrorMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsComponentCarrierSymbolClockErrorMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the estimated sample clock error averaged over measurement length. This value is expressed in ppm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierIQOriginOffsetMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsComponentCarrierIQOriginOffsetMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the estimated IQ origin offset averaged over measurement length.  This value is expressed in dBc.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierIQGainImbalanceMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsComponentCarrierIQGainImbalanceMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the estimated IQ gain imbalance averaged over measurement length. This value is expressed in dB. IQ gain imbalance is the ratio of the amplitude of the I component to the Q component of the IQ signal being measured.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsComponentCarrierQuadratureErrorMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsComponentCarrierQuadratureErrorMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the estimated quadrature error averaged over measurement length. This value is expressed in degrees. Quadrature error is the measure of skewness in degree of the I component with respect to the Q component of the IQ signal being measured.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockLOComponentCarrierIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSubblockLOComponentCarrierIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the index of the component carrier that includes the LO of the transmitter according to the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties. If the LO of the transmitter doesn't fall into any component carrier of the subblock, the method returns -1.  This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockLOSubcarrierIndex" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSubblockLOSubcarrierIndex" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the subcarrier index within the respective component carrier where the transmitter LO is located. Due to its dependence on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockFrequencyDefinition(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition)" crefType="FullyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetSubblockTransmitLOFrequency(System.String,System.Double)" crefType="FullyQualified" /> properties, the value can be fractional, and the LO might reside in between subcarriers of a component carrier. This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccResultsSubblockIQOriginOffsetMean" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccResultsSubblockIQOriginOffsetMean" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the estimated IQ origin offset averaged over measurement length in the subblock. This value is expressed in dBc. This result is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTransmitterArchitecture(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the ACP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSubblockIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpSubblockIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the integration bandwidth of a subblock. This value is expressed in Hz. Integration bandwidth is the span from the left edge of the leftmost carrier to the right edge of the rightmost carrier within the subblock.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpComponentCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpComponentCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the integration bandwidth of the component carrier (CC). This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfUtraOffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfUtraOffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of universal terrestrial radio access (UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement in frequency range 2, and for downlink ACP measurement, the ACP Num UTRA Offsets has to be 0.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfEutraOffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfEutraOffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of evolved universal terrestrial radio access (E-UTRA) adjacent channel offsets to be configured at offset positions. For uplink ACP measurement, and for downlink ACP measurement in frequency range 2, this method has to be 0.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfNROffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfNROffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of NR adjacent channel offsets to be configured at offset positions.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfEndcOffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfEndcOffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of ENDC adjacent channel offsets to be configured at offset positions. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetChannelSpacingAdjustment" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetChannelSpacingAdjustment" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the additional spacing of ACP offset channels at nominal spacing. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the offset frequency of an offset channel. This value is expressed in Hz. The offset frequency is computed from the center of a reference component carrier/subblock to the center of the nearest RBW filter of the offset channel.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpOffsetIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpOffsetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the integration bandwidth of an offset channel. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement computes the RBW.  </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the shape of the RBW filter.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement sets the sweep time.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementMethod" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the method for performing the ACP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationAveragingAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether RFmx automatically computes the averaging count used for instrument noise calibration.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCalibrationAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNoiseCalibrationAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx compensates for the instrument noise when performing the measurement when you set <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or when you set ACP Noise Cal Mode to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMode.Measure" crefType="PartiallyQualified" /> Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNoiseCompensationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNoiseCompensationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable averaging for the ACP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for ACP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpMeasurementMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpMeasurementMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement calibrates the noise floor of analyzer or performs the ACP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the FFT window type to be used to reduce spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftOverlapMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpFftOverlapMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the overlap mode when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to Sequential FFT.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFftOverlap" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpFftOverlap" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the number of samples to overlap between consecutive chunks while performing FFT.      This value is expressed as a percentage of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetSequentialFftSize(System.String,System.Int32)" crefType="FullyQualified" /> method when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpIFOutputPowerOffsetAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpIFOutputPowerOffsetAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement computes an appropriate IF output power level offset for the offset channels to improve the dynamic range of the ACP measurement. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNearIFOutputPowerOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNearIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the offset that is needed to adjust the IF output power levels for the offset channels that are near the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpFarIFOutputPowerOffset" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpFarIFOutputPowerOffset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the offset that is needed to adjust the IF output power levels for the offset channels that are far from the carrier channel to improve the dynamic range. This value is expressed in dB. This method is applicable only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetIFOutputPowerOffsetAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpIFOutputPowerOffsetAuto.False" crefType="PartiallyQualified" /> and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.DynamicRange" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpSequentialFftSize" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpSequentialFftSize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of bins to be used for FFT computation, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAcpMeasurementMethod.SequentialFft" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the traces to be stored and retrieved after performing the ACP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum number of threads used for parallelism for the ACP measurement. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsTotalAggregatedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsSubblockPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsSubblockPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsComponentCarrierAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsComponentCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsComponentCarrierRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsComponentCarrierRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the component carrier power relative to its subblock power. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsLowerOffsetAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the lower (negative) offset channel power.  This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsLowerOffsetRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsLowerOffsetRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power in lower (negative) offset channel relative to the total aggregated power. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsUpperOffsetAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the upper (positive) offset channel power. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcpResultsUpperOffsetRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcpResultsUpperOffsetRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power in the upper (positive) offset channel relative to the total aggregated power. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the channel power measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement sets the sweep time.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpSweepTimeAuto)" crefType="FullyQualified" /> method to False. This value is expressed in seconds.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpIntegrationBandwidthType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpIntegrationBandwidthType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the integration bandwidth (IBW) type used to measure the power of the acquired signal. Integration bandwidth is the frequency interval over which the power in each frequency bin is added to measure the total power in that interval. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpSubblockIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpSubblockIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the integration bandwidth of the subblock. This value is expressed in Hz. It is the span from left edge of the integration bandwidth of the leftmost carrier to the right edge of the integration bandwidth of the rightmost carrier within a subblock.  </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpComponentCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpComponentCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the integration bandwidth of a component carrier (CC). This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement computes the RBW.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the bandwidth of the RBW filter, used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth)" crefType="FullyQualified" /> method to  <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the shape of the digital RBW filter.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpNoiseCalibrationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the noise calibration and measurement is performed manually by the user or automatically by RFmx.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationAveragingAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpNoiseCalibrationAveragingAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether RFmx automatically computes the averaging count used for instrument noise calibration.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCalibrationAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpNoiseCalibrationAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the averaging count used for noise calibration when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationAveragingAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationAveragingAuto.False" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCompensationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpNoiseCompensationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether RFmx compensates for the instrument noise when performing the measurement. To compensate for instrument noise when performing a CHP measurement, set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetNoiseCalibrationMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Auto" crefType="PartiallyQualified" />, or set the CHP Noise Cal Mode method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpNoiseCalibrationMode.Manual" crefType="PartiallyQualified" /> and the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetMeasurementMode(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpMeasurementMode.Measure" crefType="PartiallyQualified" />.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNoiseCompensationType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpNoiseCompensationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the noise compensation type.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable averaging for the CHP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXChpConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXChpAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for CHP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpMeasurementMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpMeasurementMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement calibrates the noise floor of analyzer or performs the CHP measurement.      Refer to the measurement guidelines section in the Noise Compensation Algorithm topic for more information.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the FFT window type to be used to reduce spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the traces to be stored and retrieved after performing the CHP measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum number of threads used for parallelism for the CHP measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsTotalAggregatedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsSubblockPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsSubblockPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This includes the power in inter-carrier gaps within a subblock. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsComponentCarrierAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsComponentCarrierAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ChpResultsComponentCarrierRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ChpResultsComponentCarrierRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the component carrier power relative to its subblock power. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the OBW measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSpan" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwSpan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the frequency search space to find the OBW. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterAutoBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterAutoBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement computes the RBW. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the bandwidth of the RBW filter used to sweep the acquired signal, when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetRbwFilterAutoBandwidth(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwRbwAutoBandwidth.False" crefType="PartiallyQualified" />. This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the shape of the digital RBW filter.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement sets the sweep time.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable averaging for the OBW measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXObwConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXObwAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the OBW measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the FFT window type to be used to reduce spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the amplitude of frequency bins in the spectrum used by the measurement is corrected for external attenuation at RF center frequency or corrected for external attenuation at individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the traces to be stored and retrieved after performing the OBW measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum number of threads used for parallelism for the OBW measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsOccupiedBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsOccupiedBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the bandwidth that occupies the specified percentage of the total power of the signal. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the total power measured in the spectrum acquired by the measurement. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the start frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz. The occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ObwResultsStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ObwResultsStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the stop frequency of the occupied bandwidth of carrier/subblock. This value is expressed in Hz. Occupied bandwidth is calculated using the following equation:<em>Occupied bandwidth</em> = <em>Stop frequency</em> - <em>Start frequency</em>
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the SEM measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemUplinkMaskType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemUplinkMaskType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the spectrum emission mask used in the measurement for uplink. You must set the mask type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" crefType="PartiallyQualified" /> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemDownlinkMaskType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemDownlinkMaskType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the limits to be used in the measurement for Downlink.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemDeltaFMaximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemDeltaFMaximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the stop frequency for 3rd offset segment to be used in the measurement. This method is valid only for downlink and when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSubblockIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemSubblockIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the integration bandwidth of a subblock. This value is expressed in Hz. Integration bandwidth is the span from the left edge of the leftmost carrier to the right edge of the rightmost carrier within the subblock.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSubblockAggregatedChannelBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemSubblockAggregatedChannelBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the aggregated channel bandwidth of a configured subblock. This value is expressed in Hz. The aggregated channel bandwidth is the sum of the subblock integration bandwidth and the guard bands on either side of the subblock integration bandwidth.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemComponentCarrierIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the integration bandwidth of a component carrier. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierRatedOutputPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemComponentCarrierRatedOutputPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemNumberOfOffsets" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemNumberOfOffsets" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the number of SEM offset segments.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetStartFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the start frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetStopFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the stop frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetSideband" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetSideband" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the offset segment is present either on one side or on both sides of a carrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRbwFilterBandwidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the bandwidth of the resolution bandwidth (RBW) filter used to sweep the acquired offset segment, when you set the SEM Offset RBW Auto method to False. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRbwFilterType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the shape of a digital RBW filter.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetBandwidthIntegral" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetLimitFailMask" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the criteria to determine the measurement fail status. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetAbsoluteLimitStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetAbsoluteLimitStop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRelativeLimitStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRelativeLimitStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRelativeLimitStop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemOffsetRelativeLimitStop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSweepTimeAuto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the measurement sets the sweep time. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSweepTimeInterval" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemSweepTimeInterval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable averaging for the SEM measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for SEM measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemFftWindow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the FFT window type to be used to reduce spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAmplitudeCorrectionType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the traces to be stored and retrieved after performing the SEM measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum number of threads used for parallelism for the SEM measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsTotalAggregatedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the sum of powers of all the subblocks. This value includes the power in the inter-carrier gap within a subblock, but it excludes power in the  inter-subblock gaps. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the overall measurement status based on the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsSubblockPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsSubblockPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the power measured over the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> method. This value is expressed in dBm.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierAbsoluteIntegratedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsComponentCarrierAbsoluteIntegratedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the power measured over the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> method. This value is expressed in dBm.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierRelativeIntegratedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsComponentCarrierRelativeIntegratedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the component carrier power relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetSubblockPower(System.String,System.Double@)" crefType="FullyQualified" />. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierAbsolutePeakPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsComponentCarrierAbsolutePeakPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the peak power in the component carrier. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsComponentCarrierPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the frequency at which peak power occurs in the component carrier. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the measurement status based on the spectrum emission limits defined by the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetAbsoluteIntegratedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetAbsoluteIntegratedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the lower (negative) offset segment power. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetRelativeIntegratedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetRelativeIntegratedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the power in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetAbsolutePeakPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetAbsolutePeakPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the peak power in the lower (negative) offset segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetRelativePeakPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetRelativePeakPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the peak power in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the frequency at which the peak power occurs in the lower (negative) offset segment. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the margin from the absolute limit mask for lower (negative) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMarginAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power at which the Margin occurs in the lower (negative) offset segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMarginRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the power at which the Margin occurs in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMarginFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsLowerOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the frequency at which the Margin occurs in the lower (negative) offset. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the measurement status based on the user-configured standard measurement limits. Spectrum emission limits can be defined by setting <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetAbsoluteIntegratedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetAbsoluteIntegratedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the upper (positive) offset segment power. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetRelativeIntegratedPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetRelativeIntegratedPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the power in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetAbsolutePeakPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetAbsolutePeakPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the peak power in the upper (positive) offset segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetRelativePeakPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetRelativePeakPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the peak power in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetPeakFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the frequency at which the peak power occurs in the upper (positive)offset segment. This value is expressed in Hz. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMargin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMargin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the margin from the absolute limit mask for upper (positive) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMarginAbsolutePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power at which the Margin occurs in the upper (positive) offset segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMarginRelativePower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the power at which the Margin occurs in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMarginFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SemResultsUpperOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the frequency at which the Margin occurs in the upper (positive) offset. This value is expressed in Hz.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtMeasurementEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtMeasurementEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the PVT measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtMeasurementMethod" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the PVT measurement method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable averaging for the power versus time (PVT) measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingCount" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtAveragingCount" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingType" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the measurement averaging type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtOffPowerExclusionBefore" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtOffPowerExclusionBefore" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the time excluded from the Off region before the burst. The value is expressed in seconds.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtOffPowerExclusionAfter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtOffPowerExclusionAfter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the time excluded from the Off region after the burst. This value is expressed in seconds.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAllTracesEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtAllTracesEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to enable the traces to be stored and retrieved after performing the power versus time (PVT) measurement.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtNumberOfAnalysisThreads" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the maximum number of threads used for parallelism inside the PVT measurement.      The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsMeasurementStatus" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtResultsMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the measurement status indicating whether the off power before and after is within the standard defined limit.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsAbsoluteOffPowerBefore" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtResultsAbsoluteOffPowerBefore" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the OFF power in the segment before the captured burst. The segment is defined as one slot prior to a short transient segment and the burst. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsAbsoluteOffPowerAfter" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtResultsAbsoluteOffPowerAfter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the OFF power in the segment after the captured burst. The segment is defined as one slot after the burst and a short transient segment. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsAbsoluteONPower" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtResultsAbsoluteONPower" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the power of the slots within the captured burst. This value is expressed in dBm.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsBurstWidth" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PvtResultsBurstWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Returns the width of the captured burst. This value is expressed in seconds.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.AcquisitionBandwidthOptimizationEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AcquisitionBandwidthOptimizationEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether RFmx optimizes the acquisition bandwidth. This may cause acquisition center frequency or local oscillator (LO) to be placed at different position than you configured.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.TransmitterArchitecture" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TransmitterArchitecture" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the RF architecture at the transmitter in case of a multi-carrier. Each component carriers within a subblock can have separate LO or one common LO for entire subblock.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PhaseCompensation" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PhaseCompensation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether phase compensation is disabled, auto-set by the measurement or set by the you. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ReferenceGridAlignmentMode" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ReferenceGridAlignmentMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies whether to align the bandwidthparts and the SSB in a component carrier to a reference resource grid automatically or manually. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.LimitedConfigurationChange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="LimitedConfigurationChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the set of properties that are considered by RFmx in the locked signal configuration state.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ResultFetchTimeout" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ResultFetchTimeout" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the time to wait before results are available in the RFmxNR Property Node. This value is expressed in seconds.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ModAccEvmWithExclusionPeriodEnabled" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ModAccEvmWithExclusionPeriodEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
         <exclude/>
         <summary>missing content</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsConfigurationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the configuration type of DMRS.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType.Type1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Type1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>One DMRS subcarrier alternates with one data subcarrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsConfigurationType.Type2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Type2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Two consecutive DMRS subcarriers alternate with four consecutive data subcarriers.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsDuration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the DMRS is single-symbol or double-symbol.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration.SingleSymbol" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SingleSymbol" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>There are one or more non-consecutive DMRS symbols in a slot..</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsDuration.DoubleSymbol" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DoubleSymbol" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>There are one or more sets of two consecutive DMRS symbols in the slot.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsGroupHoppingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the group hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Group hopping is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsGroupHoppingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Group hopping is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsPower(System.String,System.Double)" crefType="FullyQualified" /> method is calculated based on the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsNumberOfCdmGroups(System.String,System.Int32)" crefType="FullyQualified" /> method or specified by you.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.CdmGroups" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CdmGroups" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PUSCH DMRS Pwr is calculated based on PDSCH DMRS Num CDM Groups method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPowerMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PUSCH DMRS Pwr is specified by you.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsPuschIDMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether PUSCH DMRS PUSCH ID is based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetCellID(System.String,System.Int32)" crefType="FullyQualified" /> or specified by you. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.CellID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CellID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PUSCH DMRS PUSCH ID is based on Cell ID method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsPuschIDMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PUSCH DMRS PUSCH ID is specified by you.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsReleaseVersion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the 3GGP release version for PUSCH DMRS.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion.Release15" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Release15" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 3GGP release version of 15 for PUSCH DMRS.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsReleaseVersion.Release16" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Release16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 3GGP release version of 16 for PUSCH DMRS.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsScramblingIDMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the configured Scrambling ID is honored or the Cell ID is used for reference signal generation.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode.CellID" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CellID" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PUSCH DMRS Scrambling ID is based on Cell ID method.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsScramblingIDMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The value of PUSCH DMRS Scrambling ID is specified by you.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschDmrsSequenceHoppingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the sequence hopping is enabled. This method is valid only when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses zero as the base sequence number for all the slots.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschDmrsSequenceHoppingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement calculates the base sequence number for each slot according to 3GPP specification.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschMappingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the mapping type of DMRS.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeA" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TypeA" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The first DMRS symbol index in a slot is either 2 or 3 based on <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschDmrsTypeAPosition(System.String,System.Int32)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschMappingType.TypeB" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="TypeB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The first DMRS symbol index in a slot is the first active PUSCH symbol.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the modulation scheme used in the physical uplink shared channel (PUSCH) of the signal being measured.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.PiBy2_Bpsk" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PiBy2_Bpsk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a PI/2 BPSK modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qpsk" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qpsk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a QPSK modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qam16" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 16 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qam64" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam64" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies a 64 QAM modulation scheme.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qam256" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam256" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies a 256 QAM modulation scheme.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschModulationType.Qam1024" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam1024" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 1024 QAM modulation scheme.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschPtrsEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the PUSCH transmission contains PTRS signals.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The PUSCH Transmission does not contain PTRS signals.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The PUSCH PTRS contains PTRS signals.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschPtrsPowerMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the PUSCH PTRS power scaling is calculated as defined in 3GPP specification or specified by you. This method is valid only if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsEnabled.True" crefType="PartiallyQualified" />.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode.Standard" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Standard" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The PUSCH PTRS Pwr scaling is calculated as defined in the Table 6.2.3.1-1 of <em>3GPP TS 38.214</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschPtrsPowerMode.UserDefined" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="UserDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The PTRS RE power scaling is given by the value of <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschPtrsPower(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPuschTransformPrecodingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether transform precoding is enabled. Enable transform precoding when analyzing a DFT-s-OFDM waveform.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Transform precoding is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Transform precoding is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvt" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents the PVT measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXPvt.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the PVT measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXPvt.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the PVT measurement results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvtAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable averaging for the power versus time (PVT) measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed on a single acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement uses the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions over which the PVT measurement is averaged.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvtAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the measurement averaging type.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is linearly averaged.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is averaged in a logarithmic scale.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvtConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the PVT measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the PVT measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the PVT measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the PVT measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the PVT measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod" nireturnvaluetype="System.Int32">

         <summary>
            Gets the PVT measurement method.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the PVT measurement method.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod" nireturnvaluetype="System.Int32">

         <summary>
            Sets the PVT measurement method.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the PVT measurement method.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtMeasurementMethod" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod.Normal" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable averaging for the power versus time (PVT) measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable averaging for the power versus time (PVT) measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable averaging for the power versus time (PVT) measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable averaging for the power versus time (PVT) measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the measurement averaging type.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the measurement averaging type.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the measurement averaging type.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the measurement averaging type.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetOffPowerExclusionBefore(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffPowerExclusionBefore" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the time excluded from the Off region before the burst. The value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the time excluded from the Off region before the burst. The value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtOffPowerExclusionBefore" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetOffPowerExclusionBefore(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffPowerExclusionBefore" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the time excluded from the Off region before the burst. The value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the time excluded from the Off region before the burst. The value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtOffPowerExclusionBefore" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetOffPowerExclusionAfter(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffPowerExclusionAfter" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the time excluded from the Off region after the burst. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the time excluded from the Off region after the burst. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtOffPowerExclusionAfter" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetOffPowerExclusionAfter(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffPowerExclusionAfter" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the time excluded from the Off region after the burst. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the time excluded from the Off region after the burst. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtOffPowerExclusionAfter" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the traces to be stored and retrieved after performing the power versus time (PVT) measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the power versus time (PVT) measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the traces to be stored and retrieved after performing the power versus time (PVT) measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the power versus time (PVT) measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum number of threads used for parallelism inside the PVT measurement.      The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the maximum number of threads used for parallelism inside the PVT measurement.      The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum number of threads used for parallelism inside the PVT measurement.      The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the maximum number of threads used for parallelism inside the PVT measurement.      The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.      </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.ConfigureMeasurementMethod(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureMeasurementMethod" nihasget="0" nihasset="0" niparameters="selectorString,measurementMethod" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod" nireturnvaluetype="System.Int32">

         <summary>
            Configures the measurement method for PVT measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="measurementMethod">Specifies the method for performing the PVT measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Configures averaging for the PVT measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
         <param name="averagingCount">
            Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtConfiguration.ConfigureOffPowerExclusionPeriods(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffPowerExclusionPeriods" nihasget="0" nihasset="0" niparameters="selectorString,offPowerExclusionBefore,offPowerExclusionAfter" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the time excluded from the off region before and after the burst.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="offPowerExclusionBefore">Specifies the time excluded from the Off region before the burst. This value is expressed in seconds.</param>
         <param name="offPowerExclusionAfter">Specifies the time excluded from the Off region after the burst. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvtMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the PVT measurement method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod.Normal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Normal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed using a single acquisition. Use this method when a high dynamic range is not required.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementMethod.DynamicRange" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DynamicRange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed using two acquisitions. Use this method when a higher dynamic range is desirable over the measurement speed. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvtMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the measurement status indicating whether the off power before and after is within the standard defined limit.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has failed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has passed.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXPvtResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to fetch and read the PVT measurement results.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.GetMeasurementStatus(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus" nireturnvaluetype="System.Int32">

         <summary>
            Gets the measurement status indicating whether the off power before and after is within the standard defined limit.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the measurement status indicating whether the off power before and after is within the standard defined limit.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsMeasurementStatus" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.GetAbsoluteOffPowerBefore(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsoluteOffPowerBefore" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the OFF power in the segment before the captured burst. The segment is defined as one slot prior to a short transient segment and the burst. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the OFF power in the segment before the captured burst. The segment is defined as one slot prior to a short transient segment and the burst. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsAbsoluteOffPowerBefore" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.GetAbsoluteOffPowerAfter(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsoluteOffPowerAfter" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the OFF power in the segment after the captured burst. The segment is defined as one slot after the burst and a short transient segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the OFF power in the segment after the captured burst. The segment is defined as one slot after the burst and a short transient segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsAbsoluteOffPowerAfter" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.GetAbsoluteONPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsoluteONPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power of the slots within the captured burst. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power of the slots within the captured burst. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsAbsoluteONPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.GetBurstWidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetBurstWidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the width of the captured burst. This value is expressed in seconds.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the width of the captured burst. This value is expressed in seconds.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.PvtResultsBurstWidth" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.FetchMeasurementArray(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,absoluteOffPowerBefore,absoluteOffPowerAfter,absoluteONPower,burstWidth" niparametertypes="System.String,System.Double,ref NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches an array of PVT ON and OFF powers along with measurement status and burst width.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="measurementStatus">
            Upon return, contains the measurement status indicating whether the off power before and after is within the standard defined limit.
            <br />
         </param>
         <param name="absoluteOffPowerBefore">
            Upon return, contains the OFF power in the segment before the captured burst. The segment is defined as one slot prior to a short transient segment and the burst. This value is expressed in dBm.
            <br />
         </param>
         <param name="absoluteOffPowerAfter">
            Upon return, contains the OFF power in the segment after the captured burst. The segment is defined as one slot after the burst and a short transient segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="absoluteONPower">
            Upon return, contains the power of the subframes within the captured burst. This value is expressed in dBm.
            <br />
         </param>
         <param name="burstWidth">
            Upon return, contains the width of the captured burst. This value is expressed in seconds.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.FetchSignalPowerTrace(System.String,System.Double,NationalInstruments.AnalogWaveform{System.Single}@,NationalInstruments.AnalogWaveform{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSignalPowerTrace" nihasget="0" nihasset="0" niparameters="selectorString,timeout,signalPower,absoluteLimit" niparametertypes="System.String,System.Double,ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],ref NationalInstruments.AnalogWaveform`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches an instantanous signal power trace along with the absolute limit for each segment in the trace as specified in section 6.5.2.4.5 of the <em>3GPP 36.521</em> specification. This value is expressed in dBm.<br />
            Use "carrier(k)" or "subblock(n)/carrier(k)" as the selector string to read this result.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">
            Specifies the timeout for which the method waits for the measurement to complete. This value is expressed in seconds. A value of -1 specifies that the method waits until the measurement is complete. <br />
         </param>
         <param name="signalPower">
            Upon return, contains an array of the instantaneous signal power trace. This value is expressed in dBm.<br />
         </param>
         <param name="absoluteLimit">
            Upon return, contains absolute limit for each segment in the trace as specified in section 6.5.2.4.5 of the <em>3GPP 36.521</em> specification. This value is expressed in dBm.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXPvtResults.FetchMeasurement(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,absoluteOffPowerBefore,absoluteOffPowerAfter,absoluteONPower,burstWidth" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.NRMX.RFmxNRMXPvtMeasurementStatus,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Fetches PVT ON and OFF powers along with measurement status and burst width.<br />
            Use "carrier(k)" or "subblock(n)/carrier(k)" as the selector string to read from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">
            Specifies the timeout for which the method waits for the measurement to complete. This value is expressed in seconds. A value of -1 specifies that the method waits until the measurement is complete. <br />
         </param>
         <param name="measurementStatus">
            Upon return, contains the measurement status indicating whether the off power before and after is within the standard defined limit.
            <br />
         </param>
         <param name="absoluteOffPowerBefore">
            Upon return, contains the OFF power in the segment before the captured burst. The segment is defined as one slot prior to a short transient segment and the burst. This value is expressed in dBm.
            <br />
         </param>
         <param name="absoluteOffPowerAfter">
            Upon return, contains the OFF power in the segment after the captured burst. The segment is defined as one slot after the burst and a short transient segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="absoluteONPower">
            Upon return, contains the power of the subframes within the captured burst. This value is expressed in dBm.
            <br />
         </param>
         <param name="burstWidth">
            Upon return, contains the width of the captured burst. This value is expressed in seconds.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXReferenceGridAlignmentMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to align the bandwidthparts and the SSB in a component carrier to a reference resource grid automatically or manually.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The subcarrier spacing of the reference resource grid and the grid start of each bandwidthpart is user specified. Center of subcarrier 0 in common resource block 0 of the reference resource grid is considered as Reference Point A.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXReferenceGridAlignmentMode.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The subcarrier spacing of the reference resource grid is determined by the largest subcarrier spacing among the configured bandwidthparts and the SSB. The grid start of each bandwidthpart and the SSB is computed by minimizing k0 to {0, +6} subcarriers.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSchDetectedModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the modulation of the shared channel user data if you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetAutoResourceBlockDetectionEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXAutoResourceBlockDetectionEnabled.True" crefType="PartiallyQualified" />; otherwise, returns the configured modulation of the shared user data.      In case of downlink test model, the modulation type specified by the 3GPP standard is returned.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType.PiBy2_Bpsk" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="PiBy2_Bpsk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the PI/2 BPSK modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType.Qpsk" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qpsk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the QPSK modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType.Qam16" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the 16 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType.Qam64" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam64" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the 64 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType.Qam256" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam256" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies the 256 QAM modulation scheme.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSchDetectedModulationType.Qam1024" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Qam1024" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies a 1024 QAM modulation scheme.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSem" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSem" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents the SEM measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXSem.Configuration" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Configuration" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration" crefType="PartiallyQualified" /> instance that provides methods to configure the SEM measurement.
         </summary>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXSem.Results" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Results" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the SEM measurement results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType.RFCenterFrequency" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFCenterFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            All the frequency bins in the spectrum are compensated with a single external attenuation value that corresponds to the RF center frequency.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType.SpectrumFrequencyBin" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SpectrumFrequencyBin" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            An individual frequency bin in the spectrum is compensated with the external attenuation value corresponding to that frequency.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemAveragingEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether to enable averaging for the SEM measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement is performed on a single acquisition.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The SEM measurement uses the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingCount(System.String,System.Int32)" crefType="FullyQualified" /> method as the number of acquisitions over which the SEM measurement is averaged.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemAveragingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for SEM measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Rms" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Rms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is linearly averaged. RMS averaging reduces signal fluctuations but not the noise floor. </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Log" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The power spectrum is averaged in a logarithmic scale.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Scalar" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Scalar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The square root of the power spectrum is averaged.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Maximum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Maximum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The peak power in the spectrum at each frequency bin is retained from one acquisition to the next.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Minimum" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Minimum" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The lowest power in the spectrum at each frequency bin is retained from one acquisition to the next. </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemComponentCarrierConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the SEM Component Carrier measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration.GetIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of a component carrier. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of a component carrier. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 9 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration.GetRatedOutputPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRatedOutputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierRatedOutputPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration.SetRatedOutputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetRatedOutputPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the carrier number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/carrier0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierRatedOutputPower" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration.ConfigureRatedOutputPower(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRatedOutputPower" nihasget="0" nihasset="0" niparameters="selectorString,componentCarrierRatedOutputPower" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the rated output power (Prated, x) of the component carrier.<br />
            Use "carrier(k)" or "subblock(n)/carrier(k)" as the selector string to configure this method.<br />
            This method is valid when you set the Link Direction method to Downlink, SEM DL Mask Type method to Standard, and gNodeB Category method to Medium Range Base Station. For more details please refer to section 6.6.4 of 3GPP 38.104 specification.

         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the signal name, subblock number and carrier number. <br />
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="componentCarrierRatedOutputPower">
            Specifies the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm. This parameter will be considered when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetLinkDirection(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection.Downlink" crefType="PartiallyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />, and <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.gNodeBCategory" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.MediumRangeBaseStation" crefType="PartiallyQualified" />. For more details please refer to section 6.6.4 of <em>3GPP 38.104</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration.ConfigureRatedOutputPowerArray(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureRatedOutputPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,componentCarrierRatedOutputPower" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures an array of the rated output power (Prated, x) of the component carrier.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
            This method is valid when you set the Link Direction method to Downlink, SEM DL Mask Type method to Standard, and gNodeB Category method to Medium Range Base Station. For more details please refer to section 6.6.4 of 3GPP 38.104 specification.

         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="componentCarrierRatedOutputPower">
            Specifies an array of the rated output power (Prated, x), which is used only to choose the limit table for medium range base station. This value is expressed in dBm. This parameter will be considered when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetLinkDirection(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXLinkDirection.Downlink" crefType="PartiallyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />, and <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.gNodeBCategory" crefType="PartiallyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXgNodeBCategory.MediumRangeBaseStation" crefType="PartiallyQualified" />. For more details please refer to section 6.6.4 of <em>3GPP 38.104</em> specification.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemComponentCarrierResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Provides methods to fetch and read the SEM Component Carrier results.</summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults.GetAbsoluteIntegratedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsoluteIntegratedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power measured over the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> method. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power measured over the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> method. This value is expressed in dBm.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierAbsoluteIntegratedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults.GetRelativeIntegratedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetRelativeIntegratedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the component carrier power relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetSubblockPower(System.String,System.Double@)" crefType="FullyQualified" />. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the component carrier power relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetSubblockPower(System.String,System.Double@)" crefType="FullyQualified" />. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierRelativeIntegratedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults.GetAbsolutePeakPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAbsolutePeakPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak power in the component carrier. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the peak power in the component carrier. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierAbsolutePeakPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults.GetPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency at which peak power occurs in the component carrier. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the result name, Carrier number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Carrier0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency at which peak power occurs in the component carrier. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsComponentCarrierPeakFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults.FetchMeasurementArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurementArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,peakAbsolutePower,peakFrequency,relativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of the absolute and relative powers measured in the component carriers.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="absolutePower">
            Upon return, contains an array of the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakAbsolutePower">
            Upon return, contains an array of the peak power in the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakFrequency">
            Upon return, contains an array of the frequency at which peak power occurs in the component carrier. This value is expressed in Hz.
            <br />
         </param>
         <param name="relativePower">
            Upon return, contains an array of the component carrier power relative to its subblock power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults.FetchMeasurement(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurement" nihasget="0" nihasset="0" niparameters="selectorString,timeout,absolutePower,peakAbsolutePower,peakFrequency,relativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the absolute and relative powers measured in the component carriers.<br />
            Use "carrier(k)" or "subblock(n)" or "subblock(n)/carrier(k)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, and carrier number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/carrier0"</span><br /><span class="monospace">"result::r1/subblock0/carrier0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildCarrierString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="absolutePower">
            Upon return, contains the power measured over the integration bandwidth of the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakAbsolutePower">
            Upon return, contains the peak power in the component carrier. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakFrequency">
            Upon return, contains the frequency at which peak power occurs in the component carrier. This value is expressed in Hz.
            <br />
         </param>
         <param name="relativePower">
            Upon return, contains the component carrier power relative to its subblock power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to configure the SEM measurement.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetMeasurementEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetMeasurementEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetMeasurementEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemMeasurementEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUplinkMaskType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the spectrum emission mask used in the measurement for uplink. You must set the mask type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" crefType="PartiallyQualified" /> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the spectrum emission mask used in the measurement for uplink. You must set the mask type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" crefType="PartiallyQualified" /> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemUplinkMaskType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.General" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetUplinkMaskType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the spectrum emission mask used in the measurement for uplink. You must set the mask type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" crefType="PartiallyQualified" /> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the spectrum emission mask used in the measurement for uplink. You must set the mask type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" crefType="PartiallyQualified" /> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemUplinkMaskType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.General" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDownlinkMaskType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the limits to be used in the measurement for Downlink.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the limits to be used in the measurement for Downlink.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemDownlinkMaskType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDownlinkMaskType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the limits to be used in the measurement for Downlink.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the limits to be used in the measurement for Downlink.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemDownlinkMaskType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetDeltaFMaximum(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetDeltaFMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the stop frequency for 3rd offset segment to be used in the measurement. This method is valid only for downlink and when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the stop frequency for 3rd offset segment to be used in the measurement. This method is valid only for downlink and when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemDeltaFMaximum" crefType="PartiallyQualified" /> attribute.The default value is 15 MHz. The minimum value is 9.5 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDeltaFMaximum(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetDeltaFMaximum" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the stop frequency for 3rd offset segment to be used in the measurement. This method is valid only for downlink and when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the stop frequency for 3rd offset segment to be used in the measurement. This method is valid only for downlink and when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetDownlinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemDeltaFMaximum" crefType="PartiallyQualified" /> attribute.The default value is 15 MHz. The minimum value is 9.5 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockIntegrationBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockIntegrationBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the integration bandwidth of a subblock. This value is expressed in Hz. Integration bandwidth is the span from the left edge of the leftmost carrier to the right edge of the rightmost carrier within the subblock.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the integration bandwidth of a subblock. This value is expressed in Hz. Integration bandwidth is the span from the left edge of the leftmost carrier to the right edge of the rightmost carrier within the subblock.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSubblockIntegrationBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockAggregatedChannelBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the aggregated channel bandwidth of a configured subblock. This value is expressed in Hz. The aggregated channel bandwidth is the sum of the subblock integration bandwidth and the guard bands on either side of the subblock integration bandwidth.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the aggregated channel bandwidth of a configured subblock. This value is expressed in Hz. The aggregated channel bandwidth is the sum of the subblock integration bandwidth and the guard bands on either side of the subblock integration bandwidth.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSubblockAggregatedChannelBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetNumberOfOffsets(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of SEM offset segments.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the number of SEM offset segments.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemNumberOfOffsets" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetNumberOfOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of SEM offset segments.
         </summary>
         <param name="selectorString">
            Specifies the subblock number.<br /> Example: "subblock0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the number of SEM offset segments.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemNumberOfOffsets" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetStartFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the start frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the start frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetStartFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetStartFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the start frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the start frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetStartFrequency" crefType="PartiallyQualified" /> attribute.The default value is 0.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetStopFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the stop frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the stop frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetStopFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetStopFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the stop frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Specifies the stop frequency of an offset segment relative to the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.ComponentCarrierBandwidth" crefType="PartiallyQualified" /> edge (single carrier) or <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSubblockAggregatedChannelBandwidth(System.String,System.Double@)" crefType="FullyQualified" /> edge (multi-carrier). This value is expressed in Hz.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetStopFrequency" crefType="PartiallyQualified" /> attribute.The default value is 1 MHz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetSideband(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetSideband" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the offset segment is present either on one side or on both sides of a carrier.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains whether the offset segment is present either on one side or on both sides of a carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetSideband" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband.Both" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetSideband" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the offset segment is present either on one side or on both sides of a carrier.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies whether the offset segment is present either on one side or on both sides of a carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetSideband" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband.Both" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetRbwFilterBandwidth(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the bandwidth of the resolution bandwidth (RBW) filter used to sweep the acquired offset segment, when you set the SEM Offset RBW Auto method to False. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the bandwidth of the resolution bandwidth (RBW) filter used to sweep the acquired offset segment, when you set the SEM Offset RBW Auto method to False. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000 Hz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRbwFilterBandwidth" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the bandwidth of the resolution bandwidth (RBW) filter used to sweep the acquired offset segment, when you set the SEM Offset RBW Auto method to False. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the bandwidth of the resolution bandwidth (RBW) filter used to sweep the acquired offset segment, when you set the SEM Offset RBW Auto method to False. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRbwFilterBandwidth" crefType="PartiallyQualified" /> attribute.The default value is 30000 Hz.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the shape of a digital RBW filter.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the shape of a digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType.Gaussian" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the shape of a digital RBW filter.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the shape of a digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRbwFilterType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType.Gaussian" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetBandwidthIntegral(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetBandwidthIntegral" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetBandwidthIntegral(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetBandwidthIntegral" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask" nireturnvaluetype="System.Int32">

         <summary>
            Gets the criteria to determine the measurement fail status.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the criteria to determine the measurement fail status. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetLimitFailMask" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask.Absolute" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetLimitFailMask(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask" nireturnvaluetype="System.Int32">

         <summary>
            Sets the criteria to determine the measurement fail status.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the criteria to determine the measurement fail status. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetLimitFailMask" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask.Absolute" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetAbsoluteLimitStart(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetAbsoluteLimitStart" crefType="PartiallyQualified" /> attribute.The default value is -21.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetAbsoluteLimitStart(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetAbsoluteLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetAbsoluteLimitStart" crefType="PartiallyQualified" /> attribute.The default value is -21.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetAbsoluteLimitStop(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetAbsoluteLimitStop" crefType="PartiallyQualified" /> attribute.The default value is -21.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetAbsoluteLimitStop(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetAbsoluteLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetAbsoluteLimitStop" crefType="PartiallyQualified" /> attribute.The default value is -21.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetRelativeLimitStart(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRelativeLimitStart" crefType="PartiallyQualified" /> attribute.The default value is -53.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetRelativeLimitStart(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeLimitStart" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRelativeLimitStart" crefType="PartiallyQualified" /> attribute.The default value is -53.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetOffsetRelativeLimitStop(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetOffsetRelativeLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRelativeLimitStop" crefType="PartiallyQualified" /> attribute.The default value is -60.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetRelativeLimitStop(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetOffsetRelativeLimitStop" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the offset number and subblock number.<br /> Example:<br /> "subblock0" or <br />"subblock0/offset0".<br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Specifies the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemOffsetRelativeLimitStop" crefType="PartiallyQualified" /> attribute.The default value is -60.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the measurement sets the sweep time. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeAuto" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the measurement sets the sweep time.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the measurement sets the sweep time. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSweepTimeAuto" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.True" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetSweepTimeInterval(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeInterval(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetSweepTimeInterval" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Sets the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the sweep time when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeAuto(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemSweepTimeInterval" crefType="PartiallyQualified" /> attribute.The default value is 1 ms.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable averaging for the SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable averaging for the SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable averaging for the SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable averaging for the SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingEnabled" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.False" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetAveragingCount(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Upon return, contains the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingCount(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingCount" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" crefType="PartiallyQualified" />.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">
            Specifies the number of acquisitions used for averaging when you set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled)" crefType="FullyQualified" /> method to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingCount" crefType="PartiallyQualified" /> attribute.The default value is 10.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Gets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAveragingType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAveragingType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Sets the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAveragingType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType.Rms" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Gets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetFftWindow(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetFftWindow" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow" nireturnvaluetype="System.Int32">

         <summary>
            Sets the FFT window type to be used to reduce spectral leakage.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the FFT window type to be used to reduce spectral leakage.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemFftWindow" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.FlatTop" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAmplitudeCorrectionType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAmplitudeCorrectionType" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether the amplitude of the frequency bins, used in measurements, is corrected for external attenuation at the RF center frequency, or at the individual frequency bins. Use the RFmxInstr_CfgExternalAttenuationTable function to configure the external attenuation table.  </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAmplitudeCorrectionType" crefType="PartiallyQualified" /> attribute.The default value is <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAmplitudeCorrectionType.RFCenterFrequency" crefType="PartiallyQualified" />.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetAllTracesEnabled(System.String,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Gets whether to enable the traces to be stored and retrieved after performing the SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains whether to enable the traces to be stored and retrieved after performing the SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetAllTracesEnabled(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetAllTracesEnabled" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Int32">

         <summary>
            Sets whether to enable the traces to be stored and retrieved after performing the SEM measurement.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies whether to enable the traces to be stored and retrieved after performing the SEM measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemAllTracesEnabled" crefType="PartiallyQualified" /> attribute.The default value is FALSE.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.GetNumberOfAnalysisThreads(System.String,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Gets the maximum number of threads used for parallelism for the SEM measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Upon return, contains the maximum number of threads used for parallelism for the SEM measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetNumberOfAnalysisThreads(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="SetNumberOfAnalysisThreads" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Sets the maximum number of threads used for parallelism for the SEM measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations.
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="value">Specifies the maximum number of threads used for parallelism for the SEM measurement. The number of threads can range from 1 to the number of physical cores. The number of threads you set may not be used in calculations. The actual number of threads used depends on the problem size, system resources, data availability, and other considerations. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method sets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemNumberOfAnalysisThreads" crefType="PartiallyQualified" /> attribute.The default value is 1.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureUplinkMaskType" nihasget="0" nihasset="0" niparameters="selectorString,uplinkMaskType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType" nireturnvaluetype="System.Int32">

         <summary>
            Configures the standard defined mask type that has to be used in the measurement for uplink. <br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="uplinkMaskType">
            Specifies the spectrum emission mask used in the measurement for uplink. You must set the mask type to <em>custom</em> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureSweepTime(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureSweepTime" nihasget="0" nihasset="0" niparameters="selectorString,sweepTimeAuto,sweepTimeInterval" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the sweep time.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="sweepTimeAuto">Specifies whether the measurement sets the sweep time.</param>
         <param name="sweepTimeInterval">
            Specifies the sweep time when you set the <em>sweepTimeAuto</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" crefType="PartiallyQualified" />. This value is expressed in seconds.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureAveraging(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureAveraging" nihasget="0" nihasset="0" niparameters="selectorString,averagingEnabled,averagingCount,averagingType" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled,System.Int32,NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingType" nireturnvaluetype="System.Int32">

         <summary>
            Configures averaging for the SEM measurement.<br />
         </summary>
         <param name="selectorString">Pass an empty string. The signal name that is passed when creating the signal configuration is used.</param>
         <param name="averagingEnabled">Specifies whether to enable averaging for the measurement.</param>
         <param name="averagingCount">
            Specifies the number of acquisitions used for averaging when you set the <em>averagingEnabled</em> parameter to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemAveragingEnabled.True" crefType="PartiallyQualified" />.
         </param>
         <param name="averagingType">Specifies the averaging type for averaging multiple spectrum acquisitions. The averaged spectrum is used for the measurement.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetFrequencyArray(System.String,System.Double[],System.Double[],NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetFrequencyArray" nihasget="0" nihasset="0" niparameters="selectorString,offsetStartFrequency,offsetStopFrequency,offsetSideband" niparametertypes="System.String,System.Double[],System.Double[],NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures an array of the start and stop frequencies and the sideband of an offset segment.<br />
            Use "subblock(n)" as the selector string to configure or read this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="offsetStartFrequency">Specifies an array of the start frequencies of an offset segment relative to the component carrier bandwidth edge (single carrier) or subblock aggregated channel bandwidth edge (multi-carrier). This value is expressed in Hz.</param>
         <param name="offsetStopFrequency">Specifies an array of the stop frequencies of an offset segment relative to the component carrier bandwidth edge (single carrier) or subblock aggregated channel bandwidth edge (multi-carrier). This value is expressed in Hz.</param>
         <param name="offsetSideband">Specifies an array of whether the offset segment is present either on one side or on both sides of a carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetRbwFilterArray(System.String,System.Double[],NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRbwFilterArray" nihasget="0" nihasset="0" niparameters="selectorString,offsetRbw,offsetRbwFilterType" niparametertypes="System.String,System.Double[],NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures the offset RBW and the offset RBW filter type array.<br />
            Use "subblock(n)" as the selector string to configure this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="offsetRbw">Specifies an array of the bandwidth of an RBW filter used to sweep an acquired offset segment. This value is expressed in Hz.</param>
         <param name="offsetRbwFilterType">Specifies an array of the shape of the digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetBandwidthIntegralArray(System.String,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetBandwidthIntegralArray" nihasget="0" nihasset="0" niparameters="selectorString,bandwidthIntegral" niparametertypes="System.String,System.Int32[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures an array of the bandwidth integral of the offset segments.<br />
            Use "subblock(n)" as the selector string to configure or read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="bandwidthIntegral">Specifies an array of the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.	When you set this parameter to a value greater than 1, the measurement acquires the spectrum with a narrow resolution and then processes it digitally to get a wider resolution that is equal to the product of a bandwidth integral and a RBW.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetAbsoluteLimitArray(System.String,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetAbsoluteLimitArray" nihasget="0" nihasset="0" niparameters="selectorString,absoluteLimitStart,absoluteLimitStop" niparametertypes="System.String,System.Double[],System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures an array of the start limit and the stop limit of the offset segments.<br />
            Use "subblock(n)" as the selector string to configure this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="absoluteLimitStart">Specifies an array of the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.</param>
         <param name="absoluteLimitStop">Specifies an array of the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureNumberOfOffsets(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureNumberOfOffsets" nihasget="0" nihasset="0" niparameters="selectorString,numberOfOffsets" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Configures the number of offset segments for the SEM measurement.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="numberOfOffsets">Specifies the number of SEM offset segments.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetFrequency(System.String,System.Double,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetFrequency" nihasget="0" nihasset="0" niparameters="selectorString,offsetStartFrequency,offsetStopFrequency,offsetSideband" niparametertypes="System.String,System.Double,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband" nireturnvaluetype="System.Int32">

         <summary>
            Configures the start and stop frequencies and the sideband of an offset segment. <br />
            Use "offset(k)" or "subblock(n)" or "subblock(n)/offset(k)" as the selector string to configure or read this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the signal name, subblock number, and offset number.  <br />
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="offsetStartFrequency">Specifies the start frequency of an offset segment relative to the component carrier bandwidth edge (single carrier) or subblock aggregated channel bandwidth edge (multi-carrier). This value is expressed in Hz.</param>
         <param name="offsetStopFrequency">Specifies the stop frequency of an offset segment relative to the component carrier bandwidth edge (single carrier) or subblock aggregated channel bandwidth edge (multi-carrier). This value is expressed in Hz.</param>
         <param name="offsetSideband">Specifies whether the offset segment is present either on one side or on both sides of a carrier.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetRbwFilter(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRbwFilter" nihasget="0" nihasset="0" niparameters="selectorString,offsetRbw,offsetRbwFilterType" niparametertypes="System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType" nireturnvaluetype="System.Int32">

         <summary>
            Configures the offset RBW and the offset RBW filter type.<br />
            Use "offset(n)" or "subblock(n)" or "subblock(n)/offset(n)" as the selector string to configure this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the signal name, subblock number, and offset number.  <br />
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="offsetRbw">Specifies the bandwidth of an RBW filter used to sweep an acquired offset segment. This value is expressed in Hz.</param>
         <param name="offsetRbwFilterType">Specifies the shape of the digital RBW filter.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetBandwidthIntegral(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetBandwidthIntegral" nihasget="0" nihasset="0" niparameters="selectorString,bandwidthIntegral" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Int32">

         <summary>
            Configures the bandwidth integral of the offset segments.<br />
            Use "offset(k)" or "subblock(n)" or "subblock(n)/offset(k)" as the selector string to configure or read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, and offset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br /><span class="monospace">"result::r1/subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="bandwidthIntegral">Specifies the resolution of a spectrum to compare with the spectral mask limits as an integer multiple of the RBW.	When you set this parameter to a value greater than 1, the measurement acquires the spectrum with a narrow resolution and then processes it digitally to get a wider resolution that is equal to the product of a bandwidth integral and a RBW.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetAbsoluteLimit(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetAbsoluteLimit" nihasget="0" nihasset="0" niparameters="selectorString,absoluteLimitStart,absoluteLimitStop" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the start and the stop limit of an offset segment.<br />
            Use "offset(n)" or "subblock(n)/offset(n)" as the selector string to configure this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the signal name, subblock number, and offset number.  <br />
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="absoluteLimitStart">Specifies the absolute power limit corresponding to the beginning of an offset segment. This value is expressed in dBm.</param>
         <param name="absoluteLimitStop">Specifies the absolute power limit corresponding to the end of an offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetLimitFailMask(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="selectorString,limitFailMask" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask" nireturnvaluetype="System.Int32">

         <summary>
            Configures the limit fail mask of the offset segments that specify the criteria to determine the measurement fail status.<br />
            Use "offset(n)" or "subblock(n)/"offset(n)" as the selector string to configure or read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the signal name, subblock number, and offset number.  <br />
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="limitFailMask">Specifies the criteria to determine the measurement fail status.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetLimitFailMaskArray(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetLimitFailMaskArray" nihasget="0" nihasset="0" niparameters="selectorString,limitFailMask" niparametertypes="System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures an array of the limit fail mask of the offset segments that specifies the criteria to determine the measurement fail status.<br />
            Use "subblock(n)" as the selector string to configure or read this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="limitFailMask">Specifies an array of the criteria to determine the measurement fail status.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetRelativeLimit(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeLimit" nihasget="0" nihasset="0" niparameters="selectorString,relativeLimitStart,relativeLimitStop" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Configures the start and stop relative limit of the offset segment.<br />
            Use "offset(n)" or "subblock(n)" or "subblock(n)/offset(n)" as the selector string to configure this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the signal name, subblock number, and offset number.  <br />
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="relativeLimitStart">Specifies the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.</param>
         <param name="relativeLimitStop">Specifies the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ConfigureOffsetRelativeLimitArray(System.String,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ConfigureOffsetRelativeLimitArray" nihasget="0" nihasset="0" niparameters="selectorString,relativeLimitStart,relativeLimitStop" niparametertypes="System.String,System.Double[],System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Configures an array of the start and stop relative limit of the offset segment.<br />
            Use "subblock(n)" as the selector string to configure this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the subblock number.   <br />
            Example:<br /><span class="monospace">"subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="relativeLimitStart">Specifies an array of the relative power limit corresponding to the beginning of the offset segment. This value is expressed in dB.</param>
         <param name="relativeLimitStop">Specifies an array of the relative power limit corresponding to the end of the offset segment. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierConfiguration" crefType="PartiallyQualified" /> instance.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemDownlinkMaskType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the limits to be used in the measurement for Downlink.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Standard" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Standard" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies that standard defined limits are applied. For frequency range 1, set the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.gNodeBCategory" crefType="PartiallyQualified" /> method to desired value. Set the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetBand(System.String,System.Int32)" crefType="FullyQualified" /> method for selecting limits table within a gNodeB category. For frequency range 2, set the Band method for selecting limits table.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemDownlinkMaskType.Custom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Custom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that limits are applied based on user-defined offset segments.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemFftWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the FFT window type to be used to reduce spectral leakage.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No spectral leakage.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.FlatTop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FlatTop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using flat top window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.Hanning" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hanning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hanning window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.Hamming" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Hamming" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Hamming window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Gaussian window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.Blackman" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Blackman" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.BlackmanHarris" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="BlackmanHarris" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Blackman-Harris window type.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemFftWindow.KaiserBessel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="KaiserBessel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Spectral leakage is reduced using Kaiser-Bessel window type.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemLowerOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the measurement status based on the spectrum emission limits defined by the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has failed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has passed.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the overall measurement status based on the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has failed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has passed.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemOffsetLimitFailMask" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the criteria to determine the measurement fail status.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask.AbsAndRel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AbsAndRel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the measurement fails if the power in the segment exceeds both the absolute and relative masks.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask.AbsOrRel" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="AbsOrRel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the measurement fails if the power in the segment exceeds either the absolute or relative mask.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the measurement fails if the power in the segment exceeds the absolute mask.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetLimitFailMask.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Specifies that the measurement fails if the power in the segment exceeds the relative mask.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemOffsetRbwFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the shape of a digital RBW filter.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType.FftBased" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FftBased" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No RBW filtering is performed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType.Gaussian" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Gaussian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The RBW filter has a Gaussian response.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType.Flat" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Flat" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary> The RBW filter has a flat response.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemOffsetSideband" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the offset segment is present either on one side or on both sides of a carrier.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband.Negative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Negative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Configures a lower offset segment to the left of the leftmost carrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband.Positive" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Positive" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Configures an upper offset segment to the right of the rightmost carrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband.Both" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Both" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Configures both the negative and the positive offset segments.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemResults" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Provides methods to fetch and read the SEM measurement results.
         </summary>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the sum of powers of all the subblocks. This value includes the power in the inter-carrier gap within a subblock, but it excludes power in the  inter-subblock gaps. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">Upon return, contains the sum of powers of all the subblocks. This value includes the power in the inter-carrier gap within a subblock, but it excludes power in the  inter-subblock gaps. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsTotalAggregatedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetMeasurementStatus(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus" nireturnvaluetype="System.Int32">

         <summary>
            Gets the overall measurement status based on the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>
         <param name="selectorString">
            Specifies the result name.<br />Example: <span class="monospace">""</span><br /><br /><span class="monospace">"result::r1"</span><br /><br /> You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selectorString.
         </param>
         <param name="value">
            Upon return, contains the overall measurement status based on the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsMeasurementStatus" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetSubblockPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetSubblockPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power measured over the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> method. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name and Subblock number. Example: "Subblock0", "result::r1/Subblock0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power measured over the <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemComponentCarrierIntegrationBandwidth" crefType="PartiallyQualified" /> method. This value is expressed in dBm.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsSubblockPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetMeasurementStatus(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus" nireturnvaluetype="System.Int32">

         <summary>
            Gets the measurement status based on the spectrum emission limits defined by the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the measurement status based on the spectrum emission limits defined by the standard mask type that you configure in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMeasurementStatus" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetAbsoluteIntegratedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetAbsoluteIntegratedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the lower (negative) offset segment power. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the lower (negative) offset segment power. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetAbsoluteIntegratedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetRelativeIntegratedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetRelativeIntegratedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetRelativeIntegratedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetAbsolutePeakPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetAbsolutePeakPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak power in the lower (negative) offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the peak power in the lower (negative) offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetAbsolutePeakPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetRelativePeakPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetRelativePeakPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak power in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the peak power in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetRelativePeakPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency at which the peak power occurs in the lower (negative) offset segment. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency at which the peak power occurs in the lower (negative) offset segment. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetPeakFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the margin from the absolute limit mask for lower (negative) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the margin from the absolute limit mask for lower (negative) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMargin" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetMarginAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power at which the Margin occurs in the lower (negative) offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power at which the Margin occurs in the lower (negative) offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMarginAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetMarginRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power at which the Margin occurs in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power at which the Margin occurs in the lower (negative) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMarginRelativePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetLowerOffsetMarginFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetLowerOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency at which the Margin occurs in the lower (negative) offset. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency at which the Margin occurs in the lower (negative) offset. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsLowerOffsetMarginFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetMeasurementStatus(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus" nireturnvaluetype="System.Int32">

         <summary>
            Gets the measurement status based on the user-configured standard measurement limits. Spectrum emission limits can be defined by setting <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the measurement status based on the user-configured standard measurement limits. Spectrum emission limits can be defined by setting <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMeasurementStatus" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetAbsoluteIntegratedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetAbsoluteIntegratedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the upper (positive) offset segment power. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the upper (positive) offset segment power. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetAbsoluteIntegratedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetRelativeIntegratedPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetRelativeIntegratedPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetRelativeIntegratedPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetAbsolutePeakPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetAbsolutePeakPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak power in the upper (positive) offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the peak power in the upper (positive) offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetAbsolutePeakPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetRelativePeakPower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetRelativePeakPower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the peak power in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the peak power in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetRelativePeakPower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetPeakFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetPeakFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency at which the peak power occurs in the upper (positive)offset segment. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency at which the peak power occurs in the upper (positive)offset segment. This value is expressed in Hz. </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetPeakFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetMargin(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the margin from the absolute limit mask for upper (positive) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the margin from the absolute limit mask for upper (positive) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMargin" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetMarginAbsolutePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMarginAbsolutePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power at which the Margin occurs in the upper (positive) offset segment. This value is expressed in dBm.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the power at which the Margin occurs in the upper (positive) offset segment. This value is expressed in dBm.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMarginAbsolutePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetMarginRelativePower(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMarginRelativePower" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the power at which the Margin occurs in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">
            Upon return, contains the power at which the Margin occurs in the upper (positive) offset segment relative to <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetTotalAggregatedPower(System.String,System.Double@)" crefType="FullyQualified" /> method. This value is expressed in dB.
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMarginRelativePower" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.GetUpperOffsetMarginFrequency(System.String,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="GetUpperOffsetMarginFrequency" nihasget="0" nihasset="0" niparameters="selectorString,value" niparametertypes="System.String,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Gets the frequency at which the Margin occurs in the upper (positive) offset. This value is expressed in Hz.
         </summary>
         <param name="selectorString">
            Specifies the result name, Offset number and Subblock number. Example: "Subblock0", "result::r1/Subblock0" or "result::r1/Subblock0/Offset0". You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.
         </param>
         <param name="value">Upon return, contains the frequency at which the Margin occurs in the upper (positive) offset. This value is expressed in Hz.</param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>
         <remarks>
            This method gets the value of <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXPropertyId.SemResultsUpperOffsetMarginFrequency" crefType="PartiallyQualified" /> attribute.
         </remarks>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchLowerOffsetMarginArray(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetMarginArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,ref NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of measurement status, margin, frequency at margin, absolute, and relative power at margin for lower offset segments. The relative power is relative to the total aggregated power.<br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="measurementStatus">
            Upon return, contains an array of the measurement status indicating whether the power before and after the burst is within the standard defined limit.
            <br />
         </param>
         <param name="margin">
            Upon return, contains an array of the margin from the absolute limit mask for lower (negative) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.
            <br />
         </param>
         <param name="marginFrequency">
            Upon return, contains an array of the frequency at which the margin occurs in the lower offset. This value is expressed in Hz.
            <br />
         </param>
         <param name="marginAbsolutePower">
            Upon return, contains an array of the power at which the margin occurs in the lower offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="marginRelativePower">
            Upon return, contains an array of the power at which the margin occurs in the lower offset segment. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchLowerOffsetPowerArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of total absolute and relative powers, peak, absolute, and relative powers, and frequencies at peak absolute powers of lower offset segments. The relative power is relative to total aggregated power. <br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAbsolutePower">
            Upon return, contains an array of the lower (negative) segment power. This value is expressed in dBm.
            <br />
         </param>
         <param name="totalRelativePower">
            Upon return, contains an array of the power in the lower offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="peakAbsolutePower">
            Upon return, contains an array of the peak power in the lower offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakFrequency">
            Upon return, contains an array of the frequency at which the peak power occurs in the lower offset segment. This value is expressed in Hz.
            <br />
         </param>
         <param name="peakRelativePower">
            Upon return, contains an array of the peak power in the lower offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchUpperOffsetMarginArray(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetMarginArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,ref NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of measurement status, margin, frequency at margin, absolute, and relative power at margin for upper offset segments. The relative power is relative to the total aggregated power.<br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="measurementStatus">
            Upon return, contains an array of the measurement status indicating whether the power before and after the burst is within the standard defined limit.
            <br />
         </param>
         <param name="margin">
            Upon return, contains an array of the margin from the absolute limit mask for upper (positive) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.
            <br />
         </param>
         <param name="marginFrequency">
            Upon return, contains an array of the frequency at which the margin occurs in the upper offset. This value is expressed in Hz.
            <br />
         </param>
         <param name="marginAbsolutePower">
            Upon return, contains an array of the power at which the margin occurs in the upper offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="marginRelativePower">
            Upon return, contains an array of the power at which the margin occurs in the upper (positive) offset segment. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchUpperOffsetPowerArray(System.String,System.Double,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetPowerArray" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[],ref System.Double[]" nireturnvaluetype="System.Int32">

         <summary>
            Returns an array of total absolute and relative powers, peak, absolute, and relative powers, and frequencies at peak absolute powers of upper offset segments. The relative power is relative to total aggregated power. <br />
            Use "subblock(n)" as the selector string to read results from this method. <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAbsolutePower">
            Upon return, contains an array of the upper segment power. This value is expressed in dBm.
            <br />
         </param>
         <param name="totalRelativePower">
            Upon return, contains an array of the power in the upper offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="peakAbsolutePower">
            Upon return, contains an array of the peak power in the upper offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakFrequency">
            Upon return, contains an array of the frequency at which the peak power occurs in the upper offset segment. This value is expressed in Hz.
            <br />
         </param>
         <param name="peakRelativePower">
            Upon return, contains an array of the peak power in the upper offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchSpectrum(System.String,System.Double,NationalInstruments.Spectrum{System.Single}@,NationalInstruments.Spectrum{System.Single}@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSpectrum" nihasget="0" nihasset="0" niparameters="selectorString,timeout,spectrum,compositeMask" niparametertypes="System.String,System.Double,ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]],ref NationalInstruments.Spectrum`1[[System.Single, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" nireturnvaluetype="System.Int32">

         <summary>
            Fetches the spectrum used for SEM measurements.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="spectrum">
            Upon return, contains the spectrum.
            <br />
         </param>
         <param name="compositeMask">
            Upon return, contains the composite mask trace used for the channel.<br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchTotalAggregatedPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchTotalAggregatedPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAggregatedPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the sum of powers in all the subblocks.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAggregatedPower">
            Upon return, contains the total power of all the subblocks. This value is expressed in dBm. The power in each subblock is the sum of powers of all the frequency bins over the integration bandwidth of the subblocks. This value includes the power in the inter-carrier gaps within a subblock, but it does not include the power within the subblock gaps.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchMeasurementStatus(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchMeasurementStatus" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemMeasurementStatus" nireturnvaluetype="System.Int32">

         <summary>
            Returns the overall measurement status based on the standard mask type that you configure.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of  the result name.  If you do not specify the result name, the default result instance is used. <br />
            Example:<br /><span class="monospace">""</span><br /><span class="monospace">"result::r1"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildResultString(System.String)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="measurementStatus">
            Upon return, contains the measurement status indicating whether the power before and after the burst is within the standard defined limit.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchSubblockPower(System.String,System.Double,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchSubblockPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,subblockPower" niparametertypes="System.String,System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the power of the subblock.<br />
            Use "subblock(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, and subblock number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0"</span><br /><span class="monospace">"result::r1/subblock0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildSubblockString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="subblockPower">
            Upon return, contains the sum of powers of all the frequency bins over the integration bandwidth of the subblock. This includes the power in inter-carrier gaps within a subblock. This value is expressed in dBm.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchLowerOffsetMargin(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemLowerOffsetMeasurementStatus,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the measurement status, margin, frequency at margin, absolute, and relative powers at the margin for lower offset segments. The relative power is relative to the total aggregated power. <br />
            Use "offset(n)" or "subblock(n)/offset(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, and offset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br /><span class="monospace">"result::r1/subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="measurementStatus">
            Upon return, contains the measurement status indicating whether the power before and after the burst is within the standard defined limit.
            <br />
         </param>
         <param name="margin">
            Upon return, contains the margin from the absolute limit mask for lower (negative) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.
            <br />
         </param>
         <param name="marginFrequency">
            Upon return, contains the frequency at which the margin occurs in the lower offset. This value is expressed in Hz.
            <br />
         </param>
         <param name="marginAbsolutePower">
            Upon return, contains the power at which the margin occurs in the lower offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="marginRelativePower">
            Upon return, contains the power at which the margin occurs in the lower offset segment. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchLowerOffsetPower(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchLowerOffsetPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the total absolute and relative powers, peak, absolute, and relative powers, and the frequency at the peak absolute power of the lower offset segment. The relative power is relative to the total aggregated power.<br />
            Use "offset(n)" or "subblock(n)/offset(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, and offset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br /><span class="monospace">"result::r1/subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAbsolutePower">
            Upon return, contains the lower (negative) offset segment power. This value is expressed in dBm.
            <br />
         </param>
         <param name="totalRelativePower">
            Upon return, contains the power in the lower offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="peakAbsolutePower">
            Upon return, contains the peak power in the lower offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakFrequency">
            Upon return, contains the frequency at which the peak power occurs in the lower offset segment. This value is expressed in Hz.
            <br />
         </param>
         <param name="peakRelativePower">
            Upon return, contains the peak power in the lower offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchUpperOffsetMargin(System.String,System.Double,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetMargin" nihasget="0" nihasset="0" niparameters="selectorString,timeout,measurementStatus,margin,marginFrequency,marginAbsolutePower,marginRelativePower" niparametertypes="System.String,System.Double,out NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the measurement status, margin, frequency at margin, absolute, and relative powers at the margin for upper offset segments. The relative power is relative to the total aggregated power. <br />
            Use "offset(n)" or "subblock(n)/offset(n)" as the selector string to read results from this method.
            <br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, and offset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br /><span class="monospace">"result::r1/subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="measurementStatus">
            Upon return, contains the measurement status indicating whether the power before and after the burst is within the standard defined limit.
            <br />
         </param>
         <param name="margin">
            Upon return, contains the margin from the absolute limit mask for upper (positive) offset. Margin is defined as the minimum difference between the spectrum and the limit mask. This value is expressed in dB.
            <br />
         </param>
         <param name="marginFrequency">
            Upon return, contains the frequency at which the margin occurs in the upper offset. This value is expressed in Hz.
            <br />
         </param>
         <param name="marginAbsolutePower">
            Upon return, contains the power at which the margin occurs in the upper offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="marginRelativePower">
            Upon return, contains the power at which the margin occurs in the upper offset segment. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.FetchUpperOffsetPower(System.String,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)" nitypekind="Method" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="FetchUpperOffsetPower" nihasget="0" nihasset="0" niparameters="selectorString,timeout,totalAbsolutePower,totalRelativePower,peakAbsolutePower,peakFrequency,peakRelativePower" niparametertypes="System.String,System.Double,out System.Double,out System.Double,out System.Double,out System.Double,out System.Double" nireturnvaluetype="System.Int32">

         <summary>
            Returns the total absolute and relative powers, peak, absolute, and relative powers, and the frequency at the peak absolute power of the upper offset segment. The relative power is relative to the total aggregated power.<br />
            Use "offset(n)" or "subblock(n)/offset(n)" as the selector string to read results from this method.<br />
         </summary>
         <param name="selectorString">
            Specifies a <a href="rfmxspecan.chm::/Using_Selector_String.html">selector string</a> comprising of the result name, subblock number, carrier number, and offset number.  If you do not specify the result name, the default result instance is used.
            Example:<br /><span class="monospace">"subblock0/offset0"</span><br /><span class="monospace">"result::r1/subblock0/offset0"</span><br />
            You can use the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.BuildOffsetString(System.String,System.Int32)" crefType="FullyQualified" /> method to build the selector string.<br />
         </param>
         <param name="timeout">Specifies the timeout for fetching the specified measurement. This value is expressed in seconds. Set this value to an appropriate time, longer than expected for fetching the measurement. A value of -1 specifies that the method waits until the measurement is complete.</param>
         <param name="totalAbsolutePower">
            Upon return, contains the upper (positive) offset segment power. This value is expressed in dBm.
            <br />
         </param>
         <param name="totalRelativePower">
            Upon return, contains the power in the upper offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <param name="peakAbsolutePower">
            Upon return, contains the peak power in the upper offset segment. This value is expressed in dBm.
            <br />
         </param>
         <param name="peakFrequency">
            Upon return, contains the frequency at which the peak power occurs in the upper offset segment. This value is expressed in Hz.
            <br />
         </param>
         <param name="peakRelativePower">
            Upon return, contains the peak power in the upper offset segment relative to total aggregated power. This value is expressed in dB.
            <br />
         </param>
         <returns>Returns the status code of this method. The status code either indicates success or describes a warning condition.</returns>

      </member>
      <member name="P:NationalInstruments.RFmx.NRMX.RFmxNRMXSemResults.ComponentCarrier" nitypekind="Property" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="ComponentCarrier" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults">

         <summary>
            Gets the <see cref="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemComponentCarrierResults" crefType="PartiallyQualified" /> instance that provides methods to fetch and read the SEM Component Carrier results.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemSweepTimeAuto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement sets the sweep time.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement uses the sweep time that you specify in the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetSweepTimeInterval(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemSweepTimeAuto.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement uses a sweep time of 1 ms.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemUplinkMaskType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the spectrum emission mask used in the measurement for uplink. You must set the mask type to <see cref="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" crefType="PartiallyQualified" /> to configure the custom offset masks. Refer to section 6.5.2 of the <em>3GPP 38.101</em> specification for more information about standard-defined mask types.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.General" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="General" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement selects the offset frequencies and limits for the SEM as defined in Table 6.5.2.2-1 in section 6.5.2 of the <em>3GPP TS 38.101-1</em> specification, Table 6.5.2.1-1 and Table 6.5A.2.1-1 in section 6.5.2 of the <em>3GPP TS 38.101-2</em> specification, and Table 6.5B.2.1.1-1 in section 6.5B of the <em>3GPP TS 38.101-3</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.NS35" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NS35" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement selects offset frequencies and limits for the SEM as defined in Table 6.5.2.3.1-1 in section 6.5.2 of the <em>3GPP TS 38.101-1</em> specification and Table 6.5B.2.1.2.1-1 in section 6.5B of the <em>3GPP TS 38.101-3</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.Custom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Custom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            You need to configure the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetNumberOfOffsets(System.String,System.Int32)" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetStartFrequency(System.String,System.Double)" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetStopFrequency(System.String,System.Double)" crefType="FullyQualified" />,
            <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetAbsoluteLimitStart(System.String,System.Double)" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetAbsoluteLimitStop(System.String,System.Double)" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetSideband(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetSideband)" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetRbwFilterBandwidth(System.String,System.Double)" crefType="FullyQualified" />, <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetRbwFilterType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemOffsetRbwFilterType)" crefType="FullyQualified" />, and <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetOffsetBandwidthIntegral(System.String,System.Int32)" crefType="FullyQualified" /> properties for each offset.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.NS03" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NS03" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.5.2.3.3-1 in section 6.5.2 of the <em>3GPP TS 38.101-1</em> specification. In case of non-contiguous EN-DC consisting of at least one subblock with all E-UTRA carriers, for that E-UTRA subblock, the measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.6.2.2.5.1-1 and 6.6.2.2.5.1-2 in section 6.6.2 of the <em>3GPP TS 36.521-1</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.NS04" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NS04" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement selects the offset frequencies and limits for the SEM as defined in Table 6.5.2.3.2-3 in section 6.5.2 of the <em>3GPP TS 38.101-1</em> specification. Subcarrier spacing can be configured through <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetBandwidthPartSubcarrierSpacing(System.String,System.Double)" crefType="FullyQualified" /> method. Subcarrier spacing corresponding to first bandwidth part is used for computing mask. Transform precoding can be configured through <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXComponentCarrier.SetPuschTransformPrecodingEnabled(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXPuschTransformPrecodingEnabled)" crefType="FullyQualified" /> method. Transform precoding corresponding to first bandwidth part is used for computing mask. In case of non-contiguous EN-DC consisting of at least one subblock with all E-UTRA carriers, for that E-UTRA subblock, the measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.6.2.2.3.2-3 in section 6.6.2 of the <em>3GPP TS 36.521-1</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.NS06" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NS06" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.5.2.3.4-1 in section 6.5.2 of the <em>3GPP TS 38.101-1</em> specification In case of non-contiguous EN-DC consisting of at least one subblock with all E-UTRA carriers, for that E-UTRA subblock, the measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.6.2.2.5.3-1 and 6.6.2.2.5.3-2 in section 6.6.2 of the <em>3GPP TS 36.521-1</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType.NS21" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="NS21" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.5.2.3.3-1 in section 6.5.2 of the <em>3GPP TS 38.101-1</em> specification. In case of non-contiguous EN-DC consisting of at least one subblock with all E-UTRA carriers, for that E-UTRA subblock, the measurement selects the offset frequencies and limits for the SEM, as defined in Table 6.6.2.2.5.1-1 and 6.6.2.2.5.1-2 in section 6.6.2 of the <em>3GPP TS 36.521-1</em> specification.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSemUpperOffsetMeasurementStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Returns the measurement status based on the user-configured standard measurement limits. Spectrum emission limits can be defined by setting <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMXSemConfiguration.SetUplinkMaskType(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXSemUplinkMaskType)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus.Fail" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Fail" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has failed.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSemUpperOffsetMeasurementStatus.Pass" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Pass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Indicates that the measurement has passed.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSsbEnabled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether synchronization signal block (SSB) is present in the transmitted signal.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled.False" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="False" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Detection of SSB in the transmitted signal is disabled.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbEnabled.True" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="True" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Detection of SSB in the transmitted signal is enabled.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSsbPattern" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the candidate SS/PBCH blocks with different subcarrier spacing configurations as defined in the section 4.1 of <em>3GPP TS 38.213</em> specification.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseAUpTo3GHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseAUpTo3GHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 15 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes of {2, 8} + 14 * <em>n</em>, where <em>n</em> is 0 or 1.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseA3GHzTo6GHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseA3GHzTo6GHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 15 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes of {2, 8} + 14 * <em>n</em>, where <em>n</em> is 0, 1, 2, or 3.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseBUpTo3GHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseBUpTo3GHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 30 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes of {4, 8, 16, 20} + 28 * <em>n</em>, where <em>n</em> is 0.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseB3GHzTo6GHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseB3GHzTo6GHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 30 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes of {4, 8, 16, 20} + 28 * <em>n</em>, where <em>n</em> is 0, 1, 2, or 3.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseCUpTo3GHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseCUpTo3GHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 30 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes of {2, 8} + 14 * <em>n</em>, where <em>n</em> is 0 or 1.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseC3GHzTo6GHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseC3GHzTo6GHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 30 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes of {2, 8} + 14 * <em>n</em>, where <em>n</em> is 0, 1, 2, or 3.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseD" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseD" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 120 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes {4, 8, 16, 20} + 28 * <em>n</em>.
            For carrier frequencies higher than 6 GHz, <em>n</em> is 0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, or 18.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSsbPattern.CaseE" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="CaseE" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Use with 240 kHz subcarrier spacing. The first symbols of the candidate SS/PBCH blocks have indexes {8, 12, 16, 20, 32, 36, 40, 44} + 56 * <em>n</em>.
            For carrier frequencies higher than 6 GHz, <em>n</em> is 0, 1, 2, 3, 5, 6, 7, or 8.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSubblockFrequencyDefinition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies if the subblock center frequency definition is an absolute frequency or relative to the absolute frequency of the first subblock. This method is ignored for the first subblock and is considered to be absolute by the measurement.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition.Relative" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Relative" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Subblock center frequency is relative to the center frequency of the first subblock.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXSubblockFrequencyDefinition.Absolute" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Absolute" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Subblock center frequency is an absolute frequency.
         </summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXSubObject" nitypekind="Class" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXSubObject" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Represents members that are common to all sub-object of RFmxNRMX classes.
         </summary>
         <threadsafety safety="safe" />

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXTransmitterArchitecture" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the RF architecture at the transmitter in case of a multi-carrier. Each component carriers within a subblock can have separate LO or one common LO for entire subblock.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerComponentCarrier" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="LOPerComponentCarrier" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>IQ impairments and In-band emission are calculated per component carrier.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTransmitterArchitecture.LOPerSubblock" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="LOPerSubblock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>Additional subblock based results such as Subblock IQ Offset and Subblock In band emission are calculated apart from per carrier results.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXTriggerMinimumQuietTimeMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies whether the measurement computes the minimum quiet time used for triggering.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode.Manual" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Manual" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The minimum quiet time for triggering is the value of the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetTriggerMinimumQuietTimeDuration(System.String,System.Double)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerMinimumQuietTimeMode.Auto" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Auto" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The measurement computes the minimum quiet time used for triggering.</summary>

      </member>
      <member name="T:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType" nitypekind="Enum" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="RFmxNRMXTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            Specifies the type of trigger to be used for signal acquisition.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>No Reference Trigger is configured.</summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The Reference Trigger is not asserted until a digital edge is detected. The source of the digital edge is specified using the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetDigitalEdgeTriggerSource(System.String,System.String)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.IQPowerEdge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="IQPowerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>
            The Reference Trigger is asserted when the signal changes past the level specified by the slope (rising or falling), which is configured using the <see cref="M:NationalInstruments.RFmx.NRMX.RFmxNRMX.SetIQPowerEdgeTriggerSlope(System.String,NationalInstruments.RFmx.NRMX.RFmxNRMXIQPowerEdgeTriggerSlope)" crefType="FullyQualified" /> method.
         </summary>

      </member>
      <member name="F:NationalInstruments.RFmx.NRMX.RFmxNRMXTriggerType.Software" nitypekind="EnumValue" nieditor="Sebastius" niapproved="False" nilastupdated="5/6/2020 8:23:54 PM" niupdatedby="Sebastius" nidisplayname="Software" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">

         <summary>The Reference Trigger is not asserted until a software trigger occurs. </summary>

      </member>
   </members>
</doc>